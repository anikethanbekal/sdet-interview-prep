{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf10 SDET Interview Preparation Guide","text":"<p>Welcome! Your all-in-one resource for SDET, DSA, System Design, and coding interview prep.</p> <p>Note: This repository is under active development. Expect frequent updates. Disclaimer: Some of the contents in this repository are generated with the assistance of GPT.</p>"},{"location":"#quick-links","title":"\ud83d\ude80 Quick Links","text":"Cheat Sheets Interview Qs Practice Hub Tech Guide"},{"location":"#main-sections","title":"\ud83d\uddc2\ufe0f Main Sections","text":""},{"location":"#cheat-sheets","title":"\ud83d\udcda Cheat Sheets","text":"<ul> <li>Java Cheat Sheets</li> <li>Python Cheat Sheets</li> <li>Manual Testing</li> <li>Automation (Selenium, etc.)</li> </ul>"},{"location":"#interview-questions","title":"\ud83d\udca1 Interview Questions","text":"<ul> <li>SDET Technical</li> </ul>"},{"location":"#tech-essentials-guide","title":"\ud83c\udfd7\ufe0f Tech Essentials Guide","text":"<ul> <li>Programming (Java &amp; Python)</li> <li>Testing Concepts</li> <li>API Testing</li> <li>CI/CD</li> <li>Selenium &amp; Playwright</li> </ul>"},{"location":"#practice-programs-hub","title":"\ud83d\udcdd Practice Programs Hub","text":"Strings  - [Reverse a String (No Built-ins)](practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions.md) - [Check If Two Strings Are Anagrams](practice-programs-hub/strings/AnagramCheck.md) - [Count Character Occurrences](practice-programs-hub/strings/CharacterCount.md) - [Count Uppercase Characters](practice-programs-hub/strings/CountUppecaseCharacter.md) - [Count Occurrence of Characters](practice-programs-hub/strings/CountOccurrenceCharcter.md) - [Duplicate Characters](practice-programs-hub/strings/DuplicateCharacters.md) - [Remove Leading Zeros](practice-programs-hub/strings/RemoveLeadingZeros.md) - [Replace Character](practice-programs-hub/strings/ReplaceChar.md) - [Swap Pairs](practice-programs-hub/strings/SwapPairs.md)  Numbers  - [Check Prime](practice-programs-hub/numbers/01-is-prime.md) - [Factorial](practice-programs-hub/numbers/02-factorial.md) - [Fibonacci](practice-programs-hub/numbers/03-fibonacci.md) - [GCD](practice-programs-hub/numbers/04-gcd.md) - [LCM](practice-programs-hub/numbers/05-lcm.md) - [Palindrome Number](practice-programs-hub/numbers/06-palindrome-number.md) - [Armstrong Number](practice-programs-hub/numbers/07-armstrong-number.md) - [Reverse Number](practice-programs-hub/numbers/08-reverse-number.md) - [Sum of Digits](practice-programs-hub/numbers/09-sum-of-digits.md) - [Count Digits](practice-programs-hub/numbers/10-count-digits.md)  Arrays  - [Find Largest Element](practice-programs-hub/arrays/01-find-largest-element.md) - [Reverse Array](practice-programs-hub/arrays/02-reverse-array.md) - [Find Second Largest](practice-programs-hub/arrays/03-find-second-largest.md) - [Find Missing Number](practice-programs-hub/arrays/04-find-missing-number.md) - [Find Duplicate](practice-programs-hub/arrays/05-find-duplicate.md) - [Rotate Array](practice-programs-hub/arrays/06-rotate-array.md) - [Find Pair Sum](practice-programs-hub/arrays/07-find-pair-sum.md) - [Find Majority Element](practice-programs-hub/arrays/08-find-majority-element.md) - [Find Subarray Sum](practice-programs-hub/arrays/09-find-subarray-sum.md) - [Find Kth Largest](practice-programs-hub/arrays/10-find-kth-largest.md) - [Find Longest Consecutive Sequence](practice-programs-hub/arrays/11-find-longest-consecutive-sequence.md) - [Find Product Except Self](practice-programs-hub/arrays/12-find-product-except-self.md) - [Find Maximum Subarray Sum](practice-programs-hub/arrays/13-find-maximum-subarray-sum.md) - [Find Common Elements](practice-programs-hub/arrays/14-find-common-elements.md) - [Find Median](practice-programs-hub/arrays/15-find-median.md) - [Find Unique Element](practice-programs-hub/arrays/16-find-unique-element.md) - [Find Intersection](practice-programs-hub/arrays/17-find-intersection.md) - [Find First Missing Positive](practice-programs-hub/arrays/18-find-first-missing-positive.md) - [Find Maximum Product Subarray](practice-programs-hub/arrays/19-find-maximum-product-subarray.md) - [Find Maximum Sum Increasing Subsequence](practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence.md) - [Find Equilibrium Index](practice-programs-hub/arrays/21-find-equilibrium-index.md) - [Find Leaders in Array](practice-programs-hub/arrays/22-find-leaders-in-array.md) - [Find Smallest Subarray Sum](practice-programs-hub/arrays/23-find-smallest-subarray-sum.md) - [Find Longest Palindromic Subarray](practice-programs-hub/arrays/24-find-longest-palindromic-subarray.md) - [Find Maximum Circular Subarray Sum](practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum.md) - [Find Minimum in Rotated Sorted Array](practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array.md) - [Find Maximum Sum Non-Adjacent](practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent.md) - [Find Longest Subarray with Sum K](practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k.md) - [Find Subarray with Product Less Than K](practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k.md) - [Find Maximum Length of Equal 0s and 1s](practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s.md)"},{"location":"#i-how-to-use-this-site","title":"\u2139\ufe0f How to Use This Site","text":"<ul> <li>Use the left navigation menu to jump to any topic.</li> <li>Each section contains detailed notes, code samples, and best practices.</li> <li>Practice problems include both Java and Python solutions.</li> </ul>"},{"location":"#contributing-feedback","title":"\ud83d\udce2 Contributing &amp; Feedback","text":"<ul> <li>This site is actively developed.  </li> <li>For issues or contributions, open an issue or pull request on GitHub.</li> <li>Feedback and suggestions are always welcome!</li> </ul> Happy Learning and Coding!"},{"location":"cheat-sheets/StandardTemplate/","title":"\ud83d\udcd8 Manual Testing Basics","text":"<p>Manual Testing is the process of manually checking software for defects. It requires a tester to play the role of an end user and use most of the application's features to ensure correct behavior.</p>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#what-is-manual-testing","title":"\ud83e\udde0 What is Manual Testing?","text":"<p>Manual testing involves testing software manually without using automation tools. Testers write test cases, execute them, and report bugs based on observations.</p>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#key-concepts","title":"\u2705 Key Concepts","text":"<ul> <li>Test Case: A set of actions executed to verify a particular feature or functionality.</li> <li>Test Plan: A document that outlines the strategy, scope, and timeline for testing.</li> <li>Bug Report: A report logged in a defect management system describing a found issue.</li> <li>Exploratory Testing: Ad-hoc testing without predefined cases, focusing on discovery.</li> <li>Smoke Testing: Initial testing to check basic functionality.</li> <li>Regression Testing: Verifying previously working functionality after code changes.</li> </ul>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#manual-vs-automation-testing","title":"\ud83d\udd04 Manual vs Automation Testing","text":"Feature Manual Testing Automation Testing Execution Performed by humans Performed by tools/scripts Speed Slower Faster Cost Higher over time Lower for repetitive tasks Accuracy Prone to human error High if scripts are reliable Best for Exploratory, usability, ad-hoc tests Repetitive, regression, performance","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#common-tools-in-manual-testing","title":"\ud83e\uddf0 Common Tools in Manual Testing","text":"<ul> <li>Test Case Management: TestLink, TestRail, Zephyr</li> <li>Defect Tracking: Jira, Bugzilla, MantisBT</li> <li>Documentation: Confluence, Google Docs</li> </ul>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#best-practices","title":"\ud83d\udccc Best Practices","text":"<ul> <li>Understand the requirements before testing</li> <li>Write clear, concise test cases</li> <li>Reproduce bugs consistently</li> <li>Maintain traceability between test cases and requirements</li> <li>Collaborate with developers and product owners</li> </ul>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#tips-for-sdets-and-qa-engineers","title":"\ud83d\udca1 Tips for SDETs and QA Engineers","text":"<ul> <li>Learn to document test cases for both manual and automation workflows</li> <li>Manual testing builds intuition for edge cases that automation may miss</li> <li>It's often the first step before automating complex test cases</li> </ul>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#recommended-reading","title":"\ud83d\udcd8 Recommended Reading","text":"<ul> <li>ISTQB Foundation Level Syllabus</li> <li>\u201cLessons Learned in Software Testing\u201d by Cem Kaner</li> </ul>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>manual-testing</code>, <code>test-design</code>, <code>qa</code>, <code>defect-management</code>, <code>test-strategy</code></p>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/StandardTemplate/#tags-only-for-reference","title":"Tags Only for reference","text":"<ul> <li>Use one topic per file, matching the main theme.</li> <li>Put tools like selenium, pytest, etc., in tags \u2014 not in topic unless the doc is centered around the tool.</li> <li>Use consistent naming: lowercase, hyphenated.</li> </ul> <p>\ud83d\udd27 Coding testing types topic: manual-testing topic: automation-testing topic: api-testing topic: performance-testing topic: functional-testing topic: integration-testing topic: unit-testing topic: end-to-end-testing topic: regression-testing topic: exploratory-testing</p> <p>\ud83e\uddea Testing Concepts &amp; Practices topic: test-design topic: test-strategy topic: test-coverage topic: defect-management topic: test-case-design topic: testing-life-cycle topic: test-reporting</p> <p>\ud83d\udcbb Tools &amp; Frameworks</p> <p>topic: selenium topic: junit topic: testng topic: rest-assured topic: postman topic: pytest topic: cucumber topic: bdd topic: playwright topic: cypress</p> <p>\ud83d\udd04 DevOps &amp; CI/CD</p> <p>topic: continuous-integration topic: devops topic: pipeline-automation topic: test-execution topic: test-deployment</p> <p>\ud83d\udce6 Code &amp; Test Architecture</p> <p>topic: framework-design topic: page-object-model topic: test-architecture topic: reusable-components</p> <p>\ud83d\udcda Language-Specific topic: java-basics topic: python-basics topic: collections topic: exception-handling topic: file-handling topic: oops topic: string-handling</p> <p>\ud83e\udde0 Interview &amp; Behavior topic: interview-prep topic: test-scenarios topic: edge-cases topic: qa-behavioral topic: debugging</p>","tags":["automation","manual-testing","selenium","testng","junit","pytest","rest-assured","api-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","bdd","cucumber","qa","sdet","unit-test","integration-test","end-to-end-test","continuous-integration","tools","continuous-integration"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/","title":"\ud83d\udcd8 Advanced Java Topics for SDETs","text":"<p>This cheat sheet covers advanced topics that are highly beneficial for experienced SDETs.</p>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#multithreading","title":"\ud83e\udde0 Multithreading","text":"<p>Multithreading allows concurrent execution of two or more parts of a program for maximum utilization of the CPU. This is particularly useful for running tests in parallel.</p>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#creating-threads","title":"Creating Threads","text":"<ol> <li> <p>Extending the <code>Thread</code> class:</p> <pre><code>class MyThread extends Thread {\n    public void run() {\n        System.out.println(\"Thread is running.\");\n    }\n}\n\nMyThread t1 = new MyThread();\nt1.start();\n</code></pre> </li> <li> <p>Implementing the <code>Runnable</code> interface (Recommended):</p> <pre><code>class MyRunnable implements Runnable {\n    public void run() {\n        System.out.println(\"Thread is running.\");\n    }\n}\n\nThread t1 = new Thread(new MyRunnable());\nt1.start();\n</code></pre> </li> </ol>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#synchronized-keyword","title":"<code>synchronized</code> Keyword","text":"<p>The <code>synchronized</code> keyword is used to create synchronized blocks or methods, ensuring that only one thread can execute that code at a time.</p> <pre><code>public synchronized void myMethod() {\n    // ... thread-safe code\n}\n</code></pre>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#jdbc-java-database-connectivity","title":"\u2705 JDBC (Java Database Connectivity)","text":"<p>JDBC is an API for connecting and executing queries on a database.</p>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#steps-to-connect-to-a-database","title":"Steps to Connect to a Database","text":"<ol> <li>Load the driver: <code>Class.forName(\"com.mysql.cj.jdbc.Driver\");</code></li> <li>Create a connection: <code>Connection con = DriverManager.getConnection(url, user, password);</code></li> <li>Create a statement: <code>Statement stmt = con.createStatement();</code></li> <li>Execute the query: <code>ResultSet rs = stmt.executeQuery(\"SELECT * FROM users\");</code></li> <li>Process the result set: <pre><code>while (rs.next()) {\n    System.out.println(rs.getInt(1) + \"  \" + rs.getString(2));\n}\n</code></pre></li> <li>Close the connection: <code>con.close();</code></li> </ol>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#build-dependency-management-maven","title":"\u2705 Build &amp; Dependency Management (Maven)","text":"<p>Maven is a powerful project management tool that is based on POM (Project Object Model). It is used for projects build, dependency and documentation.</p>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#pomxml-example","title":"<code>pom.xml</code> Example","text":"<p>This is the core of a Maven project.</p> <pre><code>&lt;project ...&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;\n    &lt;artifactId&gt;my-app&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- Selenium Dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n            &lt;version&gt;4.10.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!-- TestNG Dependency --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.testng&lt;/groupId&gt;\n            &lt;artifactId&gt;testng&lt;/artifactId&gt;\n            &lt;version&gt;7.7.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#common-maven-commands","title":"Common Maven Commands","text":"Command Description <code>mvn clean</code> Deletes the <code>target</code> directory (compiled code and build artifacts). <code>mvn compile</code> Compiles the source code of the project. <code>mvn test</code> Run the tests for the project. <code>mvn package</code> Takes the compiled code and packages it in its distributable format, such as a JAR. <code>mvn install</code> Installs the package into the local repository, for use as a dependency in other projects locally.","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use multithreading with test frameworks like TestNG to run your UI or API tests in parallel, significantly reducing execution time.</li> <li>Use JDBC to programmatically interact with your application's database to set up test data before a test run or to verify that data was correctly updated after a test.</li> <li>Master Maven or Gradle to manage your test automation project's dependencies and to integrate your tests into a CI/CD pipeline.</li> </ul>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/advanced-java-topics/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>advanced-java</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code>, <code>multithreading</code>, <code>jdbc</code>, <code>maven</code></p>","tags":["java","advanced-java","sdet","programming","core-java","multithreading","jdbc"]},{"location":"cheat-sheets/programming/java/collections-framework/","title":"\ud83d\udcd8 Java Collections Framework","text":"<p>The Java Collections Framework provides a set of interfaces and classes to store and manipulate groups of objects.</p>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#core-interfaces","title":"\ud83e\udde0 Core Interfaces","text":"Interface Description Common Implementations <code>List</code> An ordered collection that allows duplicate elements. <code>ArrayList</code>, <code>LinkedList</code> <code>Set</code> A collection that does not allow duplicate elements. <code>HashSet</code>, <code>LinkedHashSet</code>, <code>TreeSet</code> <code>Map</code> An object that maps keys to values. Does not allow duplicate keys. <code>HashMap</code>, <code>LinkedHashMap</code>, <code>TreeMap</code>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#list-interface","title":"\u2705 <code>List</code> Interface","text":"<p><code>ArrayList</code> is the most common implementation. It's a resizable array.</p>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#common-list-methods","title":"Common <code>List</code> Methods","text":"Method Description <code>add(E e)</code> Appends the specified element to the end of the list. <code>get(int index)</code> Returns the element at the specified position. <code>remove(int index)</code> Removes the element at the specified position. <code>size()</code> Returns the number of elements in the list. <code>isEmpty()</code> Returns <code>true</code> if the list contains no elements. <code>contains(Object o)</code> Returns <code>true</code> if the list contains the specified element. <pre><code>List&lt;String&gt; names = new ArrayList&lt;&gt;();\nnames.add(\"Alice\");\nnames.add(\"Bob\");\nSystem.out.println(names.get(0)); // \"Alice\"\n</code></pre>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#set-interface","title":"\u2705 <code>Set</code> Interface","text":"<p><code>HashSet</code> is the most common implementation. It makes no guarantees about the iteration order.</p>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#common-set-methods","title":"Common <code>Set</code> Methods","text":"Method Description <code>add(E e)</code> Adds the specified element to the set if it is not already present. <code>remove(Object o)</code> Removes the specified element from the set if it is present. <code>size()</code> Returns the number of elements in the set. <code>contains(Object o)</code> Returns <code>true</code> if the set contains the specified element. <pre><code>Set&lt;String&gt; uniqueNames = new HashSet&lt;&gt;();\nuniqueNames.add(\"Alice\");\nuniqueNames.add(\"Alice\"); // This will be ignored\nSystem.out.println(uniqueNames.size()); // 1\n</code></pre>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#map-interface","title":"\u2705 <code>Map</code> Interface","text":"<p><code>HashMap</code> is the most common implementation. It makes no guarantees about the iteration order.</p>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#common-map-methods","title":"Common <code>Map</code> Methods","text":"Method Description <code>put(K key, V value)</code> Associates the specified value with the specified key. <code>get(Object key)</code> Returns the value to which the specified key is mapped. <code>remove(Object key)</code> Removes the mapping for a key if it is present. <code>size()</code> Returns the number of key-value mappings. <code>containsKey(Object key)</code> Returns <code>true</code> if the map contains a mapping for the specified key. <code>keySet()</code> Returns a <code>Set</code> view of the keys contained in the map. <code>values()</code> Returns a <code>Collection</code> view of the values contained in the map. <pre><code>Map&lt;String, Integer&gt; scores = new HashMap&lt;&gt;();\nscores.put(\"Alice\", 95);\nscores.put(\"Bob\", 88);\nSystem.out.println(scores.get(\"Alice\")); // 95\n</code></pre>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use <code>List</code> to store a sequence of elements, like a list of web elements from a Selenium query.</li> <li>Use <code>Set</code> to ensure uniqueness, such as storing unique IDs from a test data set.</li> <li>Use <code>Map</code> to store key-value pairs, like configuration properties or API request parameters.</li> <li>Always use the interface (<code>List</code>, <code>Set</code>, <code>Map</code>) as the type for your variables to allow for easy changes in implementation.</li> </ul>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-framework/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>collections</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","collections","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/collections-summary/","title":"\ud83d\udcd8 Java Collections Framework: Quick Summary","text":"<p>This table provides a concise overview of the main interfaces and common implementations within the Java Collections Framework, highlighting their characteristics, typical usage, and relevance for SDETs.</p>","tags":["java","collections","sdet","programming","core-java","summary"]},{"location":"cheat-sheets/programming/java/collections-summary/#collections-overview","title":"\u2705 Collections Overview","text":"Collection Type Definition Key Characteristics Common Methods/Syntax SDET Use Case Example <code>List</code> Interface An ordered collection (sequence) of elements. - Ordered (elements have an index)- Allows duplicate elements- Can contain <code>null</code> values <code>add(E e)</code>, <code>get(int index)</code>, <code>set(int index, E e)</code>, <code>remove(int index)</code>, <code>size()</code>, <code>contains(Object o)</code> Storing ordered sequences of web elements, API response arrays, or test data rows. <code>List&lt;String&gt; names = new ArrayList&lt;&gt;();</code><code>names.add(\"Alice\");</code><code>names.add(\"Bob\");</code><code>names.get(0); // \"Alice\"</code> <code>ArrayList</code> Resizable array implementation of the <code>List</code> interface. - Best for random access (fast <code>get</code>)- Slower for insertions/deletions in the middle (requires shifting) Same as <code>List</code> Most common for storing <code>WebElement</code> lists from Selenium, or any data where frequent indexing is needed. <code>List&lt;WebElement&gt; elements = driver.findElements(By.tagName(\"div\"));</code> <code>LinkedList</code> Doubly-linked list implementation of the <code>List</code> interface. - Best for frequent insertions/deletions (fast <code>add</code>/<code>remove</code> in middle)- Slower for random access (<code>get</code> by index) Same as <code>List</code> Less common in typical test automation, but useful for implementing queues or stacks, or when frequent modifications at ends/middle are expected. <code>List&lt;String&gt; queue = new LinkedList&lt;&gt;();</code><code>queue.add(\"Task1\");</code><code>queue.remove(0);</code> <code>Set</code> Interface A collection that contains no duplicate elements. - Unordered (generally)- Does not allow duplicate elements- Can contain at most one <code>null</code> element <code>add(E e)</code>, <code>remove(Object o)</code>, <code>size()</code>, <code>contains(Object o)</code> Ensuring uniqueness of data (e.g., unique IDs from a database query, unique error messages from logs). <code>Set&lt;Integer&gt; uniqueIds = new HashSet&lt;&gt;();</code><code>uniqueIds.add(1);</code><code>uniqueIds.add(1); // Ignored</code><code>uniqueIds.size(); // 1</code> <code>HashSet</code> Hash table implementation of the <code>Set</code> interface. - No guaranteed order- Best performance (O(1) average) for basic operations Same as <code>Set</code> Most common for quick uniqueness checks and membership testing where order is not important. <code>Set&lt;String&gt; uniqueErrors = new HashSet&lt;&gt;();</code><code>uniqueErrors.add(\"Error A\");</code> <code>LinkedHashSet</code> Hash table and linked list implementation of the <code>Set</code> interface. - Maintains insertion order- Slightly slower than <code>HashSet</code> Same as <code>Set</code> When you need uniqueness AND want to preserve the order in which elements were added. <code>Set&lt;String&gt; orderedUniqueLogs = new LinkedHashSet&lt;&gt;();</code> <code>TreeSet</code> Tree structure implementation of the <code>Set</code> interface. - Stores elements in sorted (natural or custom) order- Slower performance (O(log n)) Same as <code>Set</code> When you need unique elements to be automatically sorted (e.g., sorting unique product names alphabetically). <code>Set&lt;String&gt; sortedNames = new TreeSet&lt;&gt;();</code> <code>Map</code> Interface An object that maps keys to values. - Stores key-value pairs- Keys must be unique- Values can be duplicated- Can contain at most one <code>null</code> key and multiple <code>null</code> values <code>put(K key, V value)</code>, <code>get(Object key)</code>, <code>remove(Object key)</code>, <code>size()</code>, <code>containsKey(Object key)</code>, <code>keySet()</code>, <code>values()</code>, <code>entrySet()</code> Storing configuration properties, API request/response data (JSON-like structures), test data sets (e.g., user credentials). <code>Map&lt;String, String&gt; config = new HashMap&lt;&gt;();</code><code>config.put(\"url\", \"http://example.com\");</code><code>config.get(\"url\"); // \"http://example.com\"</code> <code>HashMap</code> Hash table implementation of the <code>Map</code> interface. - No guaranteed order- Best performance (O(1) average) for basic operations Same as <code>Map</code> Most common for fast key-value lookups where order is not important. Ideal for parsing JSON responses. <code>Map&lt;String, Object&gt; apiResponse = new HashMap&lt;&gt;();</code> <code>LinkedHashMap</code> Hash table and linked list implementation of the <code>Map</code> interface. - Maintains insertion order- Slightly slower than <code>HashMap</code> Same as <code>Map</code> When you need to preserve the order of key-value pairs (e.g., processing ordered JSON fields). <code>Map&lt;String, String&gt; orderedParams = new LinkedHashMap&lt;&gt;();</code> <code>TreeMap</code> Red-black tree implementation of the <code>Map</code> interface. - Stores entries in sorted (natural or custom) order of keys- Slower performance (O(log n)) Same as <code>Map</code> When you need key-value pairs to be automatically sorted by key (e.g., storing test results by timestamp). <code>Map&lt;String, Long&gt; eventTimestamps = new TreeMap&lt;&gt;();</code>","tags":["java","collections","sdet","programming","core-java","summary"]},{"location":"cheat-sheets/programming/java/collections-summary/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>collections</code>, <code>list</code>, <code>set</code>, <code>map</code>, <code>arraylist</code>, <code>linkedlist</code>, <code>hashset</code>, <code>linkedhashset</code>, <code>treeset</code>, <code>hashmap</code>, <code>linkedhashmap</code>, <code>treemap</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code>, <code>summary</code></p>","tags":["java","collections","sdet","programming","core-java","summary"]},{"location":"cheat-sheets/programming/java/exception-handling/","title":"\ud83d\udcd8 Java Exception Handling","text":"<p>Exception handling is a mechanism to handle runtime errors such as <code>ClassNotFoundException</code>, <code>IOException</code>, <code>SQLException</code>, etc.</p>","tags":["java","exception-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/exception-handling/#core-concepts","title":"\ud83e\udde0 Core Concepts","text":"<ul> <li>Exception: An event that disrupts the normal flow of the program.</li> <li><code>try</code>: The block of code to be monitored for exceptions.</li> <li><code>catch</code>: The block of code that handles the exception.</li> <li><code>finally</code>: The block of code that is always executed, regardless of whether an exception is handled or not.</li> <li><code>throw</code>: Used to manually throw an exception.</li> <li><code>throws</code>: Used in a method signature to declare the exceptions that can be thrown by the method.</li> </ul>","tags":["java","exception-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/exception-handling/#try-catch-finally-block","title":"\u2705 <code>try-catch-finally</code> Block","text":"<pre><code>try {\n    // Code that may throw an exception\n    int result = 10 / 0;\n} catch (ArithmeticException e) {\n    // Handle the exception\n    System.out.println(\"Cannot divide by zero!\");\n} finally {\n    // This code will always be executed\n    System.out.println(\"Finally block executed.\");\n}\n</code></pre>","tags":["java","exception-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/exception-handling/#checked-vs-unchecked-exceptions","title":"\u2705 Checked vs. Unchecked Exceptions","text":"Type Description Examples Checked Exceptions Exceptions that are checked at compile-time. The compiler forces you to handle them using <code>try-catch</code> or declare them with <code>throws</code>. <code>IOException</code>, <code>SQLException</code>, <code>FileNotFoundException</code> Unchecked Exceptions Exceptions that are not checked at compile-time. They usually result from programming errors. <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code>, <code>ArithmeticException</code>","tags":["java","exception-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/exception-handling/#custom-exceptions","title":"\u2705 Custom Exceptions","text":"<p>You can create your own exceptions by extending the <code>Exception</code> class.</p> <pre><code>class InvalidTestDataException extends Exception {\n    public InvalidTestDataException(String message) {\n        super(message);\n    }\n}\n\npublic void processTestData(String data) throws InvalidTestDataException {\n    if (data == null || data.isEmpty()) {\n        throw new InvalidTestDataException(\"Test data cannot be null or empty.\");\n    }\n    // ...\n}\n</code></pre>","tags":["java","exception-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/exception-handling/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>In test automation, wrap code that interacts with external systems (e.g., web browsers, APIs) in <code>try-catch</code> blocks to handle unexpected failures gracefully.</li> <li>Use the <code>finally</code> block to ensure cleanup code (like closing a browser window with <code>driver.quit()</code>) is always executed, even if a test fails.</li> <li>Create custom exceptions to represent specific failures in your test framework, such as <code>ElementNotFoundException</code> or <code>InvalidCredentialsException</code>.</li> <li>Don't just catch an exception and ignore it. At a minimum, log the exception to help with debugging.</li> </ul>","tags":["java","exception-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/exception-handling/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>exception-handling</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","exception-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/","title":"\ud83d\udcd8 Java File I/O","text":"<p>Java provides a rich set of APIs to perform file input and output (I/O) operations.</p>","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#core-classes","title":"\ud83e\udde0 Core Classes","text":"Class Description <code>File</code> Represents a file or directory path. <code>FileReader</code> / <code>FileWriter</code> For reading/writing character files. <code>BufferedReader</code> / <code>BufferedWriter</code> Provides buffering for efficient reading/writing of characters. <code>FileInputStream</code> / <code>FileOutputStream</code> For reading/writing raw bytes from/to files. <code>java.nio.file.Files</code> A modern and powerful utility class for file operations (Java 7+).","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#reading-from-a-file","title":"\u2705 Reading from a File","text":"","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#using-bufferedreader-classic-io","title":"Using <code>BufferedReader</code> (Classic I/O)","text":"<pre><code>import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic void readFile(String filePath) {\n    try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#using-javaniofilefiles-modern-io","title":"Using <code>java.nio.file.Files</code> (Modern I/O)","text":"<pre><code>import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.io.IOException;\nimport java.util.List;\n\npublic void readFileModern(String filePath) {\n    try {\n        List&lt;String&gt; lines = Files.readAllLines(Paths.get(filePath));\n        for (String line : lines) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#writing-to-a-file","title":"\u2705 Writing to a File","text":"","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#using-bufferedwriter-classic-io","title":"Using <code>BufferedWriter</code> (Classic I/O)","text":"<pre><code>import java.io.BufferedWriter;\nimport java.io.FileWriter;\nimport java.io.IOException;\n\npublic void writeFile(String filePath, String content) {\n    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\n        writer.write(content);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#using-javaniofilefiles-modern-io_1","title":"Using <code>java.nio.file.Files</code> (Modern I/O)","text":"<pre><code>import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.io.IOException;\n\npublic void writeFileModern(String filePath, String content) {\n    try {\n        Files.write(Paths.get(filePath), content.getBytes());\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}\n</code></pre>","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use file I/O to read test data from CSV, JSON, or properties files.</li> <li>Write test results or logs to output files for reporting and analysis.</li> <li>The <code>java.nio.file.Files</code> class is generally recommended for new code as it is more powerful and provides better error handling.</li> <li>Always use a <code>try-with-resources</code> statement to ensure that your file streams are closed automatically.</li> </ul>","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/file-io/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>file-io</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","file-io","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/","title":"\ud83d\udcd8 Java 8 Features","text":"<p>Java 8 introduced several important features. The most significant are Lambda Expressions and the Stream API.</p>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#lambda-expressions","title":"\ud83e\udde0 Lambda Expressions","text":"<p>A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.</p>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#syntax","title":"Syntax","text":"<pre><code>(parameter1, parameter2) -&gt; expression\n</code></pre> <p>or</p> <pre><code>(parameter1, parameter2) -&gt; { code block }\n</code></pre>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#example","title":"Example","text":"<pre><code>// Before Java 8\nnew Thread(new Runnable() {\n    @Override\n    public void run() {\n        System.out.println(\"Hello from old thread!\");\n    }\n}).start();\n\n// With Lambda Expression\nnew Thread(() -&gt; System.out.println(\"Hello from new thread!\")).start();\n</code></pre>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#stream-api","title":"\u2705 Stream API","text":"<p>A stream is a sequence of elements from a source that supports aggregate operations.</p> <ul> <li>Source: A collection, an array, or an I/O resource.</li> <li>Intermediate Operations: Operations that return a new stream, such as <code>filter</code>, <code>map</code>, <code>sorted</code>.</li> <li>Terminal Operations: Operations that return a result or produce a side effect, such as <code>forEach</code>, <code>collect</code>, <code>reduce</code>.</li> </ul>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#example_1","title":"Example","text":"<pre><code>import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\nList&lt;String&gt; names = Arrays.asList(\"Alice\", \"Bob\", \"Charlie\", \"Anna\");\n\n// Filter names that start with \"A\", convert to uppercase, and collect to a new list\nList&lt;String&gt; result = names.stream()\n    .filter(name -&gt; name.startsWith(\"A\"))\n    .map(String::toUpperCase)\n    .collect(Collectors.toList());\n\nSystem.out.println(result); // [\"ALICE\", \"ANNA\"]\n</code></pre>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#common-stream-operations","title":"Common Stream Operations","text":"Operation Type Description <code>filter(Predicate&lt;T&gt; predicate)</code> Intermediate Returns a stream consisting of the elements that match the given predicate. <code>map(Function&lt;T, R&gt; mapper)</code> Intermediate Returns a stream consisting of the results of applying the given function to the elements. <code>sorted()</code> Intermediate Returns a stream consisting of the elements of this stream, sorted according to natural order. <code>forEach(Consumer&lt;T&gt; action)</code> Terminal Performs an action for each element of this stream. <code>collect(Collector&lt;T, A, R&gt; collector)</code> Terminal Performs a mutable reduction operation on the elements of this stream. <code>count()</code> Terminal Returns the count of elements in this stream. <code>anyMatch(Predicate&lt;T&gt; predicate)</code> Terminal Returns whether any elements of this stream match the provided predicate. <code>allMatch(Predicate&lt;T&gt; predicate)</code> Terminal Returns whether all elements of this stream match the provided predicate.","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use streams to process collections of web elements from Selenium. For example, you can easily filter for visible elements, extract their text, and store it in a list.</li> <li>Lambda expressions make your test code more concise and readable, especially when working with listeners or simple functional interfaces.</li> <li>The Stream API is great for data-driven testing, where you can filter and map your test data on the fly.</li> </ul>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-8-features/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>java8</code>, <code>streams</code>, <code>lambda</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","java8","streams","lambda","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/","title":"\ud83d\udcd8 Java Arrays","text":"<p>An array is a collection of similar types of elements that have a contiguous memory location. In Java, arrays are objects.</p>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#core-concepts","title":"\ud83e\udde0 Core Concepts","text":"<ul> <li>Fixed Size: Once an array is created, its size cannot be changed.</li> <li>Homogeneous: An array can only store elements of the same data type.</li> <li>Indexed: Elements are accessed using a zero-based index.</li> <li>Default Values: If an array is declared but not initialized, its elements will be assigned default values (e.g., <code>0</code> for <code>int</code>, <code>false</code> for <code>boolean</code>, <code>null</code> for objects).</li> </ul>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#declaration-and-initialization","title":"\u2705 Declaration and Initialization","text":"","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#1-declaring-an-array","title":"1. Declaring an Array","text":"<pre><code>// Method 1: Declare type then array name\ndataType[] arrayName;\n\n// Method 2: Declare array name then type (less common but valid)\ndataType arrayName[];\n\n// Examples:\nint[] numbers;\nString[] names;\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#2-creating-instantiating-an-array","title":"2. Creating (Instantiating) an Array","text":"<p>Arrays are objects, so they must be created using the <code>new</code> keyword.</p> <pre><code>// Syntax:\narrayName = new dataType[size];\n\n// Examples:\nnumbers = new int[5]; // An array of 5 integers\nnames = new String[3]; // An array of 3 Strings\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#3-initializing-an-array","title":"3. Initializing an Array","text":"","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#a-using-new-and-assigning-values-individually","title":"a) Using <code>new</code> and assigning values individually","text":"<pre><code>int[] numbers = new int[3];\nnumbers[0] = 10;\nnumbers[1] = 20;\nnumbers[2] = 30;\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#b-using-array-literal-declaration-creation-and-initialization-in-one-step","title":"b) Using array literal (declaration, creation, and initialization in one step)","text":"<pre><code>int[] numbers = {10, 20, 30, 40, 50};\nString[] browsers = {\"chrome\", \"firefox\", \"edge\"};\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#accessing-array-elements","title":"\u2705 Accessing Array Elements","text":"<p>Array elements are accessed using their index (0-based).</p> <pre><code>String[] fruits = {\"Apple\", \"Banana\", \"Cherry\"};\nSystem.out.println(fruits[0]); // Outputs: Apple\nSystem.out.println(fruits[1]); // Outputs: Banana\n\n// Modifying an element\nfruits[1] = \"Orange\";\nSystem.out.println(fruits[1]); // Outputs: Orange\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#array-length","title":"\u2705 Array Length","text":"<p>The <code>length</code> property returns the number of elements in an array.</p> <pre><code>int[] numbers = {1, 2, 3, 4, 5};\nSystem.out.println(numbers.length); // Outputs: 5\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#iterating-through-arrays","title":"\u2705 Iterating Through Arrays","text":"","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#1-using-a-for-loop","title":"1. Using a <code>for</code> loop","text":"<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (int i = 0; i &lt; cars.length; i++) {\n    System.out.println(cars[i]);\n}\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#2-using-an-enhanced-for-loop-for-each-loop","title":"2. Using an Enhanced <code>for</code> loop (for-each loop)","text":"<pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\", \"Mazda\"};\nfor (String car : cars) {\n    System.out.println(car);\n}\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#multidimensional-arrays","title":"\u2705 Multidimensional Arrays","text":"<p>Arrays of arrays. Useful for representing tables or matrices.</p> <pre><code>// Declare and initialize a 2D array (matrix)\nint[][] matrix = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };\n\n// Access elements\nSystem.out.println(matrix[0][0]); // Outputs: 1\nSystem.out.println(matrix[1][2]); // Outputs: 6\n\n// Iterate through a 2D array\nfor (int i = 0; i &lt; matrix.length; i++) {\n    for (int j = 0; j &lt; matrix[i].length; j++) {\n        System.out.print(matrix[i][j] + \" \");\n    }\n    System.out.println(); // New line for each row\n}\n</code></pre>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#javautilarrays-class","title":"\u2705 <code>java.util.Arrays</code> Class","text":"<p>Provides static methods for common array operations.</p> Method Description Example <code>toString(array)</code> Returns a string representation of the contents of the specified array. <code>int[] arr = {1, 2, 3}; Arrays.toString(arr); // \"[1, 2, 3]\"</code> <code>sort(array)</code> Sorts the specified array into ascending numerical order. <code>int[] arr = {5, 2, 8}; Arrays.sort(arr); // arr is now {2, 5, 8}</code> <code>copyOf(original, newLength)</code> Copies the specified array, truncating or padding with zeros (or nulls) if necessary. <code>int[] arr = {1, 2}; int[] newArr = Arrays.copyOf(arr, 4); // {1, 2, 0, 0}</code> <code>equals(array1, array2)</code> Returns <code>true</code> if the two specified arrays are deeply equal to one another. <code>Arrays.equals(arr1, arr2);</code>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use arrays to store a fixed number of test data elements (e.g., a list of URLs to test, a set of credentials).</li> <li>Multidimensional arrays can represent tabular test data, such as data read from an Excel sheet.</li> <li>The <code>Arrays.toString()</code> method is invaluable for debugging, allowing you to quickly print the contents of an array.</li> <li>When working with Selenium, <code>driver.findElements(By.locator)</code> returns a <code>List&lt;WebElement&gt;</code>, which is more flexible than a raw array, but understanding arrays is still fundamental.</li> </ul>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-arrays/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>arrays</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","arrays","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/","title":"\ud83d\udcd8 Java Basics","text":"<p>This cheat sheet provides a quick reference for the fundamental building blocks of the Java language.</p>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#data-types","title":"\ud83e\udde0 Data Types","text":"<p>Java has two categories of data types: Primitive and Reference.</p>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#primitive-data-types","title":"Primitive Data Types","text":"<p>These are the most basic data types.</p> Type Size Description Example <code>byte</code> 1 byte Stores whole numbers from -128 to 127 <code>byte b = 100;</code> <code>short</code> 2 bytes Stores whole numbers from -32,768 to 32,767 <code>short s = 5000;</code> <code>int</code> 4 bytes Stores whole numbers from -2,147,483,648 to 2,147,483,647 <code>int i = 100000;</code> <code>long</code> 8 bytes Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807 <code>long l = 15000000000L;</code> <code>float</code> 4 bytes Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits <code>float f = 5.75f;</code> <code>double</code> 8 bytes Stores fractional numbers. Sufficient for storing 15 decimal digits <code>double d = 19.99d;</code> <code>boolean</code> 1 bit Stores <code>true</code> or <code>false</code> values <code>boolean isJavaFun = true;</code> <code>char</code> 2 bytes Stores a single character/letter or ASCII values <code>char grade = 'A';</code>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#reference-data-types","title":"Reference Data Types","text":"<p>These refer to objects. The most common is <code>String</code>.</p> <ul> <li>String: Represents a sequence of characters. <code>String myString = \"Hello World\";</code></li> <li>Arrays: Used to store multiple values in a single variable. <code>int[] numbers = {1, 2, 3};</code></li> <li>Classes: User-defined blueprints for objects. <code>MyClass myObj = new MyClass();</code></li> </ul>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#variables","title":"\u2705 Variables","text":"<p>A variable is a container which holds the value while the Java program is executed.</p> <pre><code>// Declaring and initializing a variable\nString name = \"John\";\nint age = 30;\n</code></pre>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#operators","title":"\u2705 Operators","text":"Type Operators Description Arithmetic <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> (modulus) Used to perform common mathematical operations. Relational <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> Used to compare two values. Logical <code>&amp;&amp;</code> (AND), <code>||</code> (OR), <code>!</code> (NOT) Used to determine the logic between variables or values. Assignment <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code> Used to assign values to variables.","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#control-flow","title":"\u2705 Control Flow","text":"","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#conditional-statements","title":"Conditional Statements","text":"<ul> <li><code>if-else-if</code>: Executes different blocks of code based on multiple conditions.   <pre><code>int time = 22;\nif (time &lt; 10) {\n    System.out.println(\"Good morning.\");\n} else if (time &lt; 18) {\n    System.out.println(\"Good day.\");\n} else {\n    System.out.println(\"Good evening.\");\n}\n// Outputs \"Good evening.\"\n</code></pre></li> <li>Short Hand If (Ternary Operator): A shorthand for the <code>if-else</code> statement.   <pre><code>int score = 75;\nString result = (score &gt;= 60) ? \"Pass\" : \"Fail\";\nSystem.out.println(result); // Outputs \"Pass\"\n</code></pre></li> <li><code>switch</code>: Selects one of many code blocks to be executed.   <pre><code>int day = 4;\nswitch (day) {\n    case 1:\n        System.out.println(\"Monday\");\n        break;\n    case 2:\n        System.out.println(\"Tuesday\");\n        break;\n    case 3:\n        System.out.println(\"Wednesday\");\n        break;\n    case 4:\n        System.out.println(\"Thursday\");\n        break;\n    case 5:\n        System.out.println(\"Friday\");\n        break;\n    case 6:\n        System.out.println(\"Saturday\");\n        break;\n    case 7:\n        System.out.println(\"Sunday\");\n        break;\n    default:\n        System.out.println(\"Invalid day\");\n}\n// Outputs \"Thursday\"\n</code></pre></li> </ul>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#loop-statements","title":"Loop Statements","text":"<ul> <li><code>for</code> loop: Executes a block of code a specified number of times.   <pre><code>for (int i = 0; i &lt; 5; i++) {\n    System.out.println(i);\n}\n</code></pre></li> <li><code>while</code> loop: Loops through a block of code as long as a specified condition is true.   <pre><code>int i = 0;\nwhile (i &lt; 5) {\n    System.out.println(i);\n    i++;\n}\n</code></pre></li> <li>Enhanced <code>for</code> loop: Used to iterate through elements in an array or collection.   <pre><code>String[] cars = {\"Volvo\", \"BMW\", \"Ford\"};\nfor (String car : cars) {\n    System.out.println(car);\n}\n</code></pre></li> </ul>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#break-and-continue","title":"<code>break</code> and <code>continue</code>","text":"<ul> <li><code>break</code>: Used to jump out of a loop or a <code>switch</code> statement.   <pre><code>for (int i = 0; i &lt; 10; i++) {\n    if (i == 4) {\n        break; // Loop will terminate when i is 4\n    }\n    System.out.println(i);\n}\n// Outputs: 0, 1, 2, 3\n</code></pre></li> <li><code>continue</code>: Used to skip one iteration in a loop.   <pre><code>for (int i = 0; i &lt; 10; i++) {\n    if (i == 4) {\n        continue; // Skips the rest of the code for this iteration when i is 4\n    }\n    System.out.println(i);\n}\n// Outputs: 0, 1, 2, 3, 5, 6, 7, 8, 9\n</code></pre></li> </ul>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#methods","title":"\u2705 Methods","text":"<p>A method is a block of code which only runs when it is called. Methods are used to perform certain actions, and they are also known as functions.</p>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#defining-a-method","title":"Defining a Method","text":"<pre><code>public class MyClass {\n    // Method with no parameters and no return value\n    public void sayHello() {\n        System.out.println(\"Hello!\");\n    }\n\n    // Method with parameters and a return value\n    public int addNumbers(int a, int b) {\n        return a + b;\n    }\n\n    // Static method (belongs to the class, not an object)\n    public static void staticMethodExample() {\n        System.out.println(\"This is a static method.\");\n    }\n}\n</code></pre>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#calling-a-method","title":"Calling a Method","text":"<pre><code>public class Main {\n    public static void main(String[] args) {\n        MyClass obj = new MyClass(); // Create an object of MyClass\n        obj.sayHello(); // Call sayHello method\n\n        int sum = obj.addNumbers(5, 3); // Call addNumbers method and store result\n        System.out.println(\"Sum: \" + sum); // Outputs: Sum: 8\n\n        MyClass.staticMethodExample(); // Call static method directly using class name\n    }\n}\n</code></pre>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#method-parameters","title":"Method Parameters","text":"<p>Information can be passed to methods as parameters. Parameters act as variables inside the method.</p> <pre><code>public void displayMessage(String message) {\n    System.out.println(\"Message: \" + message);\n}\n\n// Calling:\n// obj.displayMessage(\"Welcome to Java!\");\n</code></pre>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#return-values","title":"Return Values","text":"<p>The <code>void</code> keyword indicates that the method should not return a value. If you want the method to return a value, you can use a primitive data type (like <code>int</code>, <code>char</code>, etc.) or a reference data type (like <code>String</code>, <code>Array</code>, etc.) instead of <code>void</code>, and use the <code>return</code> keyword inside the method.</p> <pre><code>public int multiply(int x, int y) {\n    return x * y;\n}\n\n// Calling:\n// int product = obj.multiply(4, 5);\n// System.out.println(product); // Outputs: 20\n</code></pre>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-basics/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>java-basics</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","java-basics","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-definitions/","title":"\ud83d\udcd8 Key Java Definitions","text":"<p>This cheat sheet provides clear definitions and code examples for core Java terms.</p>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#jdk-vs-jre-vs-jvm","title":"\u2705 JDK vs. JRE vs. JVM","text":"Acronym Stands For Description JVM Java Virtual Machine An abstract machine that provides the runtime environment in which Java bytecode can be executed. It is platform-dependent. JRE Java Runtime Environment A software package that contains what is required to run a Java program. It includes the JVM, libraries, and other supporting files. JDK Java Development Kit A software development kit required to develop Java applications. It includes the JRE, compilers, debuggers, and other development tools.","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#garbage-collection","title":"\u2705 Garbage Collection","text":"<p>Definition: Garbage Collection is the process of automatically freeing up memory that is no longer in use by a program. When an object is no longer referenced by any part of the program, the Java Virtual Machine's garbage collector reclaims the memory occupied by that object.</p> <p>Example: You don't explicitly free memory in Java; the garbage collector handles it.</p> <pre><code>public void myMethod() {\n    String s1 = new String(\"Hello\");\n    String s2 = new String(\"World\");\n    s1 = s2; // The original \"Hello\" string is now eligible for garbage collection\n}\n</code></pre>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#pojo-plain-old-java-object","title":"\u2705 POJO (Plain Old Java Object)","text":"<p>Definition: A POJO is a simple Java object that is not bound by any special restriction. It does not need to extend any particular class or implement any particular interface. It is used for increasing the readability and reusability of a program.</p> <p>Example:</p> <pre><code>public class Employee {\n    public String name;\n    public int id;\n}\n</code></pre>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#javabean","title":"\u2705 JavaBean","text":"<p>Definition: A JavaBean is a special type of POJO that follows certain conventions: 1.  It must implement the <code>Serializable</code> interface. 2.  It must have a public no-argument constructor. 3.  All its properties must be private, with public <code>getter</code> and <code>setter</code> methods.</p> <p>Example:</p> <pre><code>import java.io.Serializable;\n\npublic class EmployeeBean implements Serializable {\n    private String name;\n    private int id;\n\n    public EmployeeBean() { // No-arg constructor\n    }\n\n    public String getName() { // Getter\n        return name;\n    }\n\n    public void setName(String name) { // Setter\n        this.name = name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n}\n</code></pre>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#serialization","title":"\u2705 Serialization","text":"<p>Definition: Serialization is the process of converting an object's state into a byte stream, which can then be saved to a file, sent over a network, or stored in a database. The reverse process is called deserialization.</p> <p>Example:</p> <pre><code>import java.io.*;\n\n// EmployeeBean from the previous example must implement Serializable\n\n// Serialize\nFileOutputStream fos = new FileOutputStream(\"employee.ser\");\nObjectOutputStream oos = new ObjectOutputStream(fos);\noos.writeObject(new EmployeeBean());\noos.close();\n\n// Deserialize\nFileInputStream fis = new FileInputStream(\"employee.ser\");\nObjectInputStream ois = new ObjectInputStream(fis);\nEmployeeBean bean = (EmployeeBean) ois.readObject();\nois.close();\n</code></pre>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#reflection","title":"\u2705 Reflection","text":"<p>Definition: Reflection is an API that is used to examine or modify the behavior of methods, classes, and interfaces at runtime. It is a powerful feature, often used in test frameworks (e.g., JUnit, TestNG) to invoke test methods dynamically.</p> <p>Example:</p> <pre><code>import java.lang.reflect.Method;\n\nMyClass myObj = new MyClass();\nClass&lt;?&gt; clazz = myObj.getClass();\n\n// Get and invoke a method by its name\nMethod method = clazz.getMethod(\"myMethodName\");\nmethod.invoke(myObj);\n</code></pre>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#generics","title":"\u2705 Generics","text":"<p>Definition: Generics provide a way to create classes, interfaces, and methods that can work with different data types while providing compile-time type safety. This is heavily used in the Collections Framework.</p> <p>Example:</p> <pre><code>import java.util.ArrayList;\nimport java.util.List;\n\n// Using generics with a List\nList&lt;String&gt; myList = new ArrayList&lt;&gt;();\nmyList.add(\"Hello\");\n// myList.add(123); // This would cause a compile-time error\n\nString myString = myList.get(0);\n</code></pre>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-definitions/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>java-definitions</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code>, <code>interview-questions</code></p>","tags":["java","java-definitions","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/","title":"\ud83d\udcd8 Key Java Differences","text":"<p>This cheat sheet provides a quick reference for the key differences between important Java concepts.</p>","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#final-vs-finally-vs-finalize","title":"\u2705 <code>final</code> vs. <code>finally</code> vs. <code>finalize</code>","text":"Keyword Type Description <code>final</code> Keyword A modifier that can be applied to classes, methods, and variables. A <code>final</code> class cannot be subclassed, a <code>final</code> method cannot be overridden, and a <code>final</code> variable can only be initialized once. <code>finally</code> Block A block in a <code>try-catch</code> statement that is always executed, regardless of whether an exception is thrown or not. Used for cleanup code (e.g., closing resources). <code>finalize</code> Method A method that the Garbage Collector calls just before an object is garbage collected. It is not recommended for resource cleanup due to its unpredictable nature.","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#class-vs-object","title":"\u2705 <code>Class</code> vs. <code>Object</code>","text":"Concept Description Class A blueprint or template from which objects are created. It defines the properties (attributes) and behaviors (methods) that an object will have. Object An instance of a class. It is a self-contained entity that consists of both data and procedures to manipulate the data.","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#vs-equals","title":"\u2705 <code>==</code> vs. <code>.equals()</code>","text":"Operator/Method Description <code>==</code> Operator <code>.equals()</code> Method","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#string-vs-stringbuilder-vs-stringbuffer","title":"\u2705 <code>String</code> vs. <code>StringBuilder</code> vs. <code>StringBuffer</code>","text":"Class Mutability Thread-Safety Performance <code>String</code> Immutable Thread-safe Slower for frequent modifications because a new object is created for each change. <code>StringBuilder</code> Mutable Not thread-safe Faster than <code>StringBuffer</code> because it is not synchronized. Use for single-threaded environments. <code>StringBuffer</code> Mutable Thread-safe Slower than <code>StringBuilder</code> due to synchronization overhead. Use for multi-threaded environments.","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#arraylist-vs-linkedlist","title":"\u2705 <code>ArrayList</code> vs. <code>LinkedList</code>","text":"Class Underlying Data Structure Performance <code>ArrayList</code> Dynamic array Faster for retrieving elements by index (<code>get</code>). Slower for adding/removing elements from the middle of the list because it requires shifting elements. <code>LinkedList</code> Doubly-linked list Faster for adding/removing elements from the middle of the list. Slower for retrieving elements by index because it requires traversing the list.","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#hashmap-vs-hashset","title":"\u2705 <code>HashMap</code> vs. <code>HashSet</code>","text":"Class Description <code>HashMap</code> Implements the <code>Map</code> interface. Stores key-value pairs. Does not allow duplicate keys. <code>HashSet</code> Implements the <code>Set</code> interface. Stores unique elements. Internally, it uses a <code>HashMap</code> to store its elements.","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#abstract-class-vs-interface","title":"\u2705 <code>abstract class</code> vs. <code>interface</code>","text":"Feature <code>abstract class</code> <code>interface</code> Multiple Inheritance A class can extend only one abstract class. A class can implement multiple interfaces. Constructors Can have constructors. Cannot have constructors. Methods Can have both abstract (no body) and concrete (with body) methods. Before Java 8, could only have abstract methods. Since Java 8, can have <code>default</code> and <code>static</code> methods with bodies. Variables Can have instance variables (<code>final</code>, <code>non-final</code>, <code>static</code>, <code>non-static</code>). Variables are <code>public</code>, <code>static</code>, and <code>final</code> by default. Purpose To provide a base for subclasses to build upon and share common code. Represents an \"is-a\" relationship. To define a contract that implementing classes must adhere to. Represents a \"has-a\" capability.","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#throw-vs-throws","title":"\u2705 <code>throw</code> vs. <code>throws</code>","text":"Keyword Usage Description <code>throw</code> Inside a method Used to explicitly throw a single exception. <code>throws</code> In a method signature Used to declare the exceptions that a method might throw. It delegates the responsibility of handling the exception to the caller.","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-differences/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>java-differences</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code>, <code>interview-questions</code></p>","tags":["java","java-differences","sdet","programming","core-java","interview-questions"]},{"location":"cheat-sheets/programming/java/java-keywords/","title":"\ud83d\udcd8 Java Keywords","text":"<p>Java has a set of keywords that are reserved words that cannot be used as variables, methods, classes, or any other identifiers.</p>","tags":["java","java-keywords","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-keywords/#the-keywords","title":"\ud83e\udde0 The Keywords","text":"Keyword Description <code>abstract</code> A non-access modifier. Used for classes and methods: An abstract class cannot be used to create objects. An abstract method has no body and belongs to an abstract class. <code>assert</code> For debugging. Used for declaring an expected boolean condition in a program. <code>boolean</code> A data type that can only store <code>true</code> and <code>false</code> values. <code>break</code> Breaks out of a <code>switch</code> statement or a loop. <code>byte</code> A data type that can store whole numbers from -128 to 127. <code>case</code> Marks a block of code in <code>switch</code> statements. <code>catch</code> Catches exceptions generated by <code>try</code> statements. <code>char</code> A data type that is used to store a single character. <code>class</code> Used to declare a class. <code>const</code> Not used, but a reserved keyword. <code>continue</code> Continues to the next iteration in a loop. <code>default</code> Specifies the default block of code in a <code>switch</code> statement. <code>do</code> Used together with <code>while</code> to create a do-while loop. <code>double</code> A data type that can store fractional numbers from 1.7e\u2212308 to 1.7e+308. <code>else</code> Used in conditional statements. <code>enum</code> A special class that represents a group of constants. <code>extends</code> Extends a class (indicates that a class is inherited from another class). <code>final</code> A non-access modifier used for classes, attributes, and methods, making them non-changeable. <code>finally</code> Used with exceptions, a block of code that will be executed no matter if there is an exception or not. <code>float</code> A data type that can store fractional numbers from 3.4e\u2212038 to 3.4e+038. <code>for</code> Creates a for loop. <code>goto</code> Not used, but a reserved keyword. <code>if</code> Makes a conditional statement. <code>implements</code> Implements an interface. <code>import</code> Used to import a package, class, or interface. <code>instanceof</code> Checks whether an object is an instance of a specific class or an interface. <code>int</code> A data type that can store whole numbers from -2147483648 to 2147483647. <code>interface</code> Used to declare a special type of class that only contains abstract methods. <code>long</code> A data type that can store whole numbers from -9223372036854775808 to 9223372036854775807. <code>native</code> Specifies that a method is not implemented in the same Java source file, but in another language. <code>new</code> Creates new objects. <code>package</code> Declares a package. <code>private</code> An access modifier used for attributes, methods and constructors, making them only accessible within the declared class. <code>protected</code> An access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses. <code>public</code> An access modifier used for classes, attributes, methods and constructors, making them accessible by any other class. <code>return</code> Finished the execution of a method, and can be used to return a value from a method. <code>short</code> A data type that can store whole numbers from -32768 to 32767. <code>static</code> A non-access modifier used for methods and attributes. Static methods/attributes can be accessed without creating an object of a class. <code>strictfp</code> Restricts the precision and rounding of floating-point calculations. <code>super</code> Refers to superclass (parent) objects. <code>switch</code> Selects one of many code blocks to be executed. <code>synchronized</code> A non-access modifier, which specifies that methods can only be accessed by one thread at a time. <code>this</code> Refers to the current object in a method or constructor. <code>throw</code> Creates a custom error. <code>throws</code> Indicates what exceptions may be thrown by a method. <code>transient</code> A non-access modifier, which specifies that an attribute is not part of an object's persistent state. <code>try</code> Creates a try...catch statement. <code>void</code> Specifies that a method should not have a return value. <code>volatile</code> Indicates that an attribute may be changed by multiple threads. <code>while</code> Creates a while loop.","tags":["java","java-keywords","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/java-keywords/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>java-keywords</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","java-keywords","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/","title":"\ud83d\udcd8 Java OOP Concepts","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code.</p>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#core-concepts","title":"\ud83e\udde0 Core Concepts","text":"Concept Description Encapsulation The bundling of data (attributes) and methods that operate on the data into a single unit (a class). It restricts direct access to some of an object's components. Inheritance A mechanism in which one object acquires all the properties and behaviors of a parent object. It represents an \"is-a\" relationship. Polymorphism The ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object. Abstraction The concept of hiding the complex implementation details and showing only the essential features of the object.","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#encapsulation","title":"\u2705 Encapsulation","text":"<p>Achieved by declaring the instance variables of a class as <code>private</code> and providing public <code>getter</code> and <code>setter</code> methods to access and modify their values.</p> <pre><code>public class Car {\n    private String model;\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n}\n</code></pre>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#inheritance","title":"\u2705 Inheritance","text":"<p>Uses the <code>extends</code> keyword to inherit from a class.</p> <pre><code>// Parent class\nclass Vehicle {\n    public void start() {\n        System.out.println(\"Vehicle is starting...\");\n    }\n}\n\n// Child class\nclass Car extends Vehicle {\n    // Car inherits the start() method\n}\n\nCar myCar = new Car();\nmyCar.start(); // \"Vehicle is starting...\"\n</code></pre>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#polymorphism","title":"\u2705 Polymorphism","text":"<p>Can be achieved through method overriding and method overloading.</p>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#method-overriding","title":"Method Overriding","text":"<p>A child class provides a specific implementation of a method that is already provided by its parent class.</p> <pre><code>class Animal {\n    public void makeSound() {\n        System.out.println(\"Some generic sound\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    public void makeSound() {\n        System.out.println(\"Woof!\");\n    }\n}\n\nAnimal myDog = new Dog();\nmyDog.makeSound(); // \"Woof!\"\n</code></pre>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#method-overloading","title":"Method Overloading","text":"<p>Multiple methods having the same name but different in parameters.</p> <pre><code>class Calculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public double add(double a, double b) {\n        return a + b;\n    }\n}\n</code></pre>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Encapsulation is key to the Page Object Model (POM) design pattern, where web page elements are kept private and accessed via public methods.</li> <li>Inheritance is used to create base test classes with common setup (<code>@BeforeTest</code>) and teardown (<code>@AfterTest</code>) methods, which specific test classes can extend.</li> <li>Polymorphism allows you to write more flexible and reusable test code. For example, you could have a <code>WebDriver</code> reference that can hold a <code>ChromeDriver</code>, <code>FirefoxDriver</code>, or <code>SafariDriver</code> object.</li> </ul>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/oop-concepts/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>oop</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","oop","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/","title":"\ud83d\udcd8 Java String Handling","text":"<p>Java <code>String</code> is an immutable object, which means its state cannot be changed after it is created. This cheat sheet covers the most frequently used <code>String</code> methods and concepts.</p>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#core-concepts","title":"\ud83e\udde0 Core Concepts","text":"<ul> <li>Immutability: Once a <code>String</code> object is created, it cannot be altered. Methods that appear to modify a string actually return a new <code>String</code> object.</li> <li>String Pool: Java stores strings in a special memory area called the \"string constant pool.\" This helps in reusing strings and saving memory.</li> <li><code>String</code> vs <code>StringBuilder</code> vs <code>StringBuffer</code>:</li> <li><code>String</code>: Immutable.</li> <li><code>StringBuilder</code>: Mutable, not thread-safe. Use it for single-threaded string manipulation.</li> <li><code>StringBuffer</code>: Mutable and thread-safe. Use it in multi-threaded environments.</li> </ul>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#common-string-methods","title":"\u2705 Common String Methods","text":"","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#creating-strings","title":"Creating Strings","text":"Method/Constructor Description Example <code>String literal</code> The most common way to create a string. <code>String s = \"hello\";</code> <code>new String()</code> Creates a new string object in the heap. <code>String s = new String(\"hello\");</code>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#comparison","title":"Comparison","text":"Method Description Example <code>equals(Object anObject)</code> Compares this string to the specified object. <code>s1.equals(s2)</code> <code>equalsIgnoreCase(String anotherString)</code> Compares two strings, ignoring case. <code>s1.equalsIgnoreCase(s2)</code> <code>compareTo(String anotherString)</code> Compares two strings lexicographically. <code>s1.compareTo(s2)</code>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#searching","title":"Searching","text":"Method Description Example <code>indexOf(int ch)</code> Returns the index of the first occurrence of the character. <code>s.indexOf('a')</code> <code>lastIndexOf(int ch)</code> Returns the index of the last occurrence of the character. <code>s.lastIndexOf('a')</code> <code>contains(CharSequence s)</code> Returns <code>true</code> if the string contains the specified sequence. <code>s.contains(\"hello\")</code> <code>startsWith(String prefix)</code> Checks if the string starts with the specified prefix. <code>s.startsWith(\"He\")</code> <code>endsWith(String suffix)</code> Checks if the string ends with the specified suffix. <code>s.endsWith(\"lo\")</code>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#substrings","title":"Substrings","text":"Method Description Example <code>substring(int beginIndex)</code> Returns a new string that is a substring of this string. <code>s.substring(2)</code> <code>substring(int beginIndex, int endIndex)</code> Returns a substring from <code>beginIndex</code> to <code>endIndex-1</code>. <code>s.substring(0, 5)</code>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#manipulation","title":"Manipulation","text":"Method Description Example <code>concat(String str)</code> Concatenates the specified string to the end of this string. <code>s1.concat(s2)</code> <code>replace(char oldChar, char newChar)</code> Replaces all occurrences of <code>oldChar</code> with <code>newChar</code>. <code>s.replace('a', 'b')</code> <code>toLowerCase()</code> Converts the string to lower case. <code>s.toLowerCase()</code> <code>toUpperCase()</code> Converts the string to upper case. <code>s.toUpperCase()</code> <code>trim()</code> Removes leading and trailing whitespace. <code>s.trim()</code> <code>split(String regex)</code> Splits the string around matches of the given regex. <code>s.split(\",\")</code>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#other-useful-methods","title":"Other Useful Methods","text":"Method Description Example <code>length()</code> Returns the length of the string. <code>s.length()</code> <code>isEmpty()</code> Returns <code>true</code> if the length is 0. <code>s.isEmpty()</code> <code>charAt(int index)</code> Returns the character at the specified index. <code>s.charAt(0)</code> <code>toCharArray()</code> Converts the string to a new character array. <code>s.toCharArray()</code> <code>format(String format, Object... args)</code> Returns a formatted string using the specified format string and arguments. <code>String.format(\"Name: %s\", \"John\")</code>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#stringbuilder-and-stringbuffer","title":"\ud83e\uddf0 <code>StringBuilder</code> and <code>StringBuffer</code>","text":"<p>Use these when you need to perform a lot of string modifications.</p> <pre><code>// StringBuilder Example\nStringBuilder sb = new StringBuilder(\"Hello\");\nsb.append(\" World\");\nSystem.out.println(sb.toString()); // \"Hello World\"\n\n// StringBuffer Example\nStringBuffer sbf = new StringBuffer(\"Hello\");\nsbf.append(\" World\");\nSystem.out.println(sbf.toString()); // \"Hello World\"\n</code></pre>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#best-practices","title":"\ud83d\udccc Best Practices","text":"<ul> <li>Use string literals (<code>\"\"</code>) for creating strings unless you explicitly need a new object.</li> <li>Use <code>equals()</code> for content comparison, not <code>==</code>.</li> <li>Prefer <code>StringBuilder</code> for single-threaded string concatenation in loops.</li> <li>Use <code>String.format()</code> for creating formatted strings.</li> </ul>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#tips-for-sdets-and-qa-engineers","title":"\ud83d\udca1 Tips for SDETs and QA Engineers","text":"<ul> <li>String manipulation is crucial for parsing and validating test data, API responses, and log messages.</li> <li>Understand the difference between <code>null</code> and an empty string (<code>\"\"</code>).</li> <li>Be mindful of character encodings when dealing with strings from different sources.</li> </ul>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/java/string-handling/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>java</code>, <code>string-handling</code>, <code>sdet</code>, <code>programming</code>, <code>core-java</code></p>","tags":["java","string-handling","sdet","programming","core-java"]},{"location":"cheat-sheets/programming/python/python-advanced/","title":"\ud83d\udcd8 Advanced Python Topics for SDETs","text":"<p>This cheat sheet covers advanced topics that are highly beneficial for experienced SDETs.</p>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-advanced/#list-comprehensions","title":"\u2705 List Comprehensions","text":"<p>A concise way to create lists.</p> <pre><code># Traditional way\nsquares = []\nfor x in range(10):\n    squares.append(x**2)\n\n# List comprehension\nsquares = [x**2 for x in range(10)]\n\n# With a condition\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\n</code></pre>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-advanced/#dictionary-and-set-comprehensions","title":"\u2705 Dictionary and Set Comprehensions","text":"<p>Similar to list comprehensions, but for dictionaries and sets.</p> <pre><code># Dictionary comprehension\nsq_dict = {x: x**2 for x in range(5)}\n# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n# Set comprehension\nsq_set = {x**2 for x in range(5)}\n# {0, 1, 4, 9, 16}\n</code></pre>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-advanced/#decorators","title":"\u2705 Decorators","text":"<p>A decorator is a function that takes another function as an argument, adds some kind of functionality, and then returns another function.</p> <pre><code>def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_whee():\n    print(\"Whee!\")\n\nsay_whee()\n</code></pre>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-advanced/#generators","title":"\u2705 Generators","text":"<p>Generators are a simple way of creating iterators. They are written like regular functions but use the <code>yield</code> keyword to return data.</p> <pre><code>def my_generator():\n    for i in range(3):\n        yield i\n\ngen = my_generator()\nprint(next(gen)) # 0\nprint(next(gen)) # 1\nprint(next(gen)) # 2\n</code></pre>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-advanced/#args-and-kwargs","title":"\u2705 <code>*args</code> and <code>**kwargs</code>","text":"<p>Used to pass a variable number of arguments to a function.</p> <ul> <li><code>*args</code> is used to send a non-keyworded variable length argument list.</li> <li><code>**kwargs</code> allows you to pass keyworded variable length of arguments.</li> </ul> <pre><code>def my_func(*args, **kwargs):\n    for arg in args:\n        print(arg)\n    for key, value in kwargs.items():\n        print(f\"{key}: {value}\")\n\nmy_func(1, 2, 3, name=\"Alice\", age=30)\n</code></pre>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-advanced/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use list comprehensions to process lists of web elements from Selenium in a single, readable line.</li> <li>Decorators can be used to add logging, timing, or retry logic to your test functions.</li> <li>Generators are useful for creating large sequences of test data without storing them all in memory at once.</li> </ul>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-advanced/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-advanced</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code>, <code>comprehensions</code>, <code>decorators</code>, <code>generators</code></p>","tags":["python","python-advanced","sdet","programming","core-python","comprehensions","decorators"]},{"location":"cheat-sheets/programming/python/python-basics/","title":"\ud83d\udcd8 Python Basics","text":"<p>This cheat sheet provides a quick reference for the fundamental building blocks of the Python language.</p>","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#data-types","title":"\ud83e\udde0 Data Types","text":"<p>Python has several built-in data types.</p> Type Description Example <code>int</code> Integer numbers <code>x = 10</code> <code>float</code> Floating-point numbers <code>x = 20.5</code> <code>str</code> String (sequence of characters) <code>x = \"Hello\"</code> <code>bool</code> Boolean (<code>True</code> or <code>False</code>) <code>x = True</code> <code>list</code> Ordered, mutable collection <code>x = [\"apple\", \"banana\"]</code> <code>tuple</code> Ordered, immutable collection <code>x = (\"apple\", \"banana\")</code> <code>dict</code> Unordered, mutable collection of key-value pairs <code>x = {\"name\": \"John\", \"age\": 30}</code> <code>set</code> Unordered, mutable collection of unique elements <code>x = {\"apple\", \"banana\"}</code>","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#variables","title":"\u2705 Variables","text":"<p>A variable is created the moment you first assign a value to it.</p> <pre><code># Variable assignment\nname = \"John\"\nage = 30\n</code></pre>","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#operators","title":"\u2705 Operators","text":"Type Operators Description Arithmetic <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> (modulus), <code>**</code> (exponent), <code>//</code> (floor division) Used to perform common mathematical operations. Comparison <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> Used to compare two values. Logical <code>and</code>, <code>or</code>, <code>not</code> Used to combine conditional statements. Assignment <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code> Used to assign values to variables.","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#control-flow","title":"\u2705 Control Flow","text":"","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#conditional-statements","title":"Conditional Statements","text":"<ul> <li><code>if-elif-else</code>: Executes a block of code if a specified condition is true.   <pre><code>if age &gt; 18:\n    print(\"Adult\")\nelif age == 18:\n    print(\"Just an adult\")\nelse:\n    print(\"Minor\")\n</code></pre></li> </ul>","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#loop-statements","title":"Loop Statements","text":"<ul> <li><code>for</code> loop: Iterates over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).   <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n    print(fruit)\n</code></pre></li> <li><code>while</code> loop: Executes a set of statements as long as a condition is true.   <pre><code>i = 1\nwhile i &lt; 6:\n    print(i)\n    i += 1\n</code></pre></li> </ul>","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#functions","title":"\u2705 Functions","text":"<p>A function is a block of code which only runs when it is called.</p> <pre><code># Defining a function\ndef my_function():\n    print(\"Hello from a function\")\n\n# Calling a function\nmy_function()\n</code></pre>","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-basics/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-basics</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code></p>","tags":["python","python-basics","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-collections/","title":"\ud83d\udcd8 Python Collections","text":"<p>Python provides four main built-in collection data types.</p>","tags":["python","python-collections","list","tuple","set","dictionary","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-collections/#lists","title":"\u2705 Lists","text":"<p>Ordered, mutable (changeable) collections. Allow duplicate members.</p> <pre><code>my_list = [\"apple\", \"banana\", \"cherry\"]\n\n# Accessing items\nprint(my_list[1])  # \"banana\"\n\n# Changing items\nmy_list[1] = \"orange\"\n\n# Adding items\nmy_list.append(\"mango\")\n\n# Removing items\nmy_list.remove(\"apple\")\n\n# Length\nprint(len(my_list))\n</code></pre>","tags":["python","python-collections","list","tuple","set","dictionary","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-collections/#tuples","title":"\u2705 Tuples","text":"<p>Ordered, immutable (unchangeable) collections. Allow duplicate members.</p> <pre><code>my_tuple = (\"apple\", \"banana\", \"cherry\")\n\n# Accessing items\nprint(my_tuple[1])  # \"banana\"\n\n# Cannot change items\n# my_tuple[1] = \"orange\"  # This will raise a TypeError\n\n# Length\nprint(len(my_tuple))\n</code></pre>","tags":["python","python-collections","list","tuple","set","dictionary","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-collections/#sets","title":"\u2705 Sets","text":"<p>Unordered, mutable collections. Do not allow duplicate members.</p> <pre><code>my_set = {\"apple\", \"banana\", \"cherry\"}\n\n# Adding items\nmy_set.add(\"orange\")\n\n# Removing items\nmy_set.remove(\"banana\")\n\n# No duplicates\nmy_set.add(\"apple\")\nprint(my_set) # {'cherry', 'apple', 'orange'}\n\n# Length\nprint(len(my_set))\n</code></pre>","tags":["python","python-collections","list","tuple","set","dictionary","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-collections/#dictionaries","title":"\u2705 Dictionaries","text":"<p>Unordered, mutable collections of key-value pairs. Keys must be unique.</p> <pre><code>my_dict = {\n    \"brand\": \"Ford\",\n    \"model\": \"Mustang\",\n    \"year\": 1964\n}\n\n# Accessing items\nprint(my_dict[\"model\"])  # \"Mustang\"\nprint(my_dict.get(\"model\")) # \"Mustang\"\n\n# Changing items\nmy_dict[\"year\"] = 2020\n\n# Adding items\nmy_dict[\"color\"] = \"red\"\n\n# Removing items\ndel my_dict[\"year\"]\n# or\nmy_dict.pop(\"year\")\n\n# Length\nprint(len(my_dict))\n</code></pre>","tags":["python","python-collections","list","tuple","set","dictionary","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-collections/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use Lists to store a sequence of web elements returned by Selenium.</li> <li>Use Tuples for data that should not change, like configuration constants.</li> <li>Use Sets to find unique elements, for example, to verify that a filter on a UI returns unique results.</li> <li>Use Dictionaries to represent JSON objects from API responses or to store test data in a key-value format.</li> </ul>","tags":["python","python-collections","list","tuple","set","dictionary","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-collections/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-collections</code>, <code>list</code>, <code>tuple</code>, <code>set</code>, <code>dictionary</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code></p>","tags":["python","python-collections","list","tuple","set","dictionary","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-definitions/","title":"\ud83d\udcd8 Key Python Definitions","text":"<p>This cheat sheet provides clear definitions and code examples for core Python terms.</p>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-definitions/#gil-global-interpreter-lock","title":"\u2705 GIL (Global Interpreter Lock)","text":"<p>Definition: The GIL is a mutex that protects access to Python objects, preventing multiple threads from executing Python bytecode at the same time. This means that even on a multi-core processor, only one thread can be executing Python code at any given moment. The GIL simplifies memory management but is a performance bottleneck for CPU-bound multi-threaded programs.</p>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-definitions/#pep-8","title":"\u2705 PEP 8","text":"<p>Definition: PEP 8 is the official style guide for Python code. It provides conventions for writing readable and consistent Python code. Following PEP 8 is highly recommended.</p> <p>Example: - Use 4 spaces for indentation. - Limit lines to 79 characters. - Use snake_case for function and variable names.</p>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-definitions/#virtual-environment","title":"\u2705 Virtual Environment","text":"<p>Definition: A virtual environment is a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages. It allows you to work on a specific project without affecting other projects.</p> <p>Example:</p> <pre><code># Create a virtual environment\npython3 -m venv myenv\n\n# Activate it\nsource myenv/bin/activate\n</code></pre>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-definitions/#__pycache__","title":"\u2705 <code>__pycache__</code>","text":"<p>Definition: A directory that contains the <code>.pyc</code> files (compiled bytecode) for a Python module. When you run a Python program, the interpreter checks for a <code>__pycache__</code> directory and uses the <code>.pyc</code> files if they are up-to-date, which speeds up startup time.</p>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-definitions/#__name__-__main__","title":"\u2705 <code>__name__ == \"__main__\"</code>","text":"<p>Definition: A common idiom in Python scripts. The <code>__name__</code> variable is a special built-in variable which evaluates to the name of the current module. When a Python script is run directly, <code>__name__</code> is set to <code>\"__main__\"</code>. This allows you to write code that will only be executed when the file is run as a script, but not when it is imported as a module into another script.</p> <p>Example:</p> <pre><code>def main():\n    print(\"Running as a script\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-definitions/#duck-typing","title":"\u2705 Duck Typing","text":"<p>Definition: A concept related to dynamic typing, where the type or the class of an object is less important than the methods it defines. \"If it walks like a duck and it quacks like a duck, then it must be a duck.\" In Python, you don't need to check an object's type to know if it has a certain method.</p> <p>Example:</p> <pre><code>class Duck:\n    def quack(self):\n        print(\"Quack!\")\n\nclass Person:\n    def quack(self):\n        print(\"I'm quacking like a duck!\")\n\ndef make_it_quack(duck):\n    duck.quack()\n\nmake_it_quack(Duck())\nmake_it_quack(Person())\n</code></pre>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-definitions/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-definitions</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code>, <code>interview-questions</code></p>","tags":["python","python-definitions","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/","title":"\ud83d\udcd8 Key Python Differences","text":"<p>This cheat sheet provides a quick reference for the key differences between important Python concepts.</p>","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/#is-vs","title":"\u2705 <code>is</code> vs. <code>==</code>","text":"Operator Description <code>is</code> Compares the memory address (identity) of two objects. It checks if two references point to the same object. <code>==</code> Compares the content (value) of two objects.","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/#list-vs-tuple","title":"\u2705 List vs. Tuple","text":"Feature List Tuple Mutability Mutable (can be changed) Immutable (cannot be changed) Syntax <code>[1, 2, 3]</code> <code>(1, 2, 3)</code> Performance Slightly slower than tuples Slightly faster than lists Use Case For collections of items that may need to change For collections of items that should not change","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/#py-vs-pyc-files","title":"\u2705 <code>.py</code> vs. <code>.pyc</code> files","text":"Extension Description <code>.py</code> The source code file for a Python program. <code>.pyc</code> The compiled bytecode of a Python program. Python compiles <code>.py</code> files into <code>.pyc</code> files to speed up execution.","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/#range-vs-xrange-python-2","title":"\u2705 <code>range</code> vs. <code>xrange</code> (Python 2)","text":"Function Description <code>range</code> In Python 3, <code>range</code> is its own type that generates numbers on demand (like <code>xrange</code> in Python 2). In Python 2, <code>range</code> returns a list. <code>xrange</code> In Python 2, <code>xrange</code> returns a generator object that generates numbers on demand, which is more memory-efficient for large ranges. <code>xrange</code> does not exist in Python 3.","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/#__init__-vs-__new__","title":"\u2705 <code>__init__</code> vs. <code>__new__</code>","text":"Method Description <code>__new__</code> The first method to be called in object creation. It is responsible for creating and returning a new instance of the class. You rarely need to override this. <code>__init__</code> The initializer method for an object. It is called after <code>__new__</code> has created the object, and it is used to initialize the object's attributes.","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/#listsort-vs-sorted","title":"\u2705 <code>list.sort()</code> vs. <code>sorted()</code>","text":"Function/Method Description <code>list.sort()</code> A method of the <code>list</code> class that sorts the list in-place (modifies the original list) and returns <code>None</code>. <code>sorted()</code> A built-in function that returns a new sorted list from the items in an iterable, leaving the original iterable unchanged.","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-differences/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-differences</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code>, <code>interview-questions</code></p>","tags":["python","python-differences","sdet","programming","core-python","interview-questions"]},{"location":"cheat-sheets/programming/python/python-exceptions/","title":"\ud83d\udcd8 Python Exception Handling","text":"<p>Exception handling allows you to handle errors gracefully without crashing your program.</p>","tags":["python","python-exceptions","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-exceptions/#tryexcept-block","title":"\u2705 <code>try...except</code> Block","text":"<p>The <code>try</code> block lets you test a block of code for errors. The <code>except</code> block lets you handle the error.</p> <pre><code>try:\n    print(10 / 0)\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero!\")\n</code></pre>","tags":["python","python-exceptions","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-exceptions/#handling-multiple-exceptions","title":"\u2705 Handling Multiple Exceptions","text":"<p>You can define as many <code>except</code> blocks as you want.</p> <pre><code>try:\n    # ... some code\nexcept FileNotFoundError:\n    print(\"File not found.\")\nexcept (ValueError, TypeError):\n    print(\"A ValueError or TypeError occurred.\")\n</code></pre>","tags":["python","python-exceptions","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-exceptions/#else-and-finally","title":"\u2705 <code>else</code> and <code>finally</code>","text":"<ul> <li>The <code>else</code> block lets you execute code when there is no error.</li> <li>The <code>finally</code> block lets you execute code, regardless of the result of the try- and except blocks.</li> </ul> <pre><code>try:\n    result = 10 / 2\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero!\")\nelse:\n    print(f\"The result is {result}\")\nfinally:\n    print(\"Executing finally clause.\")\n</code></pre>","tags":["python","python-exceptions","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-exceptions/#raising-exceptions","title":"\u2705 Raising Exceptions","text":"<p>The <code>raise</code> keyword is used to raise an exception.</p> <pre><code>x = -1\n\nif x &lt; 0:\n    raise ValueError(\"Sorry, no numbers below zero\")\n</code></pre>","tags":["python","python-exceptions","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-exceptions/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>In Selenium, wrap your element-finding logic in a <code>try...except</code> block to handle <code>NoSuchElementException</code>.</li> <li>Use the <code>finally</code> block to ensure your browser instance (<code>driver.quit()</code>) is always closed, even if a test assertion fails.</li> <li>Create custom exceptions for your framework to represent specific testing errors, like <code>TestDataError</code>.</li> </ul>","tags":["python","python-exceptions","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-exceptions/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-exceptions</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code></p>","tags":["python","python-exceptions","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/","title":"\ud83d\udcd8 Python File I/O","text":"<p>Python has several functions for creating, reading, updating, and deleting files.</p>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#reading-from-a-file","title":"\u2705 Reading from a File","text":"<p>The <code>with</code> statement is the recommended way to handle file objects.</p>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#reading-the-whole-file","title":"Reading the Whole File","text":"<pre><code>with open(\"myfile.txt\", \"r\") as f:\n    content = f.read()\n    print(content)\n</code></pre>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#reading-line-by-line","title":"Reading Line by Line","text":"<pre><code>with open(\"myfile.txt\", \"r\") as f:\n    for line in f:\n        print(line, end='')\n</code></pre>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#writing-to-a-file","title":"\u2705 Writing to a File","text":"<ul> <li><code>\"w\"</code> (Write): Overwrites the entire file.</li> <li><code>\"a\"</code> (Append): Appends to the end of the file.</li> </ul>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#writing-a-string","title":"Writing a String","text":"<pre><code>with open(\"myfile.txt\", \"w\") as f:\n    f.write(\"Hello, World!\")\n</code></pre>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#writing-a-list-of-lines","title":"Writing a List of Lines","text":"<pre><code>lines = [\"Hello\\n\", \"World\\n\"]\nwith open(\"myfile.txt\", \"w\") as f:\n    f.writelines(lines)\n</code></pre>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#file-modes","title":"\u2705 File Modes","text":"Mode Description <code>\"r\"</code> Read - Default value. Opens a file for reading, error if the file does not exist. <code>\"a\"</code> Append - Opens a file for appending, creates the file if it does not exist. <code>\"w\"</code> Write - Opens a file for writing, creates the file if it does not exist. <code>\"x\"</code> Create - Creates the specified file, returns an error if the file exists. <code>\"t\"</code> Text - Default value. Text mode. <code>\"b\"</code> Binary - Binary mode (e.g., images).","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use file I/O to read test data from CSV or JSON files.</li> <li>The <code>json</code> module is excellent for working with JSON files:   <pre><code>import json\n\n# Writing JSON\nwith open('data.json', 'w') as f:\n    json.dump(my_dict, f)\n\n# Reading JSON\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n</code></pre></li> <li>The <code>csv</code> module is great for CSV files.</li> </ul>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-file-io/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-file-io</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code></p>","tags":["python","python-file-io","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-keywords/","title":"\ud83d\udcd8 Python Keywords","text":"<p>Python has a set of keywords that are reserved words that cannot be used as variables, methods, classes, or any other identifiers.</p>","tags":["python","python-keywords","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-keywords/#the-keywords","title":"\ud83e\udde0 The Keywords","text":"Keyword Description <code>False</code> A boolean value. <code>None</code> Represents a null value. <code>True</code> A boolean value. <code>and</code> A logical operator. <code>as</code> Used to create an alias. <code>assert</code> For debugging. <code>async</code> To create an async function. <code>await</code> To wait for an async function. <code>break</code> Breaks out of a loop. <code>class</code> To define a class. <code>continue</code> To continue to the next iteration of a loop. <code>def</code> To define a function. <code>del</code> To delete an object. <code>elif</code> Used in conditional statements, same as else if. <code>else</code> Used in conditional statements. <code>except</code> Used with exceptions, what to do when an exception occurs. <code>finally</code> Used with exceptions, a block of code that will be executed no matter if there is an exception or not. <code>for</code> To create a for loop. <code>from</code> To import specific parts of a module. <code>global</code> To declare a global variable. <code>if</code> To make a conditional statement. <code>import</code> To import a module. <code>in</code> To check if a value is present in a list, tuple, etc. <code>is</code> To test if two variables are the same object. <code>lambda</code> To create an anonymous function. <code>nonlocal</code> To declare a non-local variable. <code>not</code> A logical operator. <code>or</code> A logical operator. <code>pass</code> A null statement, a statement that will do nothing. <code>raise</code> To raise an exception. <code>return</code> To exit a function and return a value. <code>try</code> To make a try...except statement. <code>while</code> To create a while loop. <code>with</code> Used to simplify exception handling. <code>yield</code> To end a function, returns a generator.","tags":["python","python-keywords","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-keywords/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-keywords</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code></p>","tags":["python","python-keywords","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-oop/","title":"\ud83d\udcd8 Python OOP Concepts","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm that uses objects and classes in programming.</p>","tags":["python","python-oop","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-oop/#classes-and-objects","title":"\u2705 Classes and Objects","text":"<ul> <li>Class: A blueprint for creating objects.</li> <li>Object: An instance of a class.</li> </ul> <pre><code>class Dog:\n    # Class attribute\n    species = \"Canis familiaris\"\n\n    # Initializer / Instance attributes\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    # Instance method\n    def description(self):\n        return f\"{self.name} is {self.age} years old\"\n\n# Create an object (instance)\ndog1 = Dog(\"Buddy\", 5)\n\n# Access attributes and methods\nprint(dog1.name) # \"Buddy\"\nprint(dog1.description()) # \"Buddy is 5 years old\"\n</code></pre>","tags":["python","python-oop","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-oop/#inheritance","title":"\u2705 Inheritance","text":"<p>A class can inherit attributes and methods from another class.</p> <pre><code># Parent class\nclass Animal:\n    def speak(self):\n        return \"Some generic sound\"\n\n# Child class\nclass Cat(Animal):\n    def speak(self):\n        return \"Meow\"\n\nmy_cat = Cat()\nprint(my_cat.speak()) # \"Meow\"\n</code></pre>","tags":["python","python-oop","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-oop/#polymorphism","title":"\u2705 Polymorphism","text":"<p>Polymorphism means \"many forms\", and in programming it refers to methods/functions/operators with the same name that can be executed on many objects or classes.</p> <pre><code>class Dog:\n    def speak(self):\n        return \"Woof!\"\n\nclass Cat:\n    def speak(self):\n        return \"Meow!\"\n\n# Common interface\ndef animal_sound(animal):\n    print(animal.speak())\n\nanimal_sound(Dog())\n# Output: Woof!\nanimal_sound(Cat())\n# Output: Meow!\n</code></pre>","tags":["python","python-oop","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-oop/#encapsulation","title":"\u2705 Encapsulation","text":"<p>Encapsulation is the bundling of data and methods that work on that data within one unit, like a class. In Python, encapsulation is not strictly enforced (no <code>private</code> keyword), but is done by convention using a single underscore <code>_</code> for protected members and a double underscore <code>__</code> for private members (which triggers name mangling).</p> <pre><code>class Car:\n    def __init__(self):\n        self.__max_speed = 200 # Private variable\n\n    def drive(self):\n        print(f\"Driving at {self.__max_speed} km/h\")\n\nmy_car = Car()\nmy_car.drive() # \"Driving at 200 km/h\"\n# print(my_car.__max_speed) # This will raise an AttributeError\n</code></pre>","tags":["python","python-oop","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-oop/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Page Object Model (POM) is a classic application of OOP in test automation. Each page of the application is a class, and the elements on the page are attributes.</li> <li>Use inheritance to create a <code>BasePage</code> class with common functionalities (like clicking, sending text) that all other page classes can inherit from.</li> <li>Polymorphism can be used to create a single test that can run against different browser drivers (e.g., Chrome, Firefox).</li> </ul>","tags":["python","python-oop","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-oop/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-oop</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code></p>","tags":["python","python-oop","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/","title":"\ud83d\udcd8 Python Strings","text":"<p>Strings in Python are immutable sequences of Unicode characters.</p>","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/#string-creation-and-formatting","title":"\ud83e\udde0 String Creation and Formatting","text":"","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/#creating-strings","title":"Creating Strings","text":"<pre><code>s1 = 'Hello'\ns2 = \"World\"\ns3 = \"\"\"This is a\nmultiline string.\"\"\"\n</code></pre>","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/#f-strings-formatted-string-literals","title":"f-Strings (Formatted String Literals)","text":"<p>The most common and convenient way to format strings.</p> <pre><code>name = \"Alice\"\nage = 30\nprint(f\"My name is {name} and I am {age} years old.\")\n# Output: My name is Alice and I am 30 years old.\n</code></pre>","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/#common-string-methods","title":"\u2705 Common String Methods","text":"Method Description Example <code>strip()</code> Removes leading/trailing whitespace. <code>\"  hello  \".strip()</code> -&gt; <code>\"hello\"</code> <code>lower()</code> Converts the string to lowercase. <code>\"Hello\".lower()</code> -&gt; <code>\"hello\"</code> <code>upper()</code> Converts the string to uppercase. <code>\"Hello\".upper()</code> -&gt; <code>\"HELLO\"</code> <code>replace(old, new)</code> Replaces a specified substring with another. <code>\"hello\".replace(\"l\", \"p\")</code> -&gt; <code>\"heppo\"</code> <code>split(separator)</code> Splits the string into a list of substrings. <code>\"a,b,c\".split(\",\")</code> -&gt; <code>['a', 'b', 'c']</code> <code>join(iterable)</code> Joins the elements of an iterable into a single string. <code>\",\".join(['a', 'b', 'c'])</code> -&gt; <code>\"a,b,c\"</code> <code>startswith(prefix)</code> Returns <code>True</code> if the string starts with the specified prefix. <code>\"hello\".startswith(\"he\")</code> -&gt; <code>True</code> <code>endswith(suffix)</code> Returns <code>True</code> if the string ends with the specified suffix. <code>\"hello\".endswith(\"lo\")</code> -&gt; <code>True</code> <code>find(substring)</code> Returns the lowest index of the substring. Returns -1 if not found. <code>\"hello\".find(\"l\")</code> -&gt; <code>2</code> <code>count(substring)</code> Returns the number of non-overlapping occurrences of a substring. <code>\"hello\".count(\"l\")</code> -&gt; <code>2</code>","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/#slicing","title":"\u2705 Slicing","text":"<p>You can return a range of characters by using the slice syntax.</p> <pre><code>s = \"Hello, World!\"\n\nprint(s[2:5])    # \"llo\"\nprint(s[:5])     # \"Hello\"\nprint(s[7:])     # \"World!\"\nprint(s[-5:-2])  # \"orl\"\n</code></pre>","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/#tips-for-sdets","title":"\ud83d\udca1 Tips for SDETs","text":"<ul> <li>Use f-strings for building dynamic locators in Selenium or for creating formatted log messages.</li> <li>The <code>strip()</code> method is very useful for cleaning up text extracted from web elements.</li> <li><code>split()</code> is essential for parsing data from CSV files or other delimited text.</li> </ul>","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/programming/python/python-strings/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>python-strings</code>, <code>sdet</code>, <code>programming</code>, <code>core-python</code></p>","tags":["python","python-strings","sdet","programming","core-python"]},{"location":"cheat-sheets/testing/automation/selenium-difference/","title":"['Comparison Title Placeholder']","text":"","tags":[]},{"location":"cheat-sheets/testing/automation/selenium-difference/#topic-1-vs-topic-2-placeholder","title":"[Topic 1 vs Topic 2 Placeholder]","text":"","tags":[]},{"location":"cheat-sheets/testing/automation/selenium-difference/#key-differences","title":"Key Differences","text":"Feature/Aspect Topic 1 Syntax/Behavior Topic 2 Syntax/Behavior [Feature Placeholder] [Topic 1 Example Placeholder] [Topic 2 Example Placeholder] [Feature Placeholder] [Topic 1 Example Placeholder] [Topic 2 Example Placeholder] <p>{.show-header .left-text}</p>","tags":[]},{"location":"cheat-sheets/testing/automation/selenium-difference/#code-examples","title":"Code Examples","text":"","tags":[]},{"location":"cheat-sheets/testing/automation/selenium-difference/#topic-1-example","title":"Topic 1 Example","text":"<p>```[language Placeholder] // [Code Placeholder for Topic 1] <pre><code>#### Topic 2 Example\n\n```[language Placeholder]\n// [Code Placeholder for Topic 2]\n</code></pre></p>","tags":[]},{"location":"cheat-sheets/testing/automation/selenium-difference/#summary","title":"Summary","text":"Aspect Topic 1 Advantage/Disadvantage Topic 2 Advantage/Disadvantage [Aspect Placeholder] [Advantage/Disadvantage] [Advantage/Disadvantage] [Aspect Placeholder] [Advantage/Disadvantage] [Advantage/Disadvantage] <p>{.show-header .left-text}</p>","tags":[]},{"location":"cheat-sheets/testing/automation/selenium-files/","title":"Selenium","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#file-uploads-in-selenium","title":"File uploads in Selenium","text":"<p>There are three ways to upload file in selenium</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#sendkeys-method","title":"sendKeys() method","text":"<pre><code>driver.findElement(By.id(\"upload\")).sendKeys(\"path/to/the/file.txt\");\ndriver.findElement(By.id(\"file-submit\")).submit();\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#robot-class","title":"Robot Class","text":"<pre><code>import java.awt.Robot;\nimport java.awt.Toolkit;\nimport java.awt.datatransfer.StringSelection;\nimport java.awt.event.KeyEvent;\n\n// Find the \"Choose File\" button element on the webpage\nWebElement chooseFile = driver.findElement(By.xpath(\"//input[@id='uploadFile']\"));\n// Use Actions class to move to the \"Choose File\" button and click on it\nActions ac = new Actions(driver);\nac.click(chooseFile).perform();\n\n// Initialize the Robot class\nRobot rb = new Robot();\n\n// Wait for 2 seconds to ensure the file dialog is open\nrb.delay(2000);\n\n// Copy the file path to the clipboard\nStringSelection ss = new StringSelection(\"&lt;path of the file to be uploaded&gt;\");\nToolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);\nrb.delay(1000);\n\n// Simulate pressing CTRL + V to paste the copied file path\nrb.keyPress(KeyEvent.VK_CONTROL);\nrb.keyPress(KeyEvent.VK_V);\nrb.keyRelease(KeyEvent.VK_CONTROL);\nrb.keyRelease(KeyEvent.VK_V);\n\n// Simulate pressing ENTER to confirm the file selections\nrb.keyPress(KeyEvent.VK_ENTER);\nrb.keyRelease(KeyEvent.VK_ENTER);\nThread.sleep(2000);\nList&lt;WebElement&gt; uploadedPath= driver.findElements(By.cssSelector(\"p#uploadedFilePath\"));\n\nif(uploadedPath.size()&gt;0) {\n   System.out.println(\"File Uploaded successfully\");\n}\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#autoit","title":"AutoIT","text":"<p>AutoIt is a third-party freeware scripting tool designed to automate Windows GUI interactions such as native file dialogs and popups. It can be integrated with Selenium to handle tasks outside the browser, using keystrokes, mouse actions, and window controls, actions that Selenium alone cannot perform.</p> <pre><code>// Use Actions class to move to the \"Choose File\" button and click on it\nActions ac = new Actions(driver);\nac.click(chooseFile).perform();\nThread.sleep(2000);\nRuntime.getRuntime().exec(\"D:\\\\Auto IT\\\\FileUpload.exe\");                           \nThread.sleep(2000);\nList&lt;WebElement&gt; uploadedPath= driver.findElements(By.cssSelector(\"p#uploadedFilePath\"));\nif(uploadedPath.size()&gt;0) {\n    System.out.println(\"File Uploaded successfully\");\n}\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#read-files","title":"Read Files","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#read-data-from-excel","title":"Read data from excel","text":"<p> \u2192 workbook &gt; worksheet &gt; row &gt; cell \u2192 Index starts with 0 \u2192 e.g. row 1 cell 1 has the index of row 0 cell 0 <ol> <li>Store file path in a string ```shell script String path = \"resources/Capitals.xlsx\";     OR  File file = new File(\u201cresources/Capitals.xlsx\u201d); <pre><code>2. Open the file\n```shell script\nFileInputStream fileInputStream = new FileInputStream(path);\n</code></pre></li> <li>Open the workbook using fileinputstream ```shell script Workbook workbook = WorkbookFactory.create(fileInputStream); <pre><code>4. Open the first worksheet\n```shell script\nSheet sheet1 = workbook.getSheet(\"Sheet1\");\n    OR \nworkbook.getSheetAt(0); //ALTERNATIVE\n</code></pre></li> <li>Go to first row ```shell script Row row1 = sheet1.getRow(0); <pre><code>6. Go to first cell on that first row and print\n```shell script\nCell cell1 = row1.getCell(0);\n</code></pre></li> </ol>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#using-buffered-reader","title":"Using Buffered Reader","text":"<pre><code>FileReader reader = new FileReader(\"MyFile.txt\");\nBufferedReader bufferedReader = new BufferedReader(reader);\nString line;\nwhile ((line = bufferedReader.readLine()) != null){\n    System.out.println(line); \n}\nreader.close();\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#using-fis","title":"Using FIS","text":"<pre><code>import java.io.FileInputStream;\n\n\nFileInputStream inputStream = new FileInputStream(\"MyFile.txt\");\nInputStreamReader reader = new InputStreamReader(inputStream, \"UTF-16\");\nint character; \nwhile ((character = reader.read()) != -1){ \n    System.out.print((char) character); \n}\nreader.close();\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#file-reader","title":"File Reader","text":"<pre><code>FileReader reader = new FileReader(\"MyFile.txt\");\nint character;\nwhile ((character = reader.read()) != -1)\n{ System.out.print((char) character); }\nreader.close();\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#csv-file-read","title":"CSV File Read","text":"<pre><code>import au.com.bytecode.opencsv.CSVReader;\n\n\nString path = \"filePath.csv\";\nReader reader = new FileReader(path);\nCSVReader csvreader = new CSVReader(reader);\nList&lt;String[]&gt; data = csvreader.readAll();\nfor(String[] d : data){\n    for(String c : d ){\n        System.out.println(c); \n    }\n}\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-files/#java-based","title":"Java based","text":"<p>We can't test desktop applications with Selenium. But we can use JAVA</p> <p>System.getProperty(\"user.dir\"); =&gt;gives the path of the current folder</p> <p>System.getProperty(\"user.home\"); =&gt;gives you the user folder</p> <p>Files.exists(Paths.get(\"path of the file\")); =&gt;Checks if a file path exists on your computer or not</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/","title":"Selenium-jsExecutor","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#introduction","title":"Introduction","text":"<p>JS Executor is a interface provided by the selenium to help execute js commands.</p> <p>It provides two methods to interact with WebElements</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#executescript","title":"executeScript()","text":"<p>This method executes JavaScript in the context of the currently selected window or frame in Selenium The script runs as an anonymous function and the script can return values. Data types returned are: - WebElement - List - String - Long - Boolean</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#executeasyncscript","title":"executeAsyncScript()","text":"<p>This is method executes an asynchronous snippet of JavaScript in the context of the currently selected window or frame in Selenium.</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#why-need","title":"Why need?","text":"<p>In some cases the normal operations like sendkeys, click etc may not work directly.</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#template","title":"Template","text":"<pre><code>import org.openqa.selenium.JavascriptExecutor;\nJavascriptExecutor js = (JavascriptExecutor) driver;\njs.executeScript\u200b(java.lang.String script, java.lang.Object... args)\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#examples","title":"Examples","text":"<pre><code>JavascriptExecutor js = (JavascriptExecutor) driver;\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#refresh-window","title":"Refresh window","text":"<pre><code>js.executeScript(\u201clocation.reload()\u201d);\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#send-text","title":"Send text","text":"<pre><code>js.executeScript(\u201cdocument.getElementByID(\u2018element id \u2019).value = \u2018xyz\u2019;\u201d);\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#click-on-button","title":"Click on button","text":"<pre><code>js.executeScript(\"arguments[0].click();\", button);\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#generate-alert-pop-up","title":"Generate alert pop up","text":"<pre><code>js.executeScript(\"alert('hello world');\");\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium-jsExecutor/#vertical-scroll-up","title":"Vertical scroll up","text":"<pre><code>js.executeScript(\"window.scrollBy(0,150)\");\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/","title":"Selenium","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#getting-started","title":"\ud83d\ude80 Getting Started","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#initialize-browser-drivers","title":"\ud83c\udf10 Initialize Browser Drivers","text":"Browser Syntax <code>Chrome</code> WebDriver driver = new ChromeDriver(); <code>Edge</code> WebDriver driver = new EdgeDriver(); <code>Firefox</code> WebDriver driver = new FirefoxDriver(); <code>Safari</code> WebDriver driver = new SafariDriver(); <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#selenium-find-elements","title":"\ud83d\udd0d Selenium find elements","text":"<pre><code>//To fetch one element\ndriver.findElement(By.name (\u201ckey\u201d));\n\n//To fetch multiple elements\ndriver.findElements(By.name (\u201ckey\u201d));\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#selenium-locators","title":"\ud83e\udded Selenium Locators","text":"Locator Syntax <code>className</code> driver.findElement(By.className (\u201ckey\u201d)) <code>cssSelector</code> driver.findElement(By.cssSelector(key\")) <code>id</code> driver.findElement(By.id(key\")) <code>linkText</code> driver.findElement(By.linkText(key\")) <code>name</code> driver.findElement(By.name(\u201ckey\u201d)) <code>partialLinkText</code> driver.findElement(By.partialLinkText(\u201ckey\u201d)) <code>tagName</code> driver.findElement(By.tagName (\u201ckey\u201d)) <code>xpath</code> driver.findElement(By.xpath(\u201ckey\u201d)) <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#operations","title":"\u2699\ufe0f Operations","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#navigate-to-url","title":"\ud83c\udf10 Navigate to URL","text":"<pre><code>driver.get(\"https://www.example.com\");\n        or\ndriver.navigate().to(\"https://www.newsite.com\");\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#basic-selenium-actions","title":"\ud83d\uddb1\ufe0f Basic Selenium Actions","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#element-level","title":"\ud83e\udde9 Element Level","text":"<pre><code>WebElement element = driver.findElement(By.id(\"abc\"));\n</code></pre> Description Syntax ReturnType <code>Enter Input</code> element.sendKeys(\"text\"); void <code>Click on element</code> element.click(); void <code>Clear Text</code> element.clear(); void <code>Submit in form</code> element.submit(); void <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#get-keywords","title":"\ud83d\udd11 Get keywords","text":"Description Syntax ReturnType <code>Get Text</code> element.getText(); String <code>Get tag name</code> element.getTagName(); String <code>Get Width and Height of element</code> element.getSize(); Dimension <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#validation","title":"\u2705 Validation","text":"Description Syntax ReturnType <code>Element Displayed ?</code> element.isDisplayed(); boolean <code>Element Enabled ?</code> element.isEnabled(); boolean <code>Element Selected ?</code> element.isSelected(); boolean <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#navigation","title":"\ud83d\udd04 Navigation","text":"Description Syntax <code>Navigate to a new URL</code> driver.navigate().to(\"https://www.newsite.com\"); <code>Go forward to the next page</code> driver.navigate().forward(); <code>Go back to the previous page</code> driver.navigate().back(); <code>Refresh the current page</code> driver.navigate().refresh(); <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#drop-down-handling","title":"\u2b07\ufe0f Drop Down Handling","text":"<pre><code>WebElement day=driver.findElement(By.id(\"days\"));\nSelect selectDay = new Select(day);\n</code></pre> <pre><code>// Select By index\nselectDay.selectByIndex(0);\n\n// Select By value\nselectDay.selectByValue(\"value\");\n\n// Select By visible text\nselectDay.selectByVisibleText(\"text\");\n\n// Select By partial visible text\nselectDay.selectByContainsVisibleText(\"partial text\");\n\n// Fetch all the options\nList&lt;WebElement&gt; opts = selectDay.getOptions();\n\n// Deselect all options\nselectDay.deselectAll();\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#iframe-handling","title":"\ud83d\uddbc\ufe0f iFrame Handling","text":"Description Syntax <code>Switch to a frame by index</code> driver.switchTo().frame(\"frameIndex\"); <code>Switch to a frame by frame ID or name</code> driver.switchTo().frame(\"frameId or name\"); <code>Switch to a frame by webelement</code> WebElement eleframe = driver.findElement(By.xpath(\"//frame[@name='val']\")); driver.switchTo().frame(eleframe); <code>Switch back to the parent frame content</code> driver.switchTo().parentFrame(); <code>Switch back to the main frame</code> driver.switchTo().defaultContent(); <code>To fetch number of frames</code> driver.findElements(By.tagName(\"iframe\")); <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#window-handling","title":"\ud83e\ude9f Window Handling","text":"","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#basic-window-operations","title":"\ud83d\udda5\ufe0f Basic Window Operations","text":"Description Syntax <code>Set window position</code> driver.manage().window().setPosition(new Point(0, 0)); <code>Maximize window</code> driver.manage().window().maximize(); <code>Minimize windowt</code> driver.manage().window().minimize(); <code>Fullscreen</code> driver.manage().window().fullscreen(); <code>Close the current browser window</code> driver.close(); <code>Close all browser windows</code> driver.quit(); <p>{.show-header .left-text}</p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#advanced-operations-on-windows","title":"\ud83d\udd04 Advanced operations on windows","text":"<pre><code>// Get the current window handle\nString window1Handle = driver.getWindowHandle();\n\n// Get all window handles\nSet&lt;String&gt; allWindowHandles = driver.getWindowHandles();\n\n// Switch to a specific window\nfor (String eachHandle : allWindowHandles){\n  if (!eachHandle.equals(window1Handle)){\n    driver.switchTo().window(eachHandle);\n  }\n}\n\nor \n\nString windowHandle = driver.getWindowHandle(); \ndriver.switchTo().window(windowHandle);\n\n// Switch to newly created window\ndriver.switchTo().newWindow(WindowType.TAB);\ndriver.switchTo().newWindow(WindowType.WINDOW);\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#take-screenshot","title":"\ud83d\udcf8 Take screenshot","text":"<pre><code>import org.apache.commons.io.FileUtils;\nFile scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);\nFileUtils.copyFile(scrFile, new File(\"./image.png\"));\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#alertspop-ups","title":"\u26a0\ufe0f Alerts/Pop-Ups","text":"<pre><code>Alert alert = driver.switchTo().alert();\n\n// Used to click on the \u2018OK\u2019 button of the alert.\nalert.accept();\n\n// Used when the \u2018Cancel\u2019 button is clicked in the alert box.\nalert.dismiss();\n\n// Used to send text to an alert\nalert.sendKeys(\"text\");\n\n// Used to capture the alert message.\nalert().getText();\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#mouse-and-keyboard-actions","title":"\ud83d\uddb1\ufe0f Mouse and Keyboard Actions","text":"<pre><code>Actions actions = new Actions(driver);\n\n// Shifts the mouse pointer to the center of the element and click on it\nactions.moveToElement(element).click().build().perform();\n\n// Performs double click on the element\nactions.doubleClick(element).perform();\n\n// Drags the element from one point and drops to another\nactions.dragAndDrop(source, target).perform();\n\n// Sends a series of keys to the element\nactions.sendKeys(element, \"text\").perform();\n\n// Press arrow down key\nactions.sendKeys(Keys.ARROW_DOWN).build().perform();\n\n// Press page up key\nactions.sendKeys(Keys.PAGE_UP).build().perform();\n\n// Perform multiple actions\nactions.sendKeys(Keys.ARROW_LEFT).sendKeys(Keys.PAGE_DOWN).build().perform();\n\n'''\nbuild() is optional whereas perform() is mandatory.\n'''\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#page-information","title":"\ud83d\udcc4 Page Information","text":"<pre><code>// Get the page title\ndriver.getTitle();\n\n// Get the current page URL\ndriver.getCurrentUrl();\n\n// Get the entire page source code\ndriver.getPageSource();\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#waits","title":"\u23f3 Waits","text":"<p>There are 4 types of waits that can be used in a script</p> <ul> <li>Thread.Sleep</li> <li>Implicit Wait</li> <li>Explicit Wait</li> <li>Fluent Wait</li> </ul>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#thread-from-java","title":"\ud83d\udd52 Thread - from java","text":"<p>This is from java, it is a hard wait i.e; stops execution till time provided in milliseconds.</p> <pre><code>// throws InterruptedException\nThread.sleep(2000);\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#implicit-wait","title":"\u23f1\ufe0f Implicit Wait","text":"<p>Once the command is run, Implicit Wait remains for the entire duration for which the browser is open.</p> <pre><code>driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#explicit-wait","title":"\ud83d\udd75\ufe0f Explicit Wait","text":"<p>These are conditional waits can be applied to satisfy a particular condition</p> <pre><code>// Explicit Wait :- \nWebDriverWait wait = new WebDriverWait(driver, 10);\nwait.until(ExpectedConditions.elementToBeClickable(element));\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#fluent-wait","title":"\ud83d\udd04 Fluent Wait","text":"<p>Fluent Wait in Selenium marks the maximum amount of time for Selenium WebDriver to wait for a certain condition (web element) becomes visible.</p> <p>It also defines how frequently WebDriver will check if the condition appears before throwing the \u201cElementNotVisibleException\u201d.</p> <pre><code>FluentWait wait = new FluentWait(driver);\n//Specify the timeout of the wait\nwait.withTimeout(5000, TimeUnit.MILLISECONDS);\n//Specify polling time\nwait.pollingEvery(250, TimeUnit.MILLISECONDS);\n//Specify what exceptions to ignore\nwait.ignoring(NoSuchElementException.class)\n//This is how we specify the condition to wait on.\nwait.until(ExpectedConditions.alertIsPresent());\n</code></pre>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/automation/selenium/#selenium-grids","title":"\ud83d\udda5\ufe0f Selenium Grids","text":"<p>Start the hub</p> <p>```shell script java -jar selenium-server-standalone-x.y.z.jar -role hub <pre><code>Start a node\n```shell script\njava -jar selenium-server-standalone-x.y.z.jar -role node -hub\n</code></pre></p> <p>Server <pre><code>http://localhost:4444/ui/index.html\n</code></pre></p>","tags":["automation","testing"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/","title":"1. \ud83d\udcd8 Manual Testing Basics","text":"<p>Manual testing involves manually verifying software for defects by simulating end-user behavior. It requires analytical skills, domain expertise, and proficiency in test execution to ensure the software meets functionality and quality standards. This is only quick, concepts for more detailed notes refer <code>tech-essentials-guide</code> section</p>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#11-what-is-manual-testing","title":"1.1. \ud83e\udde0 What is Manual Testing?","text":"<p>Manual testing is the process of evaluating software manually without relying on automation tools. Testers design and execute test cases, observe system behavior, and document any defects or inconsistencies. This approach is essential for uncovering usability issues, edge cases, and scenarios that automated tests may overlook.</p>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#111-key-benefits-of-manual-testing","title":"1.1.1. \ud83d\udd11 Key Benefits of Manual Testing","text":"<ul> <li>Human Insight: Allows testers to identify usability and design flaws.</li> <li>Flexibility: Adaptable to ad-hoc and exploratory testing scenarios.</li> <li>Comprehensive Coverage: Helps uncover issues in areas where automation is impractical.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#112-when-to-use-manual-testing","title":"1.1.2. \ud83d\udea9 When to Use Manual Testing","text":"<ul> <li>For exploratory, usability, and ad-hoc testing.</li> <li>When testing new features or prototypes.</li> <li>In scenarios where automation setup is time-consuming or infeasible.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#113-pro-tip","title":"1.1.3. \ud83d\udccc Pro Tip","text":"<p>Manual testing is often the first step in the testing lifecycle, providing valuable insights that inform the design of automated test cases.</p>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#12-key-concepts","title":"1.2. \u2705 Key Concepts","text":"<ul> <li>\ud83d\udcdd Test Case: A set of actions executed to verify a particular feature or functionality.</li> <li>\ud83d\udcc4 Test Plan: A document that outlines the strategy, scope, and timeline for testing.</li> <li>\ud83d\udc1e Bug Report: A report logged in a defect management system describing a found issue.</li> <li>\ud83d\udd0d Exploratory Testing: Ad-hoc testing without predefined cases, focusing on discovery.</li> <li>\ud83d\udd25 Smoke Testing: Initial testing to check basic functionality.</li> <li>\ud83d\udd04 Regression Testing: Verifying previously working functionality after code changes.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#13-manual-vs-automation-testing","title":"1.3. \ud83d\udd04 Manual vs Automation Testing","text":"Feature Manual Testing Automation Testing \ud83e\uddd1\u200d\ud83d\udcbb Execution Performed by humans Performed by tools/scripts \u23f1\ufe0f Speed Slower Faster \ud83d\udcb0 Cost Higher over time Lower for repetitive tasks \u2705 Accuracy Prone to human error High if scripts are reliable \ud83c\udfc6 Best for Exploratory, usability, ad-hoc tests Repetitive, regression, performance","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#14-sdlc","title":"1.4. \ud83d\udd04 SDLC","text":"<p>Software Development Life Cycle: 1. \ud83c\udf0a Waterfall Model 2. \ud83d\udd04 Spiral Model 3. \u2705 V-Model 4. \ud83d\ude80 Agile Model</p>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#15-testing-methods","title":"1.5. \ud83e\uddea Testing Methods","text":"<ol> <li>\u26aa White Box Testing</li> <li>\u26ab Black Box Testing</li> <li>\u26aa\u26ab Grey Box Testing</li> </ol>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#16-testing-types","title":"1.6. \ud83e\uddf0 Testing Types","text":"<ol> <li>\ud83d\udd25 Smoke / Sanity Testing</li> <li>\u2705 Functional Testing</li> <li>\ud83d\udd17 Integration Testing</li> <li>\ud83c\udf10 End-to-End Testing</li> <li>\ud83d\udd04 Regression Testing</li> <li>\ud83d\udc41\ufe0f Usability Testing</li> <li>\ud83d\udd12 Security Testing</li> <li>\ud83c\udd70\ufe0f Alpha Testing</li> <li>\ud83c\udd71\ufe0f Beta Testing</li> <li>\ud83c\udf0d Crowd Testing</li> <li>\ud83d\udd0d Exploratory Testing</li> <li>\ud83d\ude80 Performance Testing</li> <li>\ud83d\udcaa Stress Testing</li> <li>\ud83d\udcc8 Load Testing</li> </ol>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#17-common-tools-in-manual-testing","title":"1.7. \ud83d\udee0\ufe0f Common Tools in Manual Testing","text":"<ul> <li>\ud83d\udccb Test Case Management: TestLink, TestRail, Zephyr</li> <li>\ud83d\udc1e Defect Tracking: Jira, Bugzilla, MantisBT</li> <li>\ud83d\udcda Documentation: Confluence, Google Docs</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#18-test-case-design-techniques","title":"1.8. \ud83e\udde9 Test Case Design Techniques","text":"<ol> <li>\ud83e\uddee Equivalence Partitioning</li> <li>\ud83d\udccf Boundary Value Analysis</li> <li>\ud83d\udd04 State Transition Testing</li> <li>\ud83d\udcd6 Use Case Testing</li> </ol>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#19-software-testing-life-cycle","title":"1.9. \ud83d\udd04 Software Testing Life Cycle","text":"<ol> <li>\ud83d\udcdc Requirement Analysis</li> <li>\ud83d\udcdd Test Planning</li> <li>\ud83e\uddea Test Case Development</li> <li>\ud83d\udee0\ufe0f Test Environment Setup</li> <li>\ud83d\ude80 Test Execution</li> <li>\u2705 Test Closure</li> </ol>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#110-best-practices","title":"1.10. \ud83d\udccc Best Practices","text":"<ul> <li>\ud83e\uddd0 Understand the requirements before testing</li> <li>\u270d\ufe0f Write clear, concise test cases</li> <li>\ud83d\udd01 Reproduce bugs consistently</li> <li>\ud83d\udd17 Maintain traceability between test cases and requirements</li> <li>\ud83e\udd1d Collaborate with developers and product owners</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#111-tips-for-sdets-and-qa-engineers","title":"1.11. \ud83d\udca1 Tips for SDETs and QA Engineers","text":"<ul> <li>\ud83d\udcdd Learn to document test cases for both manual and automation workflows</li> <li>\ud83e\udde0 Manual testing builds intuition for edge cases that automation may miss</li> <li>\ud83d\ude80 It's often the first step before automating complex test cases</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"cheat-sheets/testing/manual/basics-manual-testing/#112-tags","title":"1.12. \ud83c\udff7 Tags","text":"<p><code>manual-testing</code>, <code>test-design</code>, <code>qa</code>, <code>defect-management</code>, <code>test-strategy</code></p>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"practice-programs-hub/","title":"\ud83d\udcd8 Interview Notes","text":"<p>A collection of solved interview problems in both Java and Python, structured for comparison, learning, and future publishing.</p>"},{"location":"practice-programs-hub/#folder-structure","title":"\ud83d\udcc2 Folder Structure","text":"<ul> <li><code>strings/</code></li> <li><code>arrays/</code></li> </ul>"},{"location":"practice-programs-hub/#table-of-contents","title":"\ud83d\udcd1 Table of Contents","text":""},{"location":"practice-programs-hub/#strings","title":"\ud83e\uddf5 Strings","text":"<ul> <li>01 - Reverse a String</li> <li>02 - Check if a String is a Palindrome</li> </ul>"},{"location":"practice-programs-hub/#arrays","title":"\ud83d\udd22 Arrays","text":"<ul> <li>03 - Two Sum</li> </ul>"},{"location":"practice-programs-hub/#numbers","title":"\ud83d\udd22 Numbers","text":"<ul> <li>01. Check Prime</li> <li>02. Factorial</li> <li>03. Fibonacci</li> <li>04. GCD</li> <li>05. LCM</li> <li>06. Palindrome Number</li> <li>07. Armstrong Number</li> <li>08. Reverse Number</li> <li>09. Sum of Digits</li> <li>10. Count Digits</li> <li>11. Sum of N Numbers</li> <li>12. Sum of N Even Numbers</li> <li>13. Sum of N Odd Numbers</li> <li>14. Power of Two</li> <li>15. Count Set Bits</li> <li>16. Swap Numbers</li> <li>17. Generate Primes</li> <li>18. Prime Factors</li> <li>19. Find Largest Number</li> <li>20. Find Smallest Number</li> <li>21. Sum of Array</li> <li>22. Average of Array</li> <li>23. Find Second Largest</li> <li>24. Find Second Smallest</li> <li>25. Swap Two Numbers</li> <li>26. Reverse a Number</li> <li>27. Check Armstrong Number</li> <li>28. Check Perfect Number</li> <li>29. Check Abundant Number</li> <li>30. Check Harshad Number</li> <li>31. Check Automorphic Number</li> <li>32. Check Neon Number</li> <li>33. Check Spy Number</li> <li>34. Check Magic Number</li> <li>35. Check Happy Number</li> <li>36. Check Niven Number</li> <li>37. Check Pronic Number</li> <li>38. Check Palindrome Number</li> <li>39. Check Cyclic Number</li> <li>40. Check Kaprekar Number</li> <li>41. Check Evil Number</li> <li>42. Check Odious Number</li> <li>43. Check Lucky Number</li> <li>44. Check Sphenic Number</li> <li>45. Check Composite Number</li> <li>46. Check Circular Prime</li> <li>47. Check Emirp Number</li> <li>48. Check Twisted Prime</li> <li>49. Check Unique Number</li> <li>50. Check Repdigit Number</li> </ul>"},{"location":"practice-programs-hub/#usage","title":"\u2705 Usage","text":"<p>Each markdown file includes: - Problem statement - Java and Python code (clearly separated) - Explanations and notes - Tags for searchability and categorization</p> <p>Happy coding!</p>"},{"location":"practice-programs-hub/StandardFormat/","title":"\ud83e\udde0 Problem: Reverse a String","text":"<p>Write a function that takes a string as input and returns the reversed version of that string.</p> <p>Category: Arrays Difficulty: Easy Tags: array, hashmap, brute-force, optimized</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#requirements-if-any","title":"\u2705 Requirements (if any)","text":"<ul> <li>Input: A non-empty string <code>s</code> (e.g., <code>\"hello\"</code>)</li> <li>Output: The reversed string (e.g., <code>\"olleh\"</code>)</li> <li>Constraints:</li> <li>No use of built-in reverse functions.</li> <li>Time complexity should be linear <code>O(n)</code>.</li> <li>Try to avoid extra space if possible (in-place logic where applicable).</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:  \"hello\"\nOutput: \"olleh\"\n\nInput:  \"abc\"\nOutput: \"cba\"\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// File: ReverseString.java\npublic class ReverseString {\n    public static String reverse(String s) {\n        return new StringBuilder(s).reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        String input = \"hello\";\n        System.out.println(reverse(input));  // Output: olleh\n    }\n}\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def reverse(s):\n    return s[::-1]\n\n# Example usage\nprint(reverse(\"hello\"))  # Output: olleh\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Uses <code>StringBuilder</code> which has a <code>.reverse()</code> method.</li> <li><code>.toString()</code> converts the result back to a string.</li> <li> <p>Efficient and standard for short strings.</p> </li> <li> <p>Python:</p> </li> <li>Uses slicing <code>[::-1]</code>, a common idiom in Python for reversing.</li> <li>It's concise and memory-efficient.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) <code>StringBuilder</code> creates a copy Python O(n) O(n) Slicing makes a new string","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Avoid using <code>StringBuilder</code> or slicing if interviewers ask for manual logic.</li> <li>Java Manual Approach: Use <code>char[]</code>, swap in-place.</li> <li>Python Manual Approach: Use a loop and string concatenation or list reversal.</li> <li>Be prepared to reverse:</li> <li>In-place (e.g., <code>char[]</code>, mutable list)</li> <li>With/without additional space</li> <li>Strings with Unicode, emojis, or special characters (complex case)</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/StandardFormat/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>string</code>, <code>python</code>, <code>java</code>, <code>reversal</code>, <code>easy</code>, <code>interview</code>, <code>syntax</code>, <code>language-syntax</code></p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/","title":"\ud83e\udde0 Problem: Find the Largest Element in an Array","text":"<p>Given an array of integers, find the largest element.</p> <p>Category: Arrays Difficulty: Easy Tags: arrays, iteration, max</p>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 5, 3, 9, 2]</code>)</li> <li>Output: The largest integer in the array (e.g., <code>9</code>)</li> <li>Constraints:</li> <li>Array is non-empty.</li> <li>Elements can be positive, negative, or zero.</li> </ul>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 5, 3, 9, 2]\nOutput: 9\n</code></pre>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 5, 3, 9, 2] 9 [-1, -5, -3] -1 [0, 0, 0] 0 [100] 100","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class LargestElement {\n    public static int findLargest(int[] arr) {\n        int max = Integer.MIN_VALUE;\n        for (int num : arr) {\n            if (num &gt; max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 5, 3, 9, 2};\n        System.out.println(\"Largest element: \" + findLargest(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_largest(arr):\n    max_val = float('-inf')\n    for num in arr:\n        if num &gt; max_val:\n            max_val = num\n    return max_val\n\n# Example usage\narr = [1, 5, 3, 9, 2]\nprint(f\"Largest element: {find_largest(arr)}\")\n</code></pre>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Iterates through the array using a <code>for-each</code> loop.</li> <li>Compares each element with the current maximum (<code>max</code>) and updates <code>max</code> if the element is larger.</li> <li>Python:</li> <li>Iterates through the array using a <code>for</code> loop.</li> <li>Compares each element with the current maximum (<code>max_val</code>) and updates <code>max_val</code> if the element is larger.</li> </ul>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Iterates through the array once Python O(n) O(1) Iterates through the array once","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be prepared to handle edge cases:</li> <li>Single-element arrays.</li> <li>Arrays with all negative numbers.</li> <li>Avoid using built-in functions like <code>max()</code> unless explicitly allowed.</li> <li>Discuss the importance of initializing the maximum value (<code>Integer.MIN_VALUE</code> or <code>float('-inf')</code>).</li> </ul>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/01-find-largest-element/#arrays-python-java-max-easy-interview-iteration","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>max</code>, <code>easy</code>, <code>interview</code>, <code>iteration</code>","text":"","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/","title":"\ud83e\udde0 Problem: Reverse an Array","text":"<p>Given an array of integers, reverse the array in place.</p> <p>Category: Arrays Difficulty: Easy Tags: arrays, reverse, iteration</p>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 4, 5]</code>)</li> <li>Output: The reversed array (e.g., <code>[5, 4, 3, 2, 1]</code>)</li> <li>Constraints:</li> <li>Array is non-empty.</li> <li>Elements can be positive, negative, or zero.</li> </ul>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 2, 3, 4, 5]\nOutput: [5, 4, 3, 2, 1]\n</code></pre>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 4, 5] [5, 4, 3, 2, 1] [-1, -2, -3] [-3, -2, -1] [0, 0, 0] [0, 0, 0] [100] [100]","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class ReverseArray {\n    public static void reverse(int[] arr) {\n        int start = 0, end = arr.length - 1;\n        while (start &lt; end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        reverse(arr);\n        System.out.println(\"Reversed array: \" + Arrays.toString(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def reverse_array(arr):\n    start, end = 0, len(arr) - 1\n    while start &lt; end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nreverse_array(arr)\nprint(f\"Reversed array: {arr}\")\n</code></pre>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Uses two pointers (<code>start</code> and <code>end</code>) to swap elements until they meet in the middle.</li> <li>Python:</li> <li>Similar approach using two pointers to swap elements.</li> </ul>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Swaps elements in place Python O(n) O(1) Swaps elements in place","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Single-element arrays.</li> <li>Arrays with all identical elements.</li> <li>Avoid using built-in functions like <code>[::-1]</code> unless explicitly allowed.</li> <li>Explain the in-place nature of the solution (no extra space used).</li> </ul>","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/02-reverse-array/#arrays-python-java-reverse-easy-interview-iteration","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>reverse</code>, <code>easy</code>, <code>interview</code>, <code>iteration</code>","text":"","tags":["java","python","arrays","easy","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/","title":"\ud83e\udde0 Problem: Find the Second Largest Element in an Array","text":"<p>Given an array of integers, find the second largest element.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, iteration, second-largest</p>","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 5, 3, 9, 2]</code>)</li> <li>Output: The second largest integer in the array (e.g., <code>5</code>)</li> <li>Constraints:</li> <li>Array must have at least two distinct elements.</li> <li>Elements can be positive, negative, or zero.</li> </ul>","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 5, 3, 9, 2]\nOutput: 5\n</code></pre>","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 5, 3, 9, 2] 5 [-1, -5, -3] -3 [0, 0, 0] None [100, 200] 100","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class SecondLargestElement {\n    // Approach: Single pass to find largest and second largest\n    public static Integer findSecondLargest(int[] arr) {\n        if (arr.length &lt; 2) return null; // Not enough elements\n        int largest = Integer.MIN_VALUE, secondLargest = Integer.MIN_VALUE;\n        for (int num : arr) {\n            if (num &gt; largest) {\n                secondLargest = largest;\n                largest = num;\n            } else if (num &gt; secondLargest &amp;&amp; num != largest) {\n                secondLargest = num;\n            }\n        }\n        return secondLargest == Integer.MIN_VALUE ? null : secondLargest;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 5, 3, 9, 2};\n        System.out.println(\"Second largest element: \" + findSecondLargest(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_second_largest(arr):\n    # Approach: Single pass to find largest and second largest\n    if len(arr) &lt; 2:\n        return None  # Not enough elements\n    largest, second_largest = float('-inf'), float('-inf')\n    for num in arr:\n        if num &gt; largest:\n            second_largest, largest = largest, num\n        elif num &gt; second_largest and num != largest:\n            second_largest = num\n    return second_largest if second_largest != float('-inf') else None\n\n# Example usage\narr = [1, 5, 3, 9, 2]\nprint(f\"Second largest element: {find_second_largest(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Iterates through the array once.</li> <li>Maintains two variables: <code>largest</code> and <code>secondLargest</code>.</li> <li>Updates <code>secondLargest</code> only if the current number is smaller than <code>largest</code> but larger than <code>secondLargest</code>.</li> <li>Python:</li> <li>Similar approach using two variables: <code>largest</code> and <code>second_largest</code>.</li> </ul>","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass through the array Python O(n) O(1) Single pass through the array","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Arrays with all identical elements.</li> <li>Arrays with fewer than two distinct elements.</li> <li>Avoid sorting the array as it increases time complexity to <code>O(n log n)</code>.</li> </ul>","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/03-find-second-largest/#arrays-python-java-second-largest-medium-interview-iteration","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>second-largest</code>, <code>medium</code>, <code>interview</code>, <code>iteration</code>","text":"","tags":["java","python","arrays","medium","language-syntax"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/","title":"\ud83e\udde0 Problem: Find the Missing Number in an Array","text":"<p>Given an array containing integers from 1 to n with one number missing, find the missing number.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, math, missing-number</p>","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 4, 5]</code>)</li> <li>Output: The missing integer (e.g., <code>3</code>)</li> <li>Constraints:</li> <li>Array contains integers from 1 to n.</li> <li>Only one number is missing.</li> </ul>","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 2, 4, 5]\nOutput: 3\n</code></pre>","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 4, 5] 3 [1, 3, 4, 5] 2 [2, 3, 4, 5] 1 [1, 2, 3, 4, 6] 5","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MissingNumber {\n    // Approach: Sum formula (Sum of 1 to n minus sum of array elements)\n    public static int findMissingNumber(int[] arr, int n) {\n        int totalSum = n * (n + 1) / 2;\n        int arraySum = 0;\n        for (int num : arr) {\n            arraySum += num;\n        }\n        return totalSum - arraySum;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 4, 5};\n        int n = 5; // Total numbers from 1 to n\n        System.out.println(\"Missing number: \" + findMissingNumber(arr, n));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_missing_number(arr, n):\n    # Approach: Sum formula (Sum of 1 to n minus sum of array elements)\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(arr)\n    return total_sum - array_sum\n\n# Example usage\narr = [1, 2, 4, 5]\nn = 5  # Total numbers from 1 to n\nprint(f\"Missing number: {find_missing_number(arr, n)}\")\n</code></pre>","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Calculates the sum of integers from 1 to n using the formula <code>n * (n + 1) / 2</code>.</li> <li>Subtracts the sum of array elements from the total sum to find the missing number.</li> <li>Python:</li> <li>Similar approach using the sum formula and <code>sum()</code> function.</li> </ul>","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Iterates through the array once Python O(n) O(1) Uses <code>sum()</code> function","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Missing number is the first or last element.</li> <li>Arrays with only one element.</li> <li>Avoid sorting the array as it increases time complexity to <code>O(n log n)</code>.</li> </ul>","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/04-find-missing-number/#arrays-python-java-missing-number-medium-interview-math","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>missing-number</code>, <code>medium</code>, <code>interview</code>, <code>math</code>","text":"","tags":["java","python","arrays","medium","math"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/","title":"\ud83e\udde0 Problem: Find the Duplicate Number in an Array","text":"<p>Given an array of integers where one number is repeated, find the duplicate number.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, hash-map, duplicate</p>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 3, 4, 2, 2]</code>)</li> <li>Output: The duplicate integer (e.g., <code>2</code>)</li> <li>Constraints:</li> <li>Array contains integers from 1 to n.</li> <li>Only one number is repeated.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 3, 4, 2, 2]\nOutput: 2\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 3, 4, 2, 2] 2 [3, 1, 3, 4, 2] 3 [1, 1] 1 [2, 2, 2, 2] 2","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.HashSet;\n\npublic class FindDuplicate {\n    // Approach: HashSet to track seen numbers\n    public static int findDuplicate(int[] arr) {\n        HashSet&lt;Integer&gt; seen = new HashSet&lt;&gt;();\n        for (int num : arr) {\n            if (seen.contains(num)) {\n                return num;\n            }\n            seen.add(num);\n        }\n        return -1; // No duplicate found\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 3, 4, 2, 2};\n        System.out.println(\"Duplicate number: \" + findDuplicate(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_duplicate(arr):\n    # Approach: HashSet to track seen numbers\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1  # No duplicate found\n\n# Example usage\narr = [1, 3, 4, 2, 2]\nprint(f\"Duplicate number: {find_duplicate(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Uses a <code>HashSet</code> to track numbers that have been seen.</li> <li>Returns the first number that is already in the set.</li> <li>Python:</li> <li>Similar approach using a <code>set</code> to track seen numbers.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) Uses <code>HashSet</code> Python O(n) O(n) Uses <code>set</code>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Arrays with multiple duplicates (return the first duplicate found).</li> <li>Arrays with only one element (no duplicate).</li> <li>Avoid sorting the array as it increases time complexity to <code>O(n log n)</code>.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/05-find-duplicate/#arrays-python-java-duplicate-medium-interview-hash-map","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>duplicate</code>, <code>medium</code>, <code>interview</code>, <code>hash-map</code>","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/06-rotate-array/","title":"\ud83e\udde0 Problem: Rotate an Array","text":"<p>Given an array of integers, rotate the array to the right by <code>k</code> positions.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, rotation, iteration</p>","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 4, 5]</code>) and an integer <code>k</code> (e.g., <code>2</code>)</li> <li>Output: The rotated array (e.g., <code>[4, 5, 1, 2, 3]</code>)</li> <li>Constraints:</li> <li>Array is non-empty.</li> <li><code>k</code> can be greater than the array length.</li> </ul>","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr = [1, 2, 3, 4, 5], k = 2\nOutput: [4, 5, 1, 2, 3]\n</code></pre>","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 4, 5], 2 [4, 5, 1, 2, 3] [1, 2, 3, 4, 5], 5 [1, 2, 3, 4, 5] [1, 2, 3, 4, 5], 7 [4, 5, 1, 2, 3] [-1, -2, -3], 1 [-3, -1, -2]","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class RotateArray {\n    // Approach: Reverse parts of the array\n    public static void rotate(int[] arr, int k) {\n        k = k % arr.length; // Handle cases where k &gt; arr.length\n        reverse(arr, 0, arr.length - 1);\n        reverse(arr, 0, k - 1);\n        reverse(arr, k, arr.length - 1);\n    }\n\n    private static void reverse(int[] arr, int start, int end) {\n        while (start &lt; end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int k = 2;\n        rotate(arr, k);\n        System.out.println(\"Rotated array: \" + Arrays.toString(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def rotate_array(arr, k):\n    # Approach: Slice the array\n    k = k % len(arr)  # Handle cases where k &gt; len(arr)\n    return arr[-k:] + arr[:-k]\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nk = 2\nrotated = rotate_array(arr, k)\nprint(f\"Rotated array: {rotated}\")\n</code></pre>","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Uses the reverse technique:<ol> <li>Reverse the entire array.</li> <li>Reverse the first <code>k</code> elements.</li> <li>Reverse the remaining elements.</li> </ol> </li> <li>Python:</li> <li>Uses slicing to split the array into two parts and concatenate them.</li> </ul>","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) In-place rotation using reverse Python O(n) O(n) Creates a new array using slicing","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li><code>k = 0</code> (no rotation).</li> <li><code>k &gt; len(arr)</code> (handle modulo operation).</li> <li>Explain the difference between in-place and out-of-place rotation.</li> </ul>","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/06-rotate-array/#arrays-python-java-rotation-medium-interview-iteration","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>rotation</code>, <code>medium</code>, <code>interview</code>, <code>iteration</code>","text":"","tags":["java","python","arrays","medium","rotation"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/","title":"\ud83e\udde0 Problem: Find Pairs with a Given Sum in an Array","text":"<p>Given an array of integers and a target sum, find all pairs of numbers that add up to the target.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, hash-map, pair-sum</p>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 4, 5]</code>) and an integer <code>target</code> (e.g., <code>6</code>)</li> <li>Output: List of pairs (e.g., <code>[(1, 5), (2, 4)]</code>)</li> <li>Constraints:</li> <li>Array can contain duplicates.</li> <li>Pairs should not repeat.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr = [1, 2, 3, 4, 5], target = 6\nOutput: [(1, 5), (2, 4)]\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 4, 5], 6 [(1, 5), (2, 4)] [1, 1, 1, 1], 2 [(1, 1)] [-1, -2, -3, -4], -5 [(-1, -4), (-2, -3)] [1, 2, 3], 10 []","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.*;\n\npublic class PairSum {\n    // Approach: HashMap to track complements\n    public static List&lt;int[]&gt; findPairs(int[] arr, int target) {\n        List&lt;int[]&gt; pairs = new ArrayList&lt;&gt;();\n        Set&lt;Integer&gt; seen = new HashSet&lt;&gt;();\n        for (int num : arr) {\n            int complement = target - num;\n            if (seen.contains(complement)) {\n                pairs.add(new int[]{complement, num});\n            }\n            seen.add(num);\n        }\n        return pairs;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int target = 6;\n        List&lt;int[]&gt; pairs = findPairs(arr, target);\n        for (int[] pair : pairs) {\n            System.out.println(Arrays.toString(pair));\n        }\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_pairs(arr, target):\n    # Approach: HashSet to track complements\n    pairs = []\n    seen = set()\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen.add(num)\n    return pairs\n\n# Example usage\narr = [1, 2, 3, 4, 5]\ntarget = 6\npairs = find_pairs(arr, target)\nprint(f\"Pairs: {pairs}\")\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Uses a <code>HashSet</code> to track numbers seen so far.</li> <li>Checks if the complement of the current number exists in the set.</li> <li>Python:</li> <li>Similar approach using a <code>set</code> to track seen numbers.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) Uses <code>HashSet</code> Python O(n) O(n) Uses <code>set</code>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>No pairs found.</li> <li>Array with duplicate numbers.</li> <li>Avoid nested loops as they increase time complexity to <code>O(n^2)</code>.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/07-find-pair-sum/#arrays-python-java-pair-sum-medium-interview-hash-map","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>pair-sum</code>, <code>medium</code>, <code>interview</code>, <code>hash-map</code>","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/","title":"\ud83e\udde0 Problem: Find the Majority Element in an Array","text":"<p>Given an array of integers, find the majority element. A majority element is an element that appears more than <code>n/2</code> times in the array.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, moore-voting, majority-element</p>","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[3, 3, 4, 2, 3, 3, 3]</code>)</li> <li>Output: The majority element (e.g., <code>3</code>)</li> <li>Constraints:</li> <li>Array contains at least one majority element.</li> </ul>","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 3, 4, 2, 3, 3, 3]\nOutput: 3\n</code></pre>","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [3, 3, 4, 2, 3, 3, 3] 3 [1, 1, 1, 2, 2] 1 [5, 5, 5, 5, 5] 5 [2, 2, 2, 3, 3] 2","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MajorityElement {\n    // Approach: Moore's Voting Algorithm\n    public static int findMajorityElement(int[] arr) {\n        int candidate = findCandidate(arr);\n        return isMajority(arr, candidate) ? candidate : -1;\n    }\n\n    private static int findCandidate(int[] arr) {\n        int count = 0, candidate = -1;\n        for (int num : arr) {\n            if (count == 0) {\n                candidate = num;\n            }\n            count += (num == candidate) ? 1 : -1;\n        }\n        return candidate;\n    }\n\n    private static boolean isMajority(int[] arr, int candidate) {\n        int count = 0;\n        for (int num : arr) {\n            if (num == candidate) {\n                count++;\n            }\n        }\n        return count &gt; arr.length / 2;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 3, 4, 2, 3, 3, 3};\n        System.out.println(\"Majority element: \" + findMajorityElement(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_majority_element(arr):\n    # Approach: Moore's Voting Algorithm\n    candidate = find_candidate(arr)\n    return candidate if is_majority(arr, candidate) else -1\n\ndef find_candidate(arr):\n    count, candidate = 0, None\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += 1 if num == candidate else -1\n    return candidate\n\ndef is_majority(arr, candidate):\n    return arr.count(candidate) &gt; len(arr) // 2\n\n# Example usage\narr = [3, 3, 4, 2, 3, 3, 3]\nprint(f\"Majority element: {find_majority_element(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Moore's Voting Algorithm:</li> <li>Finds a candidate for the majority element by maintaining a count.</li> <li>Verifies if the candidate is indeed the majority element.</li> </ul>","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Two passes: candidate selection and verification Python O(n) O(1) Two passes: candidate selection and verification","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Arrays with no majority element (return <code>-1</code>).</li> <li>Arrays with all identical elements.</li> <li>Explain the efficiency of Moore's Voting Algorithm compared to brute force.</li> </ul>","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/08-find-majority-element/#arrays-python-java-majority-element-medium-interview-moore-voting","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>majority-element</code>, <code>medium</code>, <code>interview</code>, <code>moore-voting</code>","text":"","tags":["java","python","arrays","medium","moore-voting"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/","title":"\ud83e\udde0 Problem: Find Subarray with a Given Sum","text":"<p>Given an array of integers and a target sum, find a contiguous subarray that sums up to the target.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, sliding-window, subarray-sum</p>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 7, 5]</code>) and an integer <code>target</code> (e.g., <code>12</code>)</li> <li>Output: The subarray (e.g., <code>[2, 3, 7]</code>)</li> <li>Constraints:</li> <li>Array contains positive integers.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr = [1, 2, 3, 7, 5], target = 12\nOutput: [2, 3, 7]\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 7, 5], 12 [2, 3, 7] [1, 2, 3, 4, 5], 9 [2, 3, 4] [1, 2, 3], 6 [1, 2, 3] [1, 2, 3], 10 []","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.*;\n\npublic class SubarraySum {\n    // Approach: Sliding Window\n    public static List&lt;Integer&gt; findSubarrayWithSum(int[] arr, int target) {\n        int start = 0, sum = 0;\n        for (int end = 0; end &lt; arr.length; end++) {\n            sum += arr[end];\n            while (sum &gt; target) {\n                sum -= arr[start++];\n            }\n            if (sum == target) {\n                return Arrays.asList(Arrays.copyOfRange(arr, start, end + 1));\n            }\n        }\n        return Collections.emptyList(); // No subarray found\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 7, 5};\n        int target = 12;\n        System.out.println(\"Subarray with sum: \" + findSubarrayWithSum(arr, target));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_subarray_with_sum(arr, target):\n    # Approach: Sliding Window\n    start, sum = 0, 0\n    for end in range(len(arr)):\n        sum += arr[end]\n        while sum &gt; target:\n            sum -= arr[start]\n            start += 1\n        if sum == target:\n            return arr[start:end + 1]\n    return []  # No subarray found\n\n# Example usage\narr = [1, 2, 3, 7, 5]\ntarget = 12\nprint(f\"Subarray with sum: {find_subarray_with_sum(arr, target)}\")\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sliding Window:</li> <li>Expands the window by adding elements to the sum.</li> <li>Shrinks the window by removing elements when the sum exceeds the target.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass using sliding window Python O(n) O(1) Single pass using sliding window","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>No subarray found (return empty list).</li> <li>Subarray is the entire array.</li> <li>Explain the efficiency of sliding window compared to brute force.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/09-find-subarray-sum/#arrays-python-java-subarray-sum-medium-interview-sliding-window","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>subarray-sum</code>, <code>medium</code>, <code>interview</code>, <code>sliding-window</code>","text":"","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/","title":"\ud83e\udde0 Problem: Find the K-th Largest Element in an Array","text":"<p>Given an array of integers and an integer <code>k</code>, find the k-th largest element in the array.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, heap, k-th-largest</p>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[3, 2, 1, 5, 6, 4]</code>) and an integer <code>k</code> (e.g., <code>2</code>)</li> <li>Output: The k-th largest element (e.g., <code>5</code>)</li> <li>Constraints:</li> <li>Array contains distinct integers.</li> </ul>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr = [3, 2, 1, 5, 6, 4], k = 2\nOutput: 5\n</code></pre>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [3, 2, 1, 5, 6, 4], 2 5 [1, 2, 3, 4, 5], 1 5 [1, 2, 3, 4, 5], 5 1 [5, 5, 5, 5, 5], 3 5","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.PriorityQueue;\n\npublic class KthLargestElement {\n    // Approach: Min-Heap\n    public static int findKthLargest(int[] arr, int k) {\n        PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();\n        for (int num : arr) {\n            minHeap.add(num);\n            if (minHeap.size() &gt; k) {\n                minHeap.poll();\n            }\n        }\n        return minHeap.peek();\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 2, 1, 5, 6, 4};\n        int k = 2;\n        System.out.println(\"K-th largest element: \" + findKthLargest(arr, k));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>import heapq\n\ndef find_kth_largest(arr, k):\n    # Approach: Min-Heap\n    return heapq.nlargest(k, arr)[-1]\n\n# Example usage\narr = [3, 2, 1, 5, 6, 4]\nk = 2\nprint(f\"K-th largest element: {find_kth_largest(arr, k)}\")\n</code></pre>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Min-Heap:</li> <li>Maintains a heap of size <code>k</code>.</li> <li>Ensures the smallest element in the heap is the k-th largest element.</li> </ul>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n log k) O(k) Uses <code>PriorityQueue</code> Python O(n log k) O(k) Uses <code>heapq.nlargest</code>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li><code>k = 1</code> (largest element).</li> <li><code>k = len(arr)</code> (smallest element).</li> <li>Explain the efficiency of heap-based solutions compared to sorting.</li> </ul>","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/10-find-kth-largest/#arrays-python-java-k-th-largest-medium-interview-heap","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>k-th-largest</code>, <code>medium</code>, <code>interview</code>, <code>heap</code>","text":"","tags":["java","python","arrays","medium","heap"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/","title":"\ud83e\udde0 Problem: Find the Longest Consecutive Sequence in an Array","text":"<p>Given an unsorted array of integers, find the length of the longest consecutive sequence.</p> <p>Category: Arrays Difficulty: Hard Tags: arrays, hash-set, consecutive-sequence</p>","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[100, 4, 200, 1, 3, 2]</code>)</li> <li>Output: Length of the longest consecutive sequence (e.g., <code>4</code>)</li> <li>Constraints:</li> <li>Array can contain duplicates.</li> </ul>","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [100, 4, 200, 1, 3, 2]\nOutput: 4\n</code></pre>","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [100, 4, 200, 1, 3, 2] 4 [1, 2, 3, 4, 5] 5 [10, 5, 12, 6, 11] 3 [1, 1, 1, 1] 1","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.HashSet;\n\npublic class LongestConsecutiveSequence {\n    // Approach: HashSet to track elements\n    public static int findLongestConsecutiveSequence(int[] arr) {\n        HashSet&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        for (int num : arr) {\n            set.add(num);\n        }\n\n        int longestStreak = 0;\n        for (int num : set) {\n            if (!set.contains(num - 1)) { // Start of a sequence\n                int currentNum = num;\n                int currentStreak = 1;\n\n                while (set.contains(currentNum + 1)) {\n                    currentNum++;\n                    currentStreak++;\n                }\n\n                longestStreak = Math.max(longestStreak, currentStreak);\n            }\n        }\n        return longestStreak;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {100, 4, 200, 1, 3, 2};\n        System.out.println(\"Longest consecutive sequence length: \" + findLongestConsecutiveSequence(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_longest_consecutive_sequence(arr):\n    # Approach: HashSet to track elements\n    num_set = set(arr)\n    longest_streak = 0\n\n    for num in num_set:\n        if num - 1 not in num_set:  # Start of a sequence\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n\n            longest_streak = max(longest_streak, current_streak)\n\n    return longest_streak\n\n# Example usage\narr = [100, 4, 200, 1, 3, 2]\nprint(f\"Longest consecutive sequence length: {find_longest_consecutive_sequence(arr)}\")\n</code></pre>","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>HashSet:</li> <li>Tracks all elements in the array.</li> <li>Identifies the start of a sequence by checking if <code>num - 1</code> exists.</li> <li>Expands the sequence by checking consecutive numbers.</li> </ul>","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) HashSet operations are O(1) Python O(n) O(n) HashSet operations are O(1)","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all identical elements.</li> <li>Array with no consecutive sequence.</li> <li>Explain the efficiency of HashSet compared to sorting.</li> </ul>","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/11-find-longest-consecutive-sequence/#arrays-python-java-consecutive-sequence-hard-interview-hash-set","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>consecutive-sequence</code>, <code>hard</code>, <code>interview</code>, <code>hash-set</code>","text":"","tags":["java","python","arrays","hard","hash-set"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/","title":"\ud83e\udde0 Problem: Find Product of Array Except Self","text":"<p>Given an array of integers, return an array where each element is the product of all elements except itself.</p> <p>Category: Arrays Difficulty: Hard Tags: arrays, prefix-suffix, product-except-self</p>","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 4]</code>)</li> <li>Output: An array of integers (e.g., <code>[24, 12, 8, 6]</code>)</li> <li>Constraints:</li> <li>Array contains positive integers.</li> <li>Division is not allowed.</li> </ul>","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 2, 3, 4]\nOutput: [24, 12, 8, 6]\n</code></pre>","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 4] [24, 12, 8, 6] [2, 3, 4, 5] [60, 40, 30, 24] [1, 1, 1, 1] [1, 1, 1, 1] [10, 5] [5, 10]","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class ProductExceptSelf {\n    // Approach: Prefix and Suffix Arrays\n    public static int[] productExceptSelf(int[] arr) {\n        int n = arr.length;\n        int[] result = new int[n];\n        int[] prefix = new int[n];\n        int[] suffix = new int[n];\n\n        prefix[0] = 1;\n        for (int i = 1; i &lt; n; i++) {\n            prefix[i] = prefix[i - 1] * arr[i - 1];\n        }\n\n        suffix[n - 1] = 1;\n        for (int i = n - 2; i &gt;= 0; i--) {\n            suffix[i] = suffix[i + 1] * arr[i + 1];\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            result[i] = prefix[i] * suffix[i];\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4};\n        int[] result = productExceptSelf(arr);\n        System.out.println(\"Product except self: \" + Arrays.toString(result));\n    }\n}\n</code></pre>","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def product_except_self(arr):\n    # Approach: Prefix and Suffix Arrays\n    n = len(arr)\n    prefix = [1] * n\n    suffix = [1] * n\n    result = [1] * n\n\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] * arr[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        suffix[i] = suffix[i + 1] * arr[i + 1]\n\n    for i in range(n):\n        result[i] = prefix[i] * suffix[i]\n\n    return result\n\n# Example usage\narr = [1, 2, 3, 4]\nprint(f\"Product except self: {product_except_self(arr)}\")\n</code></pre>","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Prefix and Suffix Arrays:</li> <li>Prefix array stores the product of all elements before the current index.</li> <li>Suffix array stores the product of all elements after the current index.</li> <li>Result is calculated by multiplying prefix and suffix values.</li> </ul>","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) Uses prefix and suffix arrays Python O(n) O(n) Uses prefix and suffix arrays","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with one element.</li> <li>Array with all identical elements.</li> <li>Explain why division is avoided in this approach.</li> </ul>","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/12-find-product-except-self/#arrays-python-java-product-except-self-hard-interview-prefix-suffix","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>product-except-self</code>, <code>hard</code>, <code>interview</code>, <code>prefix-suffix</code>","text":"","tags":["java","python","arrays","hard","prefix-suffix"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/","title":"\ud83e\udde0 Problem: Find Maximum Subarray Sum","text":"<p>Given an array of integers, find the maximum sum of a contiguous subarray.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, kadane, subarray-sum</p>","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[-2, 1, -3, 4, -1, 2, 1, -5, 4]</code>)</li> <li>Output: Maximum sum of a contiguous subarray (e.g., <code>6</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nOutput: 6\n</code></pre>","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [-2, 1, -3, 4, -1, 2, 1, -5, 4] 6 [1, 2, 3, 4, 5] 15 [-1, -2, -3, -4] -1 [5, -1, 5, -1, 5] 13","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MaximumSubarraySum {\n    // Approach: Kadane's Algorithm\n    public static int findMaxSubarraySum(int[] arr) {\n        int maxSum = Integer.MIN_VALUE, currentSum = 0;\n        for (int num : arr) {\n            currentSum = Math.max(num, currentSum + num);\n            maxSum = Math.max(maxSum, currentSum);\n        }\n        return maxSum;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n        System.out.println(\"Maximum subarray sum: \" + findMaxSubarraySum(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_max_subarray_sum(arr):\n    # Approach: Kadane's Algorithm\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\n# Example usage\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(f\"Maximum subarray sum: {find_max_subarray_sum(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Kadane's Algorithm:</li> <li>Iterates through the array while maintaining the current sum and maximum sum.</li> <li>Resets the current sum to the current number if adding it results in a smaller sum.</li> </ul>","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass through the array Python O(n) O(1) Single pass through the array","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all negative numbers.</li> <li>Array with only one element.</li> <li>Explain the efficiency of Kadane's Algorithm compared to brute force.</li> </ul>","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/13-find-maximum-subarray-sum/#arrays-python-java-subarray-sum-medium-interview-kadane","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>subarray-sum</code>, <code>medium</code>, <code>interview</code>, <code>kadane</code>","text":"","tags":["java","python","arrays","medium","kadane"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/","title":"\ud83e\udde0 Problem: Find Common Elements in Two Arrays","text":"<p>Given two arrays of integers, find the common elements.</p> <p>Category: Arrays Difficulty: Easy Tags: arrays, hash-set, common-elements</p>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Two arrays of integers <code>arr1</code> and <code>arr2</code> (e.g., <code>[1, 2, 3, 4]</code> and <code>[3, 4, 5, 6]</code>)</li> <li>Output: List of common elements (e.g., <code>[3, 4]</code>)</li> <li>Constraints:</li> <li>Arrays can contain duplicates.</li> </ul>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr1 = [1, 2, 3, 4], arr2 = [3, 4, 5, 6]\nOutput: [3, 4]\n</code></pre>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 4], [3, 4, 5, 6] [3, 4] [1, 1, 1, 1], [1, 1, 1, 1] [1] [1, 2, 3], [4, 5, 6] [] [10, 20, 30], [30, 40, 50] [30]","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.*;\n\npublic class CommonElements {\n    // Approach: HashSet to track elements\n    public static List&lt;Integer&gt; findCommonElements(int[] arr1, int[] arr2) {\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        List&lt;Integer&gt; common = new ArrayList&lt;&gt;();\n        for (int num : arr1) {\n            set.add(num);\n        }\n        for (int num : arr2) {\n            if (set.contains(num)) {\n                common.add(num);\n                set.remove(num); // Avoid duplicates\n            }\n        }\n        return common;\n    }\n\n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4};\n        int[] arr2 = {3, 4, 5, 6};\n        System.out.println(\"Common elements: \" + findCommonElements(arr1, arr2));\n    }\n}\n</code></pre>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_common_elements(arr1, arr2):\n    # Approach: HashSet to track elements\n    set1 = set(arr1)\n    common = []\n    for num in arr2:\n        if num in set1:\n            common.append(num)\n            set1.remove(num)  # Avoid duplicates\n    return common\n\n# Example usage\narr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nprint(f\"Common elements: {find_common_elements(arr1, arr2)}\")\n</code></pre>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>HashSet:</li> <li>Tracks elements of the first array.</li> <li>Checks if elements of the second array exist in the set.</li> </ul>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n + m) O(n) <code>n</code> and <code>m</code> are lengths of the arrays Python O(n + m) O(n) <code>n</code> and <code>m</code> are lengths of the arrays","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Arrays with no common elements.</li> <li>Arrays with all identical elements.</li> <li>Explain the efficiency of HashSet compared to nested loops.</li> </ul>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/14-find-common-elements/#arrays-python-java-common-elements-easy-interview-hash-set","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>common-elements</code>, <code>easy</code>, <code>interview</code>, <code>hash-set</code>","text":"","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/15-find-median/","title":"\ud83e\udde0 Problem: Find the Median of an Array","text":"<p>Given an unsorted array of integers, find the median.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, sorting, median</p>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 3, 2, 4]</code>)</li> <li>Output: Median of the array (e.g., <code>2.5</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 3, 2, 4]\nOutput: 2.5\n</code></pre>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 3, 2, 4] 2.5 [1, 2, 3, 4, 5] 3 [-1, -2, -3, -4] -2.5 [10, 20, 30, 40] 25","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.Arrays;\n\npublic class MedianOfArray {\n    // Approach: Sort and find median\n    public static double findMedian(int[] arr) {\n        Arrays.sort(arr);\n        int n = arr.length;\n        if (n % 2 == 0) {\n            return (arr[n / 2 - 1] + arr[n / 2]) / 2.0;\n        } else {\n            return arr[n / 2];\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 3, 2, 4};\n        System.out.println(\"Median: \" + findMedian(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_median(arr):\n    # Approach: Sort and find median\n    arr.sort()\n    n = len(arr)\n    if n % 2 == 0:\n        return (arr[n // 2 - 1] + arr[n // 2]) / 2\n    else:\n        return arr[n // 2]\n\n# Example usage\narr = [1, 3, 2, 4]\nprint(f\"Median: {find_median(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sorting:</li> <li>Sorts the array to arrange elements in ascending order.</li> <li>Finds the middle element(s) to calculate the median.</li> </ul>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n log n) O(1) Uses <code>Arrays.sort()</code> Python O(n log n) O(1) Uses <code>sort()</code>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with one element.</li> <li>Array with all identical elements.</li> <li>Explain the difference between median for even and odd-length arrays.</li> </ul>","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/15-find-median/#arrays-python-java-median-medium-interview-sorting","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>median</code>, <code>medium</code>, <code>interview</code>, <code>sorting</code>","text":"","tags":["java","python","arrays","medium","sorting"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/","title":"\ud83e\udde0 Problem: Find the Unique Element in an Array","text":"<p>Given an array of integers where every element appears twice except for one, find the unique element.</p> <p>Category: Arrays Difficulty: Easy Tags: arrays, xor, unique-element</p>","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 2, 1]</code>)</li> <li>Output: The unique integer (e.g., <code>3</code>)</li> <li>Constraints:</li> <li>Array contains integers where every element appears twice except for one.</li> </ul>","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 2, 3, 2, 1]\nOutput: 3\n</code></pre>","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 2, 1] 3 [4, 5, 6, 5, 4] 6 [10, 10, 20] 20 [100, 200, 100] 200","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class UniqueElement {\n    // Approach: XOR operation\n    public static int findUniqueElement(int[] arr) {\n        int unique = 0;\n        for (int num : arr) {\n            unique ^= num;\n        }\n        return unique;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 2, 1};\n        System.out.println(\"Unique element: \" + findUniqueElement(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_unique_element(arr):\n    # Approach: XOR operation\n    unique = 0\n    for num in arr:\n        unique ^= num\n    return unique\n\n# Example usage\narr = [1, 2, 3, 2, 1]\nprint(f\"Unique element: {find_unique_element(arr)}\")\n</code></pre>","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>XOR Operation:</li> <li>XOR of two identical numbers is <code>0</code>.</li> <li>XOR of a number with <code>0</code> is the number itself.</li> <li>XOR all elements to cancel out duplicates and find the unique element.</li> </ul>","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass through the array Python O(n) O(1) Single pass through the array","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with only one element.</li> <li>Array with all identical elements except one.</li> <li>Explain the efficiency of XOR compared to other approaches like sorting.</li> </ul>","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/16-find-unique-element/#arrays-python-java-unique-element-easy-interview-xor","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>unique-element</code>, <code>easy</code>, <code>interview</code>, <code>xor</code>","text":"","tags":["java","python","arrays","easy","xor"]},{"location":"practice-programs-hub/arrays/17-find-intersection/","title":"\ud83e\udde0 Problem: Find Intersection of Two Arrays","text":"<p>Given two arrays of integers, find their intersection.</p> <p>Category: Arrays Difficulty: Easy Tags: arrays, hash-set, intersection</p>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Two arrays of integers <code>arr1</code> and <code>arr2</code> (e.g., <code>[1, 2, 3, 4]</code> and <code>[3, 4, 5, 6]</code>)</li> <li>Output: List of intersection elements (e.g., <code>[3, 4]</code>)</li> <li>Constraints:</li> <li>Arrays can contain duplicates.</li> </ul>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr1 = [1, 2, 3, 4], arr2 = [3, 4, 5, 6]\nOutput: [3, 4]\n</code></pre>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 4], [3, 4, 5, 6] [3, 4] [1, 1, 1, 1], [1, 1, 1, 1] [1] [1, 2, 3], [4, 5, 6] [] [10, 20, 30], [30, 40, 50] [30]","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.*;\n\npublic class IntersectionOfArrays {\n    // Approach: HashSet to track elements\n    public static List&lt;Integer&gt; findIntersection(int[] arr1, int[] arr2) {\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        List&lt;Integer&gt; intersection = new ArrayList&lt;&gt;();\n        for (int num : arr1) {\n            set.add(num);\n        }\n        for (int num : arr2) {\n            if (set.contains(num)) {\n                intersection.add(num);\n                set.remove(num); // Avoid duplicates\n            }\n        }\n        return intersection;\n    }\n\n    public static void main(String[] args) {\n        int[] arr1 = {1, 2, 3, 4};\n        int[] arr2 = {3, 4, 5, 6};\n        System.out.println(\"Intersection: \" + findIntersection(arr1, arr2));\n    }\n}\n</code></pre>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_intersection(arr1, arr2):\n    # Approach: HashSet to track elements\n    set1 = set(arr1)\n    intersection = []\n    for num in arr2:\n        if num in set1:\n            intersection.append(num)\n            set1.remove(num)  # Avoid duplicates\n    return intersection\n\n# Example usage\narr1 = [1, 2, 3, 4]\narr2 = [3, 4, 5, 6]\nprint(f\"Intersection: {find_intersection(arr1, arr2)}\")\n</code></pre>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>HashSet:</li> <li>Tracks elements of the first array.</li> <li>Checks if elements of the second array exist in the set.</li> </ul>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n + m) O(n) <code>n</code> and <code>m</code> are lengths of the arrays Python O(n + m) O(n) <code>n</code> and <code>m</code> are lengths of the arrays","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Arrays with no intersection.</li> <li>Arrays with all identical elements.</li> <li>Explain the efficiency of HashSet compared to nested loops.</li> </ul>","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/17-find-intersection/#arrays-python-java-intersection-easy-interview-hash-set","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>intersection</code>, <code>easy</code>, <code>interview</code>, <code>hash-set</code>","text":"","tags":["java","python","arrays","easy","hash-set"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/","title":"\ud83e\udde0 Problem: Find the First Missing Positive Integer","text":"<p>Given an unsorted array of integers, find the smallest positive integer that is missing.</p> <p>Category: Arrays Difficulty: Hard Tags: arrays, in-place, missing-positive</p>","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[3, 4, -1, 1]</code>)</li> <li>Output: The smallest positive integer missing (e.g., <code>2</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 4, -1, 1]\nOutput: 2\n</code></pre>","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [3, 4, -1, 1] 2 [1, 2, 0] 3 [-1, -2, -3] 1 [7, 8, 9, 11, 12] 1","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class FirstMissingPositive {\n    // Approach: In-place swapping\n    public static int findFirstMissingPositive(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; i++) {\n            while (arr[i] &gt; 0 &amp;&amp; arr[i] &lt;= n &amp;&amp; arr[arr[i] - 1] != arr[i]) {\n                int temp = arr[arr[i] - 1];\n                arr[arr[i] - 1] = arr[i];\n                arr[i] = temp;\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            if (arr[i] != i + 1) {\n                return i + 1;\n            }\n        }\n        return n + 1;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 4, -1, 1};\n        System.out.println(\"First missing positive: \" + findFirstMissingPositive(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_first_missing_positive(arr):\n    # Approach: In-place swapping\n    n = len(arr)\n    for i in range(n):\n        while 0 &lt; arr[i] &lt;= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1\n\n# Example usage\narr = [3, 4, -1, 1]\nprint(f\"First missing positive: {find_first_missing_positive(arr)}\")\n</code></pre>","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>In-place Swapping:</li> <li>Places each positive integer in its correct index (e.g., <code>arr[i] = i + 1</code>).</li> <li>Iterates through the array to find the first index where the condition is violated.</li> </ul>","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) In-place swapping Python O(n) O(1) In-place swapping","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all negative numbers.</li> <li>Array with consecutive positive integers starting from <code>1</code>.</li> <li>Explain why sorting is avoided to achieve <code>O(n)</code> complexity.</li> </ul>","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/18-find-first-missing-positive/#arrays-python-java-missing-positive-hard-interview-in-place","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>missing-positive</code>, <code>hard</code>, <code>interview</code>, <code>in-place</code>","text":"","tags":["java","python","arrays","hard","in-place"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/","title":"\ud83e\udde0 Problem: Find Maximum Product Subarray","text":"<p>Given an array of integers, find the maximum product of a contiguous subarray.</p> <p>Category: Arrays Difficulty: Hard Tags: arrays, dynamic-programming, product-subarray</p>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[2, 3, -2, 4]</code>)</li> <li>Output: Maximum product of a contiguous subarray (e.g., <code>6</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [2, 3, -2, 4]\nOutput: 6\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [2, 3, -2, 4] 6 [-2, 0, -1] 0 [1, 2, 3, 4] 24 [-1, -2, -3, -4] 24","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MaximumProductSubarray {\n    // Approach: Dynamic Programming\n    public static int findMaxProductSubarray(int[] arr) {\n        int maxProduct = arr[0], minProduct = arr[0], result = arr[0];\n        for (int i = 1; i &lt; arr.length; i++) {\n            int tempMax = maxProduct;\n            maxProduct = Math.max(arr[i], Math.max(maxProduct * arr[i], minProduct * arr[i]));\n            minProduct = Math.min(arr[i], Math.min(tempMax * arr[i], minProduct * arr[i]));\n            result = Math.max(result, maxProduct);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {2, 3, -2, 4};\n        System.out.println(\"Maximum product subarray: \" + findMaxProductSubarray(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_max_product_subarray(arr):\n    # Approach: Dynamic Programming\n    max_product = min_product = result = arr[0]\n    for num in arr[1:]:\n        temp_max = max_product\n        max_product = max(num, max(max_product * num, min_product * num))\n        min_product = min(num, min(temp_max * num, min_product * num))\n        result = max(result, max_product)\n    return result\n\n# Example usage\narr = [2, 3, -2, 4]\nprint(f\"Maximum product subarray: {find_max_product_subarray(arr)}\")\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Dynamic Programming:</li> <li>Maintains two variables (<code>maxProduct</code> and <code>minProduct</code>) to track the maximum and minimum product at each step.</li> <li>Updates the result with the maximum product encountered so far.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass through the array Python O(n) O(1) Single pass through the array","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all negative numbers.</li> <li>Array with zeros.</li> <li>Explain why maintaining both <code>maxProduct</code> and <code>minProduct</code> is necessary.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/19-find-maximum-product-subarray/#arrays-python-java-product-subarray-hard-interview-dynamic-programming","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>product-subarray</code>, <code>hard</code>, <code>interview</code>, <code>dynamic-programming</code>","text":"","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/","title":"\ud83e\udde0 Problem: Find Maximum Sum of Increasing Subsequence","text":"<p>Given an array of integers, find the maximum sum of an increasing subsequence.</p> <p>Category: Arrays Difficulty: Hard Tags: arrays, dynamic-programming, increasing-subsequence</p>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 101, 2, 3, 100, 4, 5]</code>)</li> <li>Output: Maximum sum of an increasing subsequence (e.g., <code>106</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 101, 2, 3, 100, 4, 5]\nOutput: 106\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 101, 2, 3, 100, 4, 5] 106 [3, 4, 5, 10] 22 [10, 5, 4, 3] 10 [-1, -2, -3, -4] -1","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MaximumSumIncreasingSubsequence {\n    // Approach: Dynamic Programming\n    public static int findMaxSumIncreasingSubsequence(int[] arr) {\n        int n = arr.length;\n        int[] dp = new int[n];\n        System.arraycopy(arr, 0, dp, 0, n);\n\n        for (int i = 1; i &lt; n; i++) {\n            for (int j = 0; j &lt; i; j++) {\n                if (arr[i] &gt; arr[j] &amp;&amp; dp[i] &lt; dp[j] + arr[i]) {\n                    dp[i] = dp[j] + arr[i];\n                }\n            }\n        }\n\n        int maxSum = dp[0];\n        for (int sum : dp) {\n            maxSum = Math.max(maxSum, sum);\n        }\n        return maxSum;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 101, 2, 3, 100, 4, 5};\n        System.out.println(\"Maximum sum of increasing subsequence: \" + findMaxSumIncreasingSubsequence(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_max_sum_increasing_subsequence(arr):\n    # Approach: Dynamic Programming\n    n = len(arr)\n    dp = arr[:]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] &gt; arr[j] and dp[i] &lt; dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n\n    return max(dp)\n\n# Example usage\narr = [1, 101, 2, 3, 100, 4, 5]\nprint(f\"Maximum sum of increasing subsequence: {find_max_sum_increasing_subsequence(arr)}\")\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Dynamic Programming:</li> <li>Maintains a <code>dp</code> array where <code>dp[i]</code> represents the maximum sum of an increasing subsequence ending at index <code>i</code>.</li> <li>Updates <code>dp[i]</code> by checking all previous indices.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n^2) O(n) Nested loops for subsequence comparison Python O(n^2) O(n) Nested loops for subsequence comparison","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all negative numbers.</li> <li>Array with only one element.</li> <li>Explain why dynamic programming is preferred over brute force.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/20-find-maximum-sum-increasing-subsequence/#arrays-python-java-increasing-subsequence-hard-interview-dynamic-programming","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>increasing-subsequence</code>, <code>hard</code>, <code>interview</code>, <code>dynamic-programming</code>","text":"","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/","title":"\ud83e\udde0 Problem: Find Equilibrium Index in an Array","text":"<p>Given an array of integers, find the index where the sum of elements to the left is equal to the sum of elements to the right.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, prefix-sum, equilibrium-index</p>","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 7, 3, 6, 5, 6]</code>)</li> <li>Output: The equilibrium index (e.g., <code>3</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 7, 3, 6, 5, 6]\nOutput: 3\n</code></pre>","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 7, 3, 6, 5, 6] 3 [1, 2, 3] -1 [2, 3, -1, 8, 4] 3 [0, 0, 0, 0] 0","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class EquilibriumIndex {\n    // Approach: Prefix Sum\n    public static int findEquilibriumIndex(int[] arr) {\n        int totalSum = 0, leftSum = 0;\n        for (int num : arr) {\n            totalSum += num;\n        }\n        for (int i = 0; i &lt; arr.length; i++) {\n            totalSum -= arr[i];\n            if (leftSum == totalSum) {\n                return i;\n            }\n            leftSum += arr[i];\n        }\n        return -1; // No equilibrium index found\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 7, 3, 6, 5, 6};\n        System.out.println(\"Equilibrium index: \" + findEquilibriumIndex(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_equilibrium_index(arr):\n    # Approach: Prefix Sum\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1  # No equilibrium index found\n\n# Example usage\narr = [1, 7, 3, 6, 5, 6]\nprint(f\"Equilibrium index: {find_equilibrium_index(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Prefix Sum:</li> <li>Calculates the total sum of the array.</li> <li>Iterates through the array while maintaining the left sum and updating the right sum.</li> </ul>","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass through the array Python O(n) O(1) Single pass through the array","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with no equilibrium index.</li> <li>Array with all identical elements.</li> <li>Explain why prefix-sum is preferred over nested loops.</li> </ul>","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/21-find-equilibrium-index/#arrays-python-java-equilibrium-index-medium-interview-prefix-sum","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>equilibrium-index</code>, <code>medium</code>, <code>interview</code>, <code>prefix-sum</code>","text":"","tags":["java","python","arrays","medium","prefix-sum"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/","title":"\ud83e\udde0 Problem: Find Leaders in an Array","text":"<p>Given an array of integers, find all leaders. A leader is an element that is greater than all elements to its right.</p> <p>Category: Arrays Difficulty: Easy Tags: arrays, iteration, leaders</p>","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[16, 17, 4, 3, 5, 2]</code>)</li> <li>Output: List of leaders (e.g., <code>[17, 5, 2]</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [16, 17, 4, 3, 5, 2]\nOutput: [17, 5, 2]\n</code></pre>","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [16, 17, 4, 3, 5, 2] [17, 5, 2] [1, 2, 3, 4, 5] [5] [5, 4, 3, 2, 1] [5, 4, 3, 2, 1] [-1, -2, -3, -4] [-1]","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.ArrayList;\nimport java.util.List;\n\npublic class LeadersInArray {\n    // Approach: Traverse from right to left\n    public static List&lt;Integer&gt; findLeaders(int[] arr) {\n        List&lt;Integer&gt; leaders = new ArrayList&lt;&gt;();\n        int maxFromRight = Integer.MIN_VALUE;\n        for (int i = arr.length - 1; i &gt;= 0; i--) {\n            if (arr[i] &gt; maxFromRight) {\n                leaders.add(arr[i]);\n                maxFromRight = arr[i];\n            }\n        }\n        return leaders;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {16, 17, 4, 3, 5, 2};\n        System.out.println(\"Leaders in array: \" + findLeaders(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_leaders(arr):\n    # Approach: Traverse from right to left\n    leaders = []\n    max_from_right = float('-inf')\n    for num in reversed(arr):\n        if num &gt; max_from_right:\n            leaders.append(num)\n            max_from_right = num\n    return leaders\n\n# Example usage\narr = [16, 17, 4, 3, 5, 2]\nprint(f\"Leaders in array: {find_leaders(arr)}\")\n</code></pre>","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Right-to-Left Traversal:</li> <li>Maintains a variable <code>maxFromRight</code> to track the maximum element encountered so far.</li> <li>Adds elements to the result if they are greater than <code>maxFromRight</code>.</li> </ul>","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) Single pass through the array Python O(n) O(n) Single pass through the array","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all identical elements.</li> <li>Array with only one element.</li> <li>Explain why the traversal is done from right to left.</li> </ul>","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/22-find-leaders-in-array/#arrays-python-java-leaders-easy-interview-iteration","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>leaders</code>, <code>easy</code>, <code>interview</code>, <code>iteration</code>","text":"","tags":["java","python","arrays","easy","iteration"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/","title":"\ud83e\udde0 Problem: Find Smallest Subarray with Sum Greater Than or Equal to Target","text":"<p>Given an array of integers and a target sum, find the length of the smallest subarray with a sum greater than or equal to the target.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, sliding-window, subarray-sum</p>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[2, 3, 1, 2, 4, 3]</code>) and an integer <code>target</code> (e.g., <code>7</code>)</li> <li>Output: Length of the smallest subarray (e.g., <code>2</code>)</li> <li>Constraints:</li> <li>Array contains positive integers.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr = [2, 3, 1, 2, 4, 3], target = 7\nOutput: 2\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [2, 3, 1, 2, 4, 3], 7 2 [1, 1, 1, 1, 1], 5 5 [1, 2, 3, 4, 5], 15 5 [5, 1, 2, 3], 10 -1","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class SmallestSubarraySum {\n    // Approach: Sliding Window\n    public static int findSmallestSubarray(int[] arr, int target) {\n        int minLength = Integer.MAX_VALUE, sum = 0, start = 0;\n        for (int end = 0; end &lt; arr.length; end++) {\n            sum += arr[end];\n            while (sum &gt;= target) {\n                minLength = Math.min(minLength, end - start + 1);\n                sum -= arr[start++];\n            }\n        }\n        return minLength == Integer.MAX_VALUE ? -1 : minLength;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {2, 3, 1, 2, 4, 3};\n        int target = 7;\n        System.out.println(\"Smallest subarray length: \" + findSmallestSubarray(arr, target));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_smallest_subarray(arr, target):\n    # Approach: Sliding Window\n    min_length = float('inf')\n    sum = 0\n    start = 0\n    for end in range(len(arr)):\n        sum += arr[end]\n        while sum &gt;= target:\n            min_length = min(min_length, end - start + 1)\n            sum -= arr[start]\n            start += 1\n    return min_length if min_length != float('inf') else -1\n\n# Example usage\narr = [2, 3, 1, 2, 4, 3]\ntarget = 7\nprint(f\"Smallest subarray length: {find_smallest_subarray(arr, target)}\")\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sliding Window:</li> <li>Expands the window by adding elements to the sum.</li> <li>Shrinks the window by removing elements when the sum exceeds or equals the target.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass using sliding window Python O(n) O(1) Single pass using sliding window","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>No subarray found (return <code>-1</code>).</li> <li>Subarray is the entire array.</li> <li>Explain the efficiency of sliding window compared to brute force.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/23-find-smallest-subarray-sum/#arrays-python-java-subarray-sum-medium-interview-sliding-window","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>subarray-sum</code>, <code>medium</code>, <code>interview</code>, <code>sliding-window</code>","text":"","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/","title":"\ud83e\udde0 Problem: Find Longest Palindromic Subarray","text":"<p>Given an array of integers, find the longest palindromic subarray.</p> <p>Category: Arrays Difficulty: Hard Tags: arrays, dynamic-programming, palindromic-subarray</p>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 2, 1]</code>)</li> <li>Output: The longest palindromic subarray (e.g., <code>[1, 2, 3, 2, 1]</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [1, 2, 3, 2, 1]\nOutput: [1, 2, 3, 2, 1]\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 2, 1] [1, 2, 3, 2, 1] [1, 2, 3, 4, 5] [1] [5, 4, 3, 2, 1, 2, 3, 4, 5] [5, 4, 3, 2, 1, 2, 3, 4, 5] [-1, -2, -3, -2, -1] [-1, -2, -3, -2, -1]","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class LongestPalindromicSubarray {\n    // Approach: Expand around center\n    public static int[] findLongestPalindromicSubarray(int[] arr) {\n        int start = 0, maxLength = 1;\n        for (int i = 1; i &lt; arr.length; i++) {\n            int low = i - 1, high = i;\n            while (low &gt;= 0 &amp;&amp; high &lt; arr.length &amp;&amp; arr[low] == arr[high]) {\n                if (high - low + 1 &gt; maxLength) {\n                    start = low;\n                    maxLength = high - low + 1;\n                }\n                low--;\n                high++;\n            }\n            low = i - 1;\n            high = i + 1;\n            while (low &gt;= 0 &amp;&amp; high &lt; arr.length &amp;&amp; arr[low] == arr[high]) {\n                if (high - low + 1 &gt; maxLength) {\n                    start = low;\n                    maxLength = high - low + 1;\n                }\n                low--;\n                high++;\n            }\n        }\n        int[] result = new int[maxLength];\n        System.arraycopy(arr, start, result, 0, maxLength);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 2, 1};\n        int[] result = findLongestPalindromicSubarray(arr);\n        System.out.println(\"Longest palindromic subarray: \" + Arrays.toString(result));\n    }\n}\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_longest_palindromic_subarray(arr):\n    # Approach: Expand around center\n    def expand_around_center(left, right):\n        while left &gt;= 0 and right &lt; len(arr) and arr[left] == arr[right]:\n            left -= 1\n            right += 1\n        return left + 1, right - 1\n\n    start, end = 0, 0\n    for i in range(len(arr)):\n        l1, r1 = expand_around_center(i, i)\n        l2, r2 = expand_around_center(i, i + 1)\n        if r1 - l1 &gt; end - start:\n            start, end = l1, r1\n        if r2 - l2 &gt; end - start:\n            start, end = l2, r2\n    return arr[start:end + 1]\n\n# Example usage\narr = [1, 2, 3, 2, 1]\nprint(f\"Longest palindromic subarray: {find_longest_palindromic_subarray(arr)}\")\n</code></pre>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Expand Around Center:</li> <li>Considers each element and pair of elements as potential centers of a palindrome.</li> <li>Expands outward while elements are equal.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n^2) O(n) Expands around each center Python O(n^2) O(n) Expands around each center","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with no palindrome (return single element).</li> <li>Array with all identical elements.</li> <li>Explain why dynamic programming is avoided for simplicity.</li> </ul>","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/24-find-longest-palindromic-subarray/#arrays-python-java-palindromic-subarray-hard-interview-dynamic-programming","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>palindromic-subarray</code>, <code>hard</code>, <code>interview</code>, <code>dynamic-programming</code>","text":"","tags":["java","python","arrays","hard","dynamic-programming"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/","title":"\ud83e\udde0 Problem: Find Maximum Circular Subarray Sum","text":"<p>Given an array of integers, find the maximum sum of a circular subarray.</p> <p>Category: Arrays Difficulty: Hard Tags: arrays, kadane, circular-subarray</p>","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[8, -1, -3, 8]</code>)</li> <li>Output: Maximum sum of a circular subarray (e.g., <code>16</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [8, -1, -3, 8]\nOutput: 16\n</code></pre>","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [8, -1, -3, 8] 16 [1, 2, 3, 4, 5] 15 [-1, -2, -3, -4] -1 [10, -5, 10] 20","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MaximumCircularSubarraySum {\n    // Approach: Kadane's Algorithm\n    public static int findMaxCircularSubarraySum(int[] arr) {\n        int maxKadane = kadane(arr);\n        int totalSum = 0;\n        for (int i = 0; i &lt; arr.length; i++) {\n            totalSum += arr[i];\n            arr[i] = -arr[i];\n        }\n        int maxWrap = totalSum + kadane(arr);\n        return maxWrap &gt; 0 ? Math.max(maxKadane, maxWrap) : maxKadane;\n    }\n\n    private static int kadane(int[] arr) {\n        int maxSum = arr[0], currentSum = arr[0];\n        for (int i = 1; i &lt; arr.length; i++) {\n            currentSum = Math.max(arr[i], currentSum + arr[i]);\n            maxSum = Math.max(maxSum, currentSum);\n        }\n        return maxSum;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {8, -1, -3, 8};\n        System.out.println(\"Maximum circular subarray sum: \" + findMaxCircularSubarraySum(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_max_circular_subarray_sum(arr):\n    # Approach: Kadane's Algorithm\n    def kadane(arr):\n        max_sum = current_sum = arr[0]\n        for num in arr[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    max_kadane = kadane(arr)\n    total_sum = sum(arr)\n    arr = [-num for num in arr]\n    max_wrap = total_sum + kadane(arr)\n    return max_wrap if max_wrap &gt; 0 else max_kadane\n\n# Example usage\narr = [8, -1, -3, 8]\nprint(f\"Maximum circular subarray sum: {find_max_circular_subarray_sum(arr)}\")\n</code></pre>","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Kadane's Algorithm:</li> <li>Finds the maximum subarray sum using Kadane's Algorithm.</li> <li>Calculates the maximum circular sum by inverting the array and adding the total sum.</li> </ul>","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass using Kadane's Algorithm Python O(n) O(1) Single pass using Kadane's Algorithm","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all negative numbers.</li> <li>Array with only one element.</li> <li>Explain why Kadane's Algorithm is used twice.</li> </ul>","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/25-find-maximum-circular-subarray-sum/#arrays-python-java-circular-subarray-hard-interview-kadane","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>circular-subarray</code>, <code>hard</code>, <code>interview</code>, <code>kadane</code>","text":"","tags":["java","python","arrays","hard","kadane"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/","title":"\ud83e\udde0 Problem: Find Minimum in Rotated Sorted Array","text":"<p>Given a rotated sorted array, find the minimum element.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, binary-search, rotated-array</p>","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: A rotated sorted array <code>arr</code> (e.g., <code>[4, 5, 6, 7, 0, 1, 2]</code>)</li> <li>Output: The minimum element (e.g., <code>0</code>)</li> <li>Constraints:</li> <li>Array contains distinct integers.</li> </ul>","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [4, 5, 6, 7, 0, 1, 2]\nOutput: 0\n</code></pre>","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [4, 5, 6, 7, 0, 1, 2] 0 [1, 2, 3, 4, 5] 1 [5, 1, 2, 3, 4] 1 [2, 3, 4, 5, 1] 1","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MinimumInRotatedArray {\n    // Approach: Binary Search\n    public static int findMinimum(int[] arr) {\n        int left = 0, right = arr.length - 1;\n        while (left &lt; right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] &gt; arr[right]) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return arr[left];\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 6, 7, 0, 1, 2};\n        System.out.println(\"Minimum element: \" + findMinimum(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_minimum(arr):\n    # Approach: Binary Search\n    left, right = 0, len(arr) - 1\n    while left &lt; right:\n        mid = left + (right - left) // 2\n        if arr[mid] &gt; arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]\n\n# Example usage\narr = [4, 5, 6, 7, 0, 1, 2]\nprint(f\"Minimum element: {find_minimum(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Binary Search:</li> <li>Compares the middle element with the rightmost element to determine the rotation point.</li> <li>Narrows down the search space until the minimum element is found.</li> </ul>","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(log n) O(1) Binary search on rotated array Python O(log n) O(1) Binary search on rotated array","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with no rotation (already sorted).</li> <li>Array with only one element.</li> <li>Explain why binary search is preferred over linear search.</li> </ul>","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/26-find-minimum-in-rotated-sorted-array/#arrays-python-java-rotated-array-medium-interview-binary-search","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>rotated-array</code>, <code>medium</code>, <code>interview</code>, <code>binary-search</code>","text":"","tags":["java","python","arrays","medium","binary-search"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/","title":"\ud83e\udde0 Problem: Find Maximum Sum of Non-Adjacent Elements","text":"<p>Given an array of integers, find the maximum sum of non-adjacent elements.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, dynamic-programming, non-adjacent-sum</p>","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[3, 2, 7, 10]</code>)</li> <li>Output: Maximum sum of non-adjacent elements (e.g., <code>13</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 2, 7, 10]\nOutput: 13\n</code></pre>","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [3, 2, 7, 10] 13 [5, 5, 10, 100, 10] 110 [1, 2, 3, 4, 5] 9 [-1, -2, -3, -4] 0","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class MaximumSumNonAdjacent {\n    // Approach: Dynamic Programming\n    public static int findMaxSumNonAdjacent(int[] arr) {\n        int include = 0, exclude = 0;\n        for (int num : arr) {\n            int temp = include;\n            include = Math.max(exclude + num, include);\n            exclude = temp;\n        }\n        return include;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {3, 2, 7, 10};\n        System.out.println(\"Maximum sum of non-adjacent elements: \" + findMaxSumNonAdjacent(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_max_sum_non_adjacent(arr):\n    # Approach: Dynamic Programming\n    include, exclude = 0, 0\n    for num in arr:\n        temp = include\n        include = max(exclude + num, include)\n        exclude = temp\n    return include\n\n# Example usage\narr = [3, 2, 7, 10]\nprint(f\"Maximum sum of non-adjacent elements: {find_max_sum_non_adjacent(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Dynamic Programming:</li> <li>Maintains two variables: <code>include</code> (sum including current element) and <code>exclude</code> (sum excluding current element).</li> <li>Updates <code>include</code> and <code>exclude</code> iteratively.</li> </ul>","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass through the array Python O(n) O(1) Single pass through the array","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>Array with all negative numbers (return <code>0</code>).</li> <li>Array with only one element.</li> <li>Explain why dynamic programming is preferred over brute force.</li> </ul>","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/27-find-maximum-sum-non-adjacent/#arrays-python-java-non-adjacent-sum-medium-interview-dynamic-programming","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>non-adjacent-sum</code>, <code>medium</code>, <code>interview</code>, <code>dynamic-programming</code>","text":"","tags":["java","python","arrays","medium","dynamic-programming"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/","title":"\ud83e\udde0 Problem: Find Longest Subarray with Sum Equal to K","text":"<p>Given an array of integers and a target sum <code>k</code>, find the length of the longest subarray with a sum equal to <code>k</code>.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, hash-map, subarray-sum</p>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[1, 2, 3, 7, 5]</code>) and an integer <code>k</code> (e.g., <code>12</code>)</li> <li>Output: Length of the longest subarray (e.g., <code>2</code>)</li> <li>Constraints:</li> <li>Array can contain positive and negative integers.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr = [1, 2, 3, 7, 5], k = 12\nOutput: 2\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [1, 2, 3, 7, 5], 12 2 [1, 2, 3, 4, 5], 9 3 [-1, -2, -3, -4], -6 2 [5, 1, 2, 3], 10 4","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.HashMap;\n\npublic class LongestSubarrayWithSumK {\n    // Approach: HashMap to track prefix sums\n    public static int findLongestSubarrayWithSumK(int[] arr, int k) {\n        HashMap&lt;Integer, Integer&gt; prefixSumMap = new HashMap&lt;&gt;();\n        int sum = 0, maxLength = 0;\n        prefixSumMap.put(0, -1); // Handle cases where subarray starts at index 0\n\n        for (int i = 0; i &lt; arr.length; i++) {\n            sum += arr[i];\n            if (prefixSumMap.containsKey(sum - k)) {\n                maxLength = Math.max(maxLength, i - prefixSumMap.get(sum - k));\n            }\n            prefixSumMap.putIfAbsent(sum, i);\n        }\n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 7, 5};\n        int k = 12;\n        System.out.println(\"Longest subarray length: \" + findLongestSubarrayWithSumK(arr, k));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_longest_subarray_with_sum_k(arr, k):\n    # Approach: HashMap to track prefix sums\n    prefix_sum_map = {0: -1}  # Handle cases where subarray starts at index 0\n    sum = 0\n    max_length = 0\n\n    for i, num in enumerate(arr):\n        sum += num\n        if sum - k in prefix_sum_map:\n            max_length = max(max_length, i - prefix_sum_map[sum - k])\n        if sum not in prefix_sum_map:\n            prefix_sum_map[sum] = i\n\n    return max_length\n\n# Example usage\narr = [1, 2, 3, 7, 5]\nk = 12\nprint(f\"Longest subarray length: {find_longest_subarray_with_sum_k(arr, k)}\")\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>HashMap:</li> <li>Tracks prefix sums and their indices.</li> <li>Checks if the difference between the current sum and <code>k</code> exists in the map.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) Uses <code>HashMap</code> for prefix sums Python O(n) O(n) Uses <code>dict</code> for prefix sums","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>No subarray found (return <code>0</code>).</li> <li>Subarray is the entire array.</li> <li>Explain why prefix sums are preferred over nested loops.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/28-find-longest-subarray-with-sum-k/#arrays-python-java-subarray-sum-medium-interview-hash-map","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>subarray-sum</code>, <code>medium</code>, <code>interview</code>, <code>hash-map</code>","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/","title":"\ud83e\udde0 Problem: Find Subarrays with Product Less Than K","text":"<p>Given an array of integers and a target product <code>k</code>, find the number of contiguous subarrays with a product less than <code>k</code>.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, sliding-window, subarray-product</p>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: An array of integers <code>arr</code> (e.g., <code>[10, 5, 2, 6]</code>) and an integer <code>k</code> (e.g., <code>100</code>)</li> <li>Output: Number of subarrays (e.g., <code>8</code>)</li> <li>Constraints:</li> <li>Array contains positive integers.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: arr = [10, 5, 2, 6], k = 100\nOutput: 8\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [10, 5, 2, 6], 100 8 [1, 2, 3], 10 6 [1, 1, 1, 1], 2 10 [5, 1, 2, 3], 10 7","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public class SubarrayProductLessThanK {\n    // Approach: Sliding Window\n    public static int findSubarraysWithProductLessThanK(int[] arr, int k) {\n        if (k &lt;= 1) return 0;\n        int count = 0, product = 1, start = 0;\n        for (int end = 0; end &lt; arr.length; end++) {\n            product *= arr[end];\n            while (product &gt;= k) {\n                product /= arr[start++];\n            }\n            count += end - start + 1;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {10, 5, 2, 6};\n        int k = 100;\n        System.out.println(\"Number of subarrays: \" + findSubarraysWithProductLessThanK(arr, k));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_subarrays_with_product_less_than_k(arr, k):\n    # Approach: Sliding Window\n    if k &lt;= 1:\n        return 0\n    count, product, start = 0, 1, 0\n    for end in range(len(arr)):\n        product *= arr[end]\n        while product &gt;= k:\n            product //= arr[start]\n            start += 1\n        count += end - start + 1\n    return count\n\n# Example usage\narr = [10, 5, 2, 6]\nk = 100\nprint(f\"Number of subarrays: {find_subarrays_with_product_less_than_k(arr, k)}\")\n</code></pre>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sliding Window:</li> <li>Expands the window by multiplying elements to the product.</li> <li>Shrinks the window by dividing elements when the product exceeds or equals <code>k</code>.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Single pass using sliding window Python O(n) O(1) Single pass using sliding window","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>No subarray found (return <code>0</code>).</li> <li>Subarray is the entire array.</li> <li>Explain the efficiency of sliding window compared to brute force.</li> </ul>","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/29-find-subarray-with-product-less-than-k/#arrays-python-java-subarray-product-medium-interview-sliding-window","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>subarray-product</code>, <code>medium</code>, <code>interview</code>, <code>sliding-window</code>","text":"","tags":["java","python","arrays","medium","sliding-window"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/","title":"\ud83e\udde0 Problem: Find Maximum Length of Contiguous Subarray with Equal 0s and 1s","text":"<p>Given a binary array, find the maximum length of a contiguous subarray with an equal number of 0s and 1s.</p> <p>Category: Arrays Difficulty: Medium Tags: arrays, hash-map, subarray-equal-0s-1s</p>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: A binary array <code>arr</code> (e.g., <code>[0, 1, 0, 1]</code>)</li> <li>Output: Maximum length of the subarray (e.g., <code>4</code>)</li> <li>Constraints:</li> <li>Array contains only 0s and 1s.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [0, 1, 0, 1]\nOutput: 4\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output [0, 1, 0, 1] 4 [0, 0, 1, 1, 0, 1] 6 [1, 1, 1, 0, 0, 0] 6 [1, 1, 1, 1] 0","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import java.util.HashMap;\n\npublic class MaximumLengthEqual0s1s {\n    // Approach: HashMap to track prefix sums\n    public static int findMaxLength(int[] arr) {\n        HashMap&lt;Integer, Integer&gt; prefixSumMap = new HashMap&lt;&gt;();\n        int sum = 0, maxLength = 0;\n        prefixSumMap.put(0, -1); // Handle cases where subarray starts at index 0\n\n        for (int i = 0; i &lt; arr.length; i++) {\n            sum += (arr[i] == 0) ? -1 : 1;\n            if (prefixSumMap.containsKey(sum)) {\n                maxLength = Math.max(maxLength, i - prefixSumMap.get(sum));\n            } else {\n                prefixSumMap.put(sum, i);\n            }\n        }\n        return maxLength;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {0, 1, 0, 1};\n        System.out.println(\"Maximum length of subarray: \" + findMaxLength(arr));\n    }\n}\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def find_max_length(arr):\n    # Approach: HashMap to track prefix sums\n    prefix_sum_map = {0: -1}  # Handle cases where subarray starts at index 0\n    sum = 0\n    max_length = 0\n\n    for i, num in enumerate(arr):\n        sum += -1 if num == 0 else 1\n        if sum in prefix_sum_map:\n            max_length = max(max_length, i - prefix_sum_map[sum])\n        else:\n            prefix_sum_map[sum] = i\n\n    return max_length\n\n# Example usage\narr = [0, 1, 0, 1]\nprint(f\"Maximum length of subarray: {find_max_length(arr)}\")\n</code></pre>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>HashMap:</li> <li>Tracks prefix sums and their indices.</li> <li>Checks if the current prefix sum has been seen before to calculate the length of the subarray.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) Uses <code>HashMap</code> for prefix sums Python O(n) O(n) Uses <code>dict</code> for prefix sums","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases:</li> <li>No subarray found (return <code>0</code>).</li> <li>Subarray is the entire array.</li> <li>Explain why prefix sums are preferred over nested loops.</li> </ul>","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/arrays/30-find-maximum-length-of-equal-0s-and-1s/#arrays-python-java-subarray-equal-0s-1s-medium-interview-hash-map","title":"<code>arrays</code>, <code>python</code>, <code>java</code>, <code>subarray-equal-0s-1s</code>, <code>medium</code>, <code>interview</code>, <code>hash-map</code>","text":"","tags":["java","python","arrays","medium","hash-map"]},{"location":"practice-programs-hub/numbers/01-is-prime/","title":"\ud83e\udde0 Problem: Check if a number is prime","text":"<p>Given an integer n, determine if it is a prime number.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, prime, math</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n</li> <li>Output: Boolean, true if n is prime, false otherwise</li> <li>Constraints: n can be negative, zero, or positive</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 17\nOutput: true\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 2 true 17 true 18 false 1 false -5 false","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Trial Division (check all numbers up to n-1)\npublic static boolean isPrimeTrial(int n) {\n    if (n &lt;= 1) return false;\n    for (int i = 2; i &lt; n; i++) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\n// Method 2: Optimized (check up to sqrt(n), skip even numbers)\npublic static boolean isPrimeOptimized(int n) {\n    if (n &lt;= 1) return false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i * i &lt;= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n// Note: Method 2 is more efficient for large n.\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Trial Division (check all numbers up to n-1)\ndef is_prime_trial(n):\n    if n &lt;= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n# Method 2: Optimized (check up to sqrt(n), skip even numbers)\ndef is_prime_optimized(n):\n    if n &lt;= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n# Note: Method 2 is more efficient for large n.\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A prime number is greater than 1 and has no divisors other than 1 and itself.</li> <li>Method 1 checks all numbers up to n-1 (inefficient for large n).</li> <li>Method 2 checks up to sqrt(n) and skips even numbers (efficient).</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n)/O(\u221an) O(1) Trial/Optimized Python O(n)/O(\u221an) O(1) Trial/Optimized","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both methods and their efficiency.</li> <li>Know the definition of a prime number.</li> <li>Handle negative numbers and edge cases (0, 1).</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/01-is-prime/#numbers-python-java-prime-easy-interview-math","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>prime</code>, <code>easy</code>, <code>interview</code>, <code>math</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/","title":"\ud83e\udde0 Problem: Calculate the factorial of a number","text":"<p>Given a non-negative integer n, return n! (n factorial).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, recursion, iteration</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt;= 0)</li> <li>Output: Integer, n!</li> <li>Constraints: 0 &lt;= n &lt;= 20 (to avoid overflow)</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 5\nOutput: 120\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 0 1 1 1 5 120 10 3628800","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static long factorial(int n) {\n    if (n &lt; 0) throw new IllegalArgumentException(\"n must be non-negative\");\n    long result = 1;\n    for (int i = 2; i &lt;= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n// Method 2: Recursive\npublic static long factorialRecursive(int n) {\n    if (n &lt; 0) throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0 || n == 1) return 1;\n    return n * factorialRecursive(n - 1);\n}\n// Note: Iterative is preferred for large n to avoid stack overflow.\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef factorial(n):\n    if n &lt; 0:\n        raise ValueError(\"n must be non-negative\")\n    result = 1\n    for i in range(2, n+1):\n        result *= i\n    return result\n\n# Method 2: Recursive\ndef factorial_recursive(n):\n    if n &lt; 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial_recursive(n-1)\n# Note: Iterative is preferred for large n to avoid recursion limit.\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Multiply all integers from 1 to n.</li> <li>Can be solved iteratively or recursively.</li> <li>Watch for integer overflow in Java.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1)/O(n) Iterative/Recursive Python O(n) O(1)/O(n) Iterative/Recursive","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss recursion vs. iteration.</li> <li>Handle edge cases (n=0, n=1).</li> <li>For large n, discuss BigInteger (Java) or arbitrary-precision in Python.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/02-factorial/#numbers-python-java-factorial-easy-interview-recursion-iteration","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>factorial</code>, <code>easy</code>, <code>interview</code>, <code>recursion</code>, <code>iteration</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/","title":"\ud83e\udde0 Problem: Find the nth Fibonacci number","text":"<p>Given an integer n, return the nth Fibonacci number (0-indexed).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, recursion, iteration, dp</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt;= 0)</li> <li>Output: Integer, nth Fibonacci number</li> <li>Constraints: 0 &lt;= n &lt;= 30 (for simple solutions)</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 7\nOutput: 13\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 0 0 1 1 2 1 5 5 10 55 15 610","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static int fibonacci(int n) {\n    if (n &lt; 0) throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    int a = 0, b = 1;\n    for (int i = 2; i &lt;= n; i++) {\n        int temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return b;\n}\n\n// Method 2: Recursive\npublic static int fibonacciRecursive(int n) {\n    if (n &lt; 0) throw new IllegalArgumentException(\"n must be non-negative\");\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fibonacciRecursive(n-1) + fibonacciRecursive(n-2);\n}\n// Note: Iterative is preferred for large n. Recursive is simple but inefficient for large n.\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef fibonacci(n):\n    if n &lt; 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b\n\n# Method 2: Recursive\ndef fibonacci_recursive(n):\n    if n &lt; 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n# Note: Iterative is preferred for large n. Recursive is simple but inefficient for large n.\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Each number is the sum of the previous two.</li> <li>Iterative solution is efficient for small n.</li> <li>Recursion is less efficient without memoization.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n)/O(2^n) O(1)/O(n) Iterative/Recursive Python O(n)/O(2^n) O(1)/O(n) Iterative/Recursive","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss recursion, iteration, and dynamic programming.</li> <li>Handle edge cases (n=0, n=1).</li> <li>For large n, discuss memoization or matrix exponentiation.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/03-fibonacci/#numbers-python-java-fibonacci-easy-interview-recursion-iteration","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>fibonacci</code>, <code>easy</code>, <code>interview</code>, <code>recursion</code>, <code>iteration</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/","title":"\ud83e\udde0 Problem: Find the GCD of two numbers","text":"<p>Given two integers a and b, return their greatest common divisor (GCD).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, gcd, euclidean, recursion</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Two integers a, b</li> <li>Output: Integer, GCD of a and b</li> <li>Constraints: a &gt; 0, b &gt; 0</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 12, 18\nOutput: 6\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#test-cases","title":"\ud83e\uddea Test Cases","text":"a b Output 12 18 6 7 5 1 100 10 10 81 27 27 17 13 1","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Recursive Euclidean Algorithm\npublic static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n}\n\n// Method 2: Iterative Euclidean Algorithm\npublic static int gcdIterative(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Recursive Euclidean Algorithm\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n# Method 2: Iterative Euclidean Algorithm\ndef gcd_iterative(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Uses the Euclidean algorithm: gcd(a, b) = gcd(b, a % b).</li> <li>Recursion or iteration continues until b == 0.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(log min(a,b)) O(1) Recursive/Iterative Python O(log min(a,b)) O(1) Recursive/Iterative","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss iterative vs. recursive approaches.</li> <li>GCD is used in LCM, fraction reduction, etc.</li> <li>Handle negative numbers if required.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/04-gcd/#numbers-python-java-gcd-easy-interview-recursion","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>gcd</code>, <code>easy</code>, <code>interview</code>, <code>recursion</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/","title":"\ud83e\udde0 Problem: Find the LCM of two numbers","text":"<p>Given two integers a and b, return their least common multiple (LCM).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, lcm, gcd</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Two integers a, b</li> <li>Output: Integer, LCM of a and b</li> <li>Constraints: a &gt; 0, b &gt; 0</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 12, 18\nOutput: 36\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#test-cases","title":"\ud83e\uddea Test Cases","text":"a b Output 12 18 36 7 5 35 100 10 100 81 27 81 17 13 221","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Using GCD\npublic static int gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n}\npublic static int lcm(int a, int b) {\n    return a * (b / gcd(a, b));\n}\n\n// Method 2: Iterative GCD\npublic static int gcdIterative(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\npublic static int lcmIterative(int a, int b) {\n    return a * (b / gcdIterative(a, b));\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Using GCD\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n# Method 2: Iterative GCD\ndef gcd_iterative(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef lcm_iterative(a, b):\n    return a * b // gcd_iterative(a, b)\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>LCM is calculated as (a * b) / gcd(a, b).</li> <li>Uses the GCD function for efficiency.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(log min(a,b)) O(1) Uses GCD Python O(log min(a,b)) O(1) Uses GCD","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>LCM is useful in scheduling, fractions, and more.</li> <li>Discuss integer overflow for large numbers.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/05-lcm/#numbers-python-java-lcm-easy-interview-gcd","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>lcm</code>, <code>easy</code>, <code>interview</code>, <code>gcd</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/","title":"\ud83e\udde0 Problem: Check if a number is a palindrome","text":"<p>Given an integer n, determine if it reads the same backward as forward.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, palindrome, reverse</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n</li> <li>Output: Boolean, true if n is a palindrome</li> <li>Constraints: n &gt;= 0</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 121\nOutput: true\nInput: 123\nOutput: false\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 121 true 123 false 0 true 9 true 1221 true 12321 true 12345 false","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Reverse Integer\npublic static boolean isPalindrome(int n) {\n    int original = n, reversed = 0;\n    while (n &gt; 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    return original == reversed;\n}\n\n// Method 2: String Conversion\npublic static boolean isPalindromeString(int n) {\n    String s = Integer.toString(n);\n    int left = 0, right = s.length() - 1;\n    while (left &lt; right) {\n        if (s.charAt(left++) != s.charAt(right--)) return false;\n    }\n    return true;\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Reverse Integer\ndef is_palindrome(n):\n    original = n\n    reversed_num = 0\n    while n &gt; 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return original == reversed_num\n\n# Method 2: String Conversion\ndef is_palindrome_string(n):\n    s = str(n)\n    return s == s[::-1]\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Reverse the number and compare to the original.</li> <li>Can also convert to string and check if it reads the same backward.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss string vs. integer approaches.</li> <li>Handle negative numbers if required.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/06-palindrome-number/#numbers-python-java-palindrome-easy-interview-reverse","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>palindrome</code>, <code>easy</code>, <code>interview</code>, <code>reverse</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/","title":"\ud83e\udde0 Problem: Check if a number is an Armstrong number","text":"<p>Given an integer n, determine if it is an Armstrong number (sum of its own digits each raised to the power of the number of digits equals the number itself).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, armstrong, digit-manipulation</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n</li> <li>Output: Boolean, true if n is an Armstrong number</li> <li>Constraints: n &gt;= 0</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 153\nOutput: true\nInput: 123\nOutput: false\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 153 true 370 true 371 true 9474 true 123 false 10 false","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Power Sum\npublic static boolean isArmstrong(int n) {\n    int original = n, sum = 0, digits = String.valueOf(n).length();\n    while (n &gt; 0) {\n        int d = n % 10;\n        sum += Math.pow(d, digits);\n        n /= 10;\n    }\n    return sum == original;\n}\n\n// Method 2: String Conversion\npublic static boolean isArmstrongString(int n) {\n    String s = Integer.toString(n);\n    int sum = 0, digits = s.length();\n    for (char c : s.toCharArray()) {\n        sum += Math.pow(c - '0', digits);\n    }\n    return sum == n;\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Power Sum\ndef is_armstrong(n):\n    digits = len(str(n))\n    total = 0\n    temp = n\n    while temp &gt; 0:\n        d = temp % 10\n        total += d ** digits\n        temp //= 10\n    return total == n\n\n# Method 2: String Conversion\ndef is_armstrong_string(n):\n    s = str(n)\n    digits = len(s)\n    return sum(int(c) ** digits for c in s) == n\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Raise each digit to the power of the number of digits and sum.</li> <li>Can also use string conversion for digit extraction.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss generalization for n-digit numbers.</li> <li>Handle negative numbers if required.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/07-armstrong-number/#numbers-python-java-armstrong-easy-interview-digit-manipulation","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>armstrong</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/","title":"\ud83e\udde0 Problem: Reverse a number","text":"<p>Given an integer n, return its digits reversed.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, reverse, digit-manipulation</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n</li> <li>Output: Integer, reversed number</li> <li>Constraints: n &gt;= 0</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 1234\nOutput: 4321\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 1234 4321 100 1 0 0 9 9 1200 21","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Integer Reversal\npublic static int reverseNumber(int n) {\n    int reversed = 0;\n    while (n &gt; 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    return reversed;\n}\n\n// Method 2: String Conversion\npublic static int reverseNumberString(int n) {\n    String s = Integer.toString(n);\n    StringBuilder sb = new StringBuilder(s).reverse();\n    return Integer.parseInt(sb.toString());\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Integer Reversal\ndef reverse_number(n):\n    reversed_num = 0\n    while n &gt; 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return reversed_num\n\n# Method 2: String Conversion\ndef reverse_number_string(n):\n    return int(str(n)[::-1])\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Extract digits from right to left and build the reversed number.</li> <li>Can also convert to string and reverse.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss handling of negative numbers if required.</li> <li>Watch for integer overflow in Java.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/08-reverse-number/#numbers-python-java-reverse-easy-interview-digit-manipulation","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>reverse</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/","title":"\ud83e\udde0 Problem: Sum of digits of a number","text":"<p>Given an integer n, return the sum of its digits.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, sum, digit-manipulation</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n</li> <li>Output: Integer, sum of digits</li> <li>Constraints: n &gt;= 0</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 1234\nOutput: 10\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 1234 10 0 0 9 9 1001 2 999 27","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\ndef sumOfDigits(int n) {\n    int sum = 0;\n    while (n &gt; 0) {\n        sum += n % 10;\n        n /= 10;\n    }\n    return sum;\n}\n\n// Method 2: String Conversion\ndef sumOfDigitsString(int n) {\n    int sum = 0;\n    for (char c : Integer.toString(n).toCharArray()) {\n        sum += c - '0';\n    }\n    return sum;\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef sum_of_digits(n):\n    total = 0\n    while n &gt; 0:\n        total += n % 10\n        n //= 10\n    return total\n\n# Method 2: String Conversion\ndef sum_of_digits_string(n):\n    return sum(int(c) for c in str(n))\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Extract each digit and add to the sum.</li> <li>Can also convert to string and sum digits.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss handling of negative numbers if required.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/09-sum-of-digits/#numbers-python-java-sum-easy-interview-digit-manipulation","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>sum</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/","title":"\ud83e\udde0 Problem: Count the number of digits in a number","text":"<p>Given an integer n, return the number of digits in n.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, count, digit-manipulation</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n</li> <li>Output: Integer, number of digits</li> <li>Constraints: n &gt;= 0</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 1234\nOutput: 4\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 1234 4 0 1 9 1 1001 4 99999 5","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static int countDigits(int n) {\n    if (n == 0) return 1;\n    int count = 0;\n    while (n &gt; 0) {\n        count++;\n        n /= 10;\n    }\n    return count;\n}\n\n// Method 2: String Conversion\npublic static int countDigitsString(int n) {\n    return Integer.toString(n).length();\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef count_digits(n):\n    if n == 0:\n        return 1\n    count = 0\n    while n &gt; 0:\n        count += 1\n        n //= 10\n    return count\n\n# Method 2: String Conversion\ndef count_digits_string(n):\n    return len(str(n))\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Divide by 10 repeatedly and count the steps.</li> <li>Can also use string conversion for digit count.</li> <li>Special case for n = 0.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss handling of negative numbers if required.</li> <li>Can also use log10 for a mathematical approach.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/10-count-digits/#numbers-python-java-count-easy-interview-digit-manipulation","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>count</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/","title":"\ud83e\udde0 Problem: Sum of first n natural numbers","text":"<p>Given an integer n, return the sum of the first n natural numbers (1 to n).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, sum, formula</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt;= 1)</li> <li>Output: Integer, sum of numbers from 1 to n</li> <li>Constraints: n &gt;= 1</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 5\nOutput: 15\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 1 1 5 15 10 55 100 5050 0 0","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Formula\npublic static int sumN(int n) {\n    return n * (n + 1) / 2;\n}\n\n// Method 2: Iterative\npublic static int sumNIterative(int n) {\n    int sum = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Formula\ndef sum_n(n):\n    return n * (n + 1) // 2\n\n# Method 2: Iterative\ndef sum_n_iterative(n):\n    return sum(range(1, n+1))\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Uses the formula n(n+1)/2 for efficiency.</li> <li>Can also be solved with a loop.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1)/O(n) O(1) Formula/Iterative Python O(1)/O(n) O(1) Formula/Iterative","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both formula and iterative approaches.</li> <li>Handle large n and integer overflow.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/11-sum-n-numbers/#numbers-python-java-sum-easy-interview-formula","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>sum</code>, <code>easy</code>, <code>interview</code>, <code>formula</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/","title":"\ud83e\udde0 Problem: Sum of first n even numbers","text":"<p>Given an integer n, return the sum of the first n even numbers (2, 4, ..., 2n).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, sum, even, formula</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt;= 1)</li> <li>Output: Integer, sum of first n even numbers</li> <li>Constraints: n &gt;= 1</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 3\nOutput: 12\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 1 2 3 12 5 30 10 110 0 0","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Formula\npublic static int sumEven(int n) {\n    return n * (n + 1);\n}\n\n// Method 2: Iterative\npublic static int sumEvenIterative(int n) {\n    int sum = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        sum += 2 * i;\n    }\n    return sum;\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Formula\ndef sum_even(n):\n    return n * (n + 1)\n\n# Method 2: Iterative\ndef sum_even_iterative(n):\n    return sum(2 * i for i in range(1, n+1))\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>The nth even number is 2n, so sum = 2 + 4 + ... + 2n = n(n+1).</li> <li>Can also be solved with a loop.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1)/O(n) O(1) Formula/Iterative Python O(1)/O(n) O(1) Formula/Iterative","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both formula and iterative approaches.</li> <li>Handle large n and integer overflow.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/12-sum-n-even-numbers/#numbers-python-java-sum-even-easy-interview-formula","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>sum</code>, <code>even</code>, <code>easy</code>, <code>interview</code>, <code>formula</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/","title":"\ud83e\udde0 Problem: Sum of first n odd numbers","text":"<p>Given an integer n, return the sum of the first n odd numbers (1, 3, ..., 2n-1).</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, sum, odd, formula</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt;= 1)</li> <li>Output: Integer, sum of first n odd numbers</li> <li>Constraints: n &gt;= 1</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 3\nOutput: 9\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 1 1 3 9 5 25 10 100 0 0","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Formula\npublic static int sumOdd(int n) {\n    return n * n;\n}\n\n// Method 2: Iterative\npublic static int sumOddIterative(int n) {\n    int sum = 0, odd = 1;\n    for (int i = 0; i &lt; n; i++) {\n        sum += odd;\n        odd += 2;\n    }\n    return sum;\n}\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Formula\ndef sum_odd(n):\n    return n * n\n\n# Method 2: Iterative\ndef sum_odd_iterative(n):\n    total = 0\n    odd = 1\n    for _ in range(n):\n        total += odd\n        odd += 2\n    return total\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>The sum of the first n odd numbers is n^2.</li> <li>Can also be solved with a loop.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1)/O(n) O(1) Formula/Iterative Python O(1)/O(n) O(1) Formula/Iterative","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both formula and iterative approaches.</li> <li>Handle large n and integer overflow.</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/13-sum-n-odd-numbers/#numbers-python-java-sum-odd-easy-interview-formula","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>sum</code>, <code>odd</code>, <code>easy</code>, <code>interview</code>, <code>formula</code>","text":"","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/14-power-of-two/","title":"\ud83e\udde0 Problem: Check if a number is a power of two","text":"<p>Given an integer n, determine if it is a power of two.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, power-of-two, bitwise</p>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n</li> <li>Output: Boolean, true if n is a power of two</li> <li>Constraints: n &gt; 0</li> </ul>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 16\nOutput: true\nInput: 18\nOutput: false\n</code></pre>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#test-cases","title":"\ud83e\uddea Test Cases","text":"Input Output 1 true 2 true 3 false 8 true 16 true 18 false 0 false -4 false","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Bitwise\npublic static boolean isPowerOfTwo(int n) {\n    return n &gt; 0 &amp;&amp; (n &amp; (n - 1)) == 0;\n}\n\n// Method 2: Iterative\npublic static boolean isPowerOfTwoIterative(int n) {\n    if (n &lt;= 0) return false;\n    while (n % 2 == 0) n /= 2;\n    return n == 1;\n}\n</code></pre>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Bitwise\ndef is_power_of_two(n):\n    return n &gt; 0 and (n &amp; (n - 1)) == 0\n\n# Method 2: Iterative\ndef is_power_of_two_iterative(n):\n    if n &lt;= 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n</code></pre>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Bitwise: Only powers of two have a single 1 in binary.</li> <li>Iterative: Divide by 2 until 1.</li> </ul>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1)/O(log n) O(1) Bitwise/Iterative Python O(1)/O(log n) O(1) Bitwise/Iterative","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both bitwise and iterative approaches.</li> <li>Handle n &lt;= 0 as a special case.</li> </ul>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/14-power-of-two/#numbers-python-java-power-of-two-easy-interview-bitwise","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>power-of-two</code>, <code>easy</code>, <code>interview</code>, <code>bitwise</code>","text":"","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/","title":"\ud83e\udde0 Problem: Count the number of set bits in a number","text":"<p>Given an integer n, return the number of 1s in its binary representation.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, set-bits, bitwise</p>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt;= 0)</li> <li>Output: Integer, number of set bits</li> <li>Constraints: n &gt;= 0</li> </ul>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 13\nOutput: 3\n</code></pre>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Brian Kernighan's Algorithm\npublic static int countSetBits(int n) {\n    int count = 0;\n    while (n &gt; 0) {\n        n &amp;= (n - 1);\n        count++;\n    }\n    return count;\n}\n\n// Method 2: Simple Loop\npublic static int countSetBitsSimple(int n) {\n    int count = 0;\n    while (n &gt; 0) {\n        count += n &amp; 1;\n        n &gt;&gt;= 1;\n    }\n    return count;\n}\n</code></pre>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-method-1-brian-kernighans-algorithm-def-count_set_bitsn-count-0-while-n-0-n-n-1-count-1-return-count-method-2-simple-loop-def-count_set_bits_simplen-count-0-while-n-0-count-n-1-n-1-return-count","title":"<pre><code># Method 1: Brian Kernighan's Algorithm\ndef count_set_bits(n):\n    count = 0\n    while n &gt; 0:\n        n &amp;= n - 1\n        count += 1\n    return count\n\n# Method 2: Simple Loop\ndef count_set_bits_simple(n):\n    count = 0\n    while n &gt; 0:\n        count += n &amp; 1\n        n &gt;&gt;= 1\n    return count\n</code></pre>","text":"","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Brian Kernighan's: Removes the lowest set bit each time.</li> <li>Simple loop: Checks each bit.</li> </ul>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(k)/O(log n) O(1) k = set bits Python O(k)/O(log n) O(1) k = set bits","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both methods and their efficiency.</li> <li>Useful in bitmasking, cryptography, etc.</li> </ul>","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/15-count-set-bits/#numbers-python-java-set-bits-easy-interview-bitwise","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>set-bits</code>, <code>easy</code>, <code>interview</code>, <code>bitwise</code>","text":"","tags":["java","python","numbers","easy","bit-manipulation"]},{"location":"practice-programs-hub/numbers/16-swap-numbers/","title":"\ud83e\udde0 Problem: Swap two numbers without a temporary variable","text":"<p>Given two integers a and b, swap their values without using a third variable.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, swap, bitwise, arithmetic</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/16-swap-numbers/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Two integers a, b</li> <li>Output: Swapped values of a and b</li> <li>Constraints: Any integers</li> </ul>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/16-swap-numbers/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: a = 5, b = 7\nOutput: a = 7, b = 5\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/16-swap-numbers/#test-cases","title":"\ud83e\uddea Test Cases","text":"<pre><code>Input: a = 1, b = 2   =&gt; Output: a = 2, b = 1\nInput: a = -3, b = 4  =&gt; Output: a = 4, b = -3\nInput: a = 0, b = 0   =&gt; Output: a = 0, b = 0\nInput: a = 100, b = -100 =&gt; Output: a = -100, b = 100\n</code></pre>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/16-swap-numbers/#java-solution","title":"\u2615 Java Solution","text":"<p>```</p>","tags":["java","python","numbers","easy","language-syntax"]},{"location":"practice-programs-hub/numbers/17-generate-primes/","title":"\ud83e\udde0 Problem: Generate all prime numbers up to n","text":"<p>Given an integer n, return a list of all prime numbers less than or equal to n.</p> <p>Category: Numbers Difficulty: Medium Tags: numbers, primes, sieve, brute-force</p>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt;= 2)</li> <li>Output: List of primes &lt;= n</li> <li>Constraints: n &gt;= 2</li> </ul>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 10\nOutput: [2, 3, 5, 7]\n</code></pre>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#test-cases","title":"\ud83e\uddea Test Cases","text":"<pre><code>Input: 2   =&gt; Output: [2]\nInput: 20  =&gt; Output: [2, 3, 5, 7, 11, 13, 17, 19]\nInput: 1   =&gt; Output: [] (invalid, n &gt;= 2)\nInput: 30  =&gt; Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n</code></pre>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Sieve of Eratosthenes\npublic static List&lt;Integer&gt; sieve(int n) {\n    boolean[] isPrime = new boolean[n + 1];\n    Arrays.fill(isPrime, true);\n    isPrime[0] = isPrime[1] = false;\n    for (int i = 2; i * i &lt;= n; i++) {\n        if (isPrime[i]) {\n            for (int j = i * i; j &lt;= n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n    }\n    List&lt;Integer&gt; primes = new ArrayList&lt;&gt;();\n    for (int i = 2; i &lt;= n; i++) {\n        if (isPrime[i]) primes.add(i);\n    }\n    return primes;\n}\n\n// Method 2: Brute Force\npublic static List&lt;Integer&gt; bruteForcePrimes(int n) {\n    List&lt;Integer&gt; primes = new ArrayList&lt;&gt;();\n    for (int i = 2; i &lt;= n; i++) {\n        boolean isPrime = true;\n        for (int j = 2; j * j &lt;= i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) primes.add(i);\n    }\n    return primes;\n}\n</code></pre>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Sieve of Eratosthenes\ndef sieve(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0:2] = [False, False]\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n    return [i for i, prime in enumerate(is_prime) if prime]\n\n# Method 2: Brute Force\ndef brute_force_primes(n):\n    primes = []\n    for i in range(2, n + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n</code></pre>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sieve: Efficiently marks non-primes.</li> <li>Brute force: Checks each number for primality.</li> </ul>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n log log n)/O(n^2) O(n)/O(1) Sieve/Brute Python O(n log log n)/O(n^2) O(n)/O(1) Sieve/Brute","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both methods and their trade-offs.</li> <li>Sieve is preferred for large n.</li> </ul>","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/17-generate-primes/#numbers-python-java-primes-medium-interview-sieve-brute-force","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>primes</code>, <code>medium</code>, <code>interview</code>, <code>sieve</code>, <code>brute-force</code>","text":"","tags":["java","python","numbers","medium","sieve"]},{"location":"practice-programs-hub/numbers/18-prime-factors/","title":"\ud83e\udde0 Problem: Find all prime factors of a number","text":"<p>Given an integer n, return a list of its prime factors.</p> <p>Category: Numbers Difficulty: Medium Tags: numbers, prime-factors, factorization</p>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Integer n (n &gt; 1)</li> <li>Output: List of prime factors</li> <li>Constraints: n &gt; 1</li> </ul>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: 60\nOutput: [2, 2, 3, 5]\n</code></pre>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#test-cases","title":"\ud83e\uddea Test Cases","text":"<pre><code>Input: 13   =&gt; Output: [13]\nInput: 100  =&gt; Output: [2, 2, 5, 5]\nInput: 1    =&gt; Output: [] (invalid, n &gt; 1)\nInput: 84   =&gt; Output: [2, 2, 3, 7]\n</code></pre>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Trial Division\npublic static List&lt;Integer&gt; primeFactors(int n) {\n    List&lt;Integer&gt; factors = new ArrayList&lt;&gt;();\n    for (int i = 2; i * i &lt;= n; i++) {\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n    }\n    if (n &gt; 1) factors.add(n);\n    return factors;\n}\n\n// Method 2: Using Sieve (for multiple queries)\n// Precompute primes with sieve, then use for factorization\n// See: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n</code></pre>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Trial Division\ndef prime_factors(n):\n    factors = []\n    i = 2\n    while i * i &lt;= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n &gt; 1:\n        factors.append(n)\n    return factors\n\n# Method 2: Using Sieve (for multiple queries)\n# Precompute primes with sieve, then use for factorization\n# See: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n</code></pre>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Trial division: Divide by each integer up to sqrt(n).</li> <li>Sieve: Useful for repeated queries.</li> </ul>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(\u221an) O(log n) Trial division Python O(\u221an) O(log n) Trial division","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss both methods and their use cases.</li> <li>Sieve is efficient for many queries.</li> </ul>","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/18-prime-factors/#numbers-python-java-prime-factors-medium-interview-factorization","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>prime-factors</code>, <code>medium</code>, <code>interview</code>, <code>factorization</code>","text":"","tags":["java","python","numbers","medium","factorization"]},{"location":"practice-programs-hub/numbers/19-find-largest-number/","title":"\ud83e\udde0 Problem: Find the largest number in an array","text":"<p>Given an array of integers, return the largest number.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, array, max</p>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/19-find-largest-number/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Array of integers</li> <li>Output: Integer, largest number in the array</li> <li>Constraints: Array is non-empty</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/19-find-largest-number/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 7, 2, 9, 4]\nOutput: 9\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/19-find-largest-number/#test-cases","title":"\ud83e\uddea Test Cases","text":"<pre><code>Input: [1]           =&gt; Output: 1\nInput: [-5, -2, -9]  =&gt; Output: -2\nInput: [0, 0, 0]     =&gt; Output: 0\nInput: [100, 50, 99] =&gt; Output: 100\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/19-find-largest-number/#java-solution","title":"\u2615 Java Solution","text":"<p>```</p>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/","title":"\ud83e\udde0 Problem: Find the smallest number in an array","text":"<p>Given an array of integers, return the smallest number.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, array, min</p>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Array of integers</li> <li>Output: Integer, smallest number in the array</li> <li>Constraints: Array is non-empty</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 7, 2, 9, 4]\nOutput: 2\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static int findMin(int[] arr) {\n    int min = arr[0];\n    for (int i = 1; i &lt; arr.length; i++) {\n        if (arr[i] &lt; min) min = arr[i];\n    }\n    return min;\n}\n\n// Method 2: Using Java Streams\npublic static int findMinStream(int[] arr) {\n    return Arrays.stream(arr).min().getAsInt();\n}\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#1-2-3-4-5-6-7-8-9-10-11-method-1-iterative-def-find_minarr-min_val-arr0-for-num-in-arr1-if-num-min_val-min_val-num-return-min_val-method-2-using-built-in-def-find_min_builtinarr-return-minarr","title":"<pre><code># Method 1: Iterative\ndef find_min(arr):\n    min_val = arr[0]\n    for num in arr[1:]:\n        if num &lt; min_val:\n            min_val = num\n    return min_val\n\n# Method 2: Using built-in\ndef find_min_builtin(arr):\n    return min(arr)\n</code></pre>","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate through the array and keep track of the minimum value.</li> <li>Can also use built-in functions for simplicity.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = array length Python O(n) O(1) n = array length","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (all positive numbers, single element).</li> <li>Built-in functions are preferred for readability.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/20-find-smallest-number/#numbers-python-java-min-easy-interview-array","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>min</code>, <code>easy</code>, <code>interview</code>, <code>array</code>","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/","title":"\ud83e\udde0 Problem: Sum of all elements in an array","text":"<p>Given an array of integers, return the sum of all elements.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, array, sum</p>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Array of integers</li> <li>Output: Integer, sum of all elements</li> <li>Constraints: Array is non-empty</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 7, 2, 9, 4]\nOutput: 25\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static int sumArray(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return sum;\n}\n\n// Method 2: Using Java Streams\npublic static int sumArrayStream(int[] arr) {\n    return Arrays.stream(arr).sum();\n}\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Method 2: Using built-in\ndef sum_array_builtin(arr):\n    return sum(arr)\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate through the array and add each element to the sum.</li> <li>Can also use built-in functions for simplicity.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = array length Python O(n) O(1) n = array length","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (empty array, single element).</li> <li>Built-in functions are preferred for readability.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/21-sum-of-array/#numbers-python-java-sum-easy-interview-array","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>sum</code>, <code>easy</code>, <code>interview</code>, <code>array</code>","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/","title":"\ud83e\udde0 Problem: Find the average of elements in an array","text":"<p>Given an array of integers, return the average (mean) of all elements.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, array, average</p>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Array of integers</li> <li>Output: Float/Double, average of all elements</li> <li>Constraints: Array is non-empty</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 7, 2, 9, 4]\nOutput: 5.0\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static double averageArray(int[] arr) {\n    int sum = 0;\n    for (int num : arr) {\n        sum += num;\n    }\n    return (double) sum / arr.length;\n}\n\n// Method 2: Using Java Streams\npublic static double averageArrayStream(int[] arr) {\n    return Arrays.stream(arr).average().orElse(0.0);\n}\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef average_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total / len(arr)\n\n# Method 2: Using built-in\ndef average_array_builtin(arr):\n    return sum(arr) / len(arr)\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sum all elements and divide by the length of the array.</li> <li>Can also use built-in functions for simplicity.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = array length Python O(n) O(1) n = array length","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (empty array, integer division).</li> <li>Built-in functions are preferred for readability.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/22-average-of-array/#numbers-python-java-average-easy-interview-array","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>average</code>, <code>easy</code>, <code>interview</code>, <code>array</code>","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/","title":"\ud83e\udde0 Problem: Find the second largest number in an array","text":"<p>Given an array of integers, return the second largest number.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, array, second-largest</p>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Array of integers (length &gt;= 2)</li> <li>Output: Integer, second largest number in the array</li> <li>Constraints: Array has at least two distinct elements</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 7, 2, 9, 4]\nOutput: 7\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static int secondLargest(int[] arr) {\n    int max = Integer.MIN_VALUE, second = Integer.MIN_VALUE;\n    for (int num : arr) {\n        if (num &gt; max) {\n            second = max;\n            max = num;\n        } else if (num &gt; second &amp;&amp; num != max) {\n            second = num;\n        }\n    }\n    return second;\n}\n\n// Method 2: Sorting\npublic static int secondLargestSort(int[] arr) {\n    int[] sorted = Arrays.copyOf(arr, arr.length);\n    Arrays.sort(sorted);\n    for (int i = sorted.length - 2; i &gt;= 0; i--) {\n        if (sorted[i] != sorted[sorted.length - 1]) return sorted[i];\n    }\n    return Integer.MIN_VALUE; // if no second largest\n}\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef second_largest(arr):\n    max_val = second = float('-inf')\n    for num in arr:\n        if num &gt; max_val:\n            second = max_val\n            max_val = num\n        elif num &gt; second and num != max_val:\n            second = num\n    return second\n\n# Method 2: Sorting\ndef second_largest_sort(arr):\n    sorted_arr = sorted(arr)\n    for i in range(len(sorted_arr) - 2, -1, -1):\n        if sorted_arr[i] != sorted_arr[-1]:\n            return sorted_arr[i]\n    return float('-inf') # if no second largest\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate and track max and second max.</li> <li>Can also sort and find the second largest.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n)/O(n log n) O(1)/O(n) Iterative/Sorting Python O(n)/O(n log n) O(1)/O(n) Iterative/Sorting","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (duplicates, all same values).</li> <li>Sorting is less efficient but simple.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/23-find-second-largest/#numbers-python-java-second-largest-easy-interview-array","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>second-largest</code>, <code>easy</code>, <code>interview</code>, <code>array</code>","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/","title":"\ud83e\udde0 Problem: Find the second smallest number in an array","text":"<p>Given an array of integers, return the second smallest number.</p> <p>Category: Numbers Difficulty: Easy Tags: numbers, array, second-smallest</p>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Array of integers (length &gt;= 2)</li> <li>Output: Integer, second smallest number in the array</li> <li>Constraints: Array has at least two distinct elements</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: [3, 7, 2, 9, 4]\nOutput: 3\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// Method 1: Iterative\npublic static int secondSmallest(int[] arr) {\n    int min = Integer.MAX_VALUE, second = Integer.MAX_VALUE;\n    for (int num : arr) {\n        if (num &lt; min) {\n            second = min;\n            min = num;\n        } else if (num &lt; second &amp;&amp; num != min) {\n            second = num;\n        }\n    }\n    return second;\n}\n\n// Method 2: Sorting\npublic static int secondSmallestSort(int[] arr) {\n    int[] sorted = Arrays.copyOf(arr, arr.length);\n    Arrays.sort(sorted);\n    for (int i = 1; i &lt; sorted.length; i++) {\n        if (sorted[i] != sorted[0]) return sorted[i];\n    }\n    return Integer.MAX_VALUE; // if no second smallest\n}\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># Method 1: Iterative\ndef second_smallest(arr):\n    min_val = second = float('inf')\n    for num in arr:\n        if num &lt; min_val:\n            second = min_val\n            min_val = num\n        elif num &lt; second and num != min_val:\n            second = num\n    return second\n\n# Method 2: Sorting\ndef second_smallest_sort(arr):\n    sorted_arr = sorted(arr)\n    for i in range(1, len(sorted_arr)):\n        if sorted_arr[i] != sorted_arr[0]:\n            return sorted_arr[i]\n    return float('inf') # if no second smallest\n</code></pre>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate and track min and second min.</li> <li>Can also sort and find the second smallest.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n)/O(n log n) O(1)/O(n) Iterative/Sorting Python O(n)/O(n log n) O(1)/O(n) Iterative/Sorting","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (duplicates, all same values).</li> <li>Sorting is less efficient but simple.</li> </ul>","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#tags","title":"\ud83c\udff7 Tags","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/24-find-second-smallest/#numbers-python-java-second-smallest-easy-interview-array","title":"<code>numbers</code>, <code>python</code>, <code>java</code>, <code>second-smallest</code>, <code>easy</code>, <code>interview</code>, <code>array</code>","text":"","tags":["java","python","numbers","array","easy"]},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/","title":"Swap Two Numbers","text":"<p>Number Problem 25: Swap Two Numbers</p>  Given two numbers, swap their values without using a third variable (and with a third variable, for completeness)."},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/#example","title":"Example","text":"<ul> <li>Input: <code>a = 5, b = 7</code></li> <li>Output: <code>a = 7, b = 5</code></li> </ul>"},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/#java-solutions","title":"Java Solutions","text":"<pre><code>// Using a third variable\nint temp = a;\na = b;\nb = temp;\n\n// Without using a third variable (arithmetic)\na = a + b;\nb = a - b;\na = a - b;\n\n// Without using a third variable (bitwise XOR)\na = a ^ b;\nb = a ^ b;\na = a ^ b;\n</code></pre>"},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/#python-solutions","title":"Python Solutions","text":"<pre><code># Using a third variable\ntemp = a\na = b\nb = temp\n\n# Without using a third variable (arithmetic)\na = a + b\nb = a - b\na = a - b\n\n# Without using a third variable (tuple unpacking)\na, b = b, a\n</code></pre>"},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Swapping with a third variable is the classic approach.</li> <li>Arithmetic and bitwise (XOR) swaps avoid extra space, but be careful with overflow (arithmetic) and types (XOR).</li> <li>In Python, tuple unpacking is the most idiomatic.</li> </ul>"},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1) O(1) All methods Python O(1) O(1) All methods"},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be ready to explain why XOR/arithmetic swaps work.</li> <li>Discuss integer overflow for arithmetic swap in Java.</li> <li>Tuple unpacking is Pythonic and preferred in interviews.</li> </ul>"},{"location":"practice-programs-hub/numbers/25-swap-two-numbers/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>swap</code>, <code>easy</code>, <code>interview</code>, <code>bitwise</code>, <code>arithmetic</code></p>"},{"location":"practice-programs-hub/numbers/26-reverse-number/","title":"Reverse a Number","text":"<p>Number Problem 26: Reverse a Number</p>  Given an integer, reverse its digits."},{"location":"practice-programs-hub/numbers/26-reverse-number/#example","title":"Example","text":"<ul> <li>Input: <code>12345</code></li> <li>Output: <code>54321</code></li> </ul>"},{"location":"practice-programs-hub/numbers/26-reverse-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Iterative\nint rev = 0;\nwhile (n != 0) {\n    rev = rev * 10 + n % 10;\n    n /= 10;\n}\n\n// Using StringBuilder\nString revStr = new StringBuilder(Integer.toString(n)).reverse().toString();\nint revNum = Integer.parseInt(revStr);\n</code></pre>"},{"location":"practice-programs-hub/numbers/26-reverse-number/#python-solutions","title":"Python Solutions","text":""},{"location":"practice-programs-hub/numbers/26-reverse-number/#1-2-3-4-5-6-7-8-9-iterative-rev-0-num-n-while-num-0-rev-rev-10-num-10-num-10-using-string-slicing-rev-intstrn-1","title":"<pre><code># Iterative\nrev = 0\nnum = n\nwhile num != 0:\n    rev = rev * 10 + num % 10\n    num //= 10\n\n# Using string slicing\nrev = int(str(n)[::-1])\n</code></pre>","text":""},{"location":"practice-programs-hub/numbers/26-reverse-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Extract digits from right to left and build the reversed number.</li> <li>String conversion is a quick alternative, but iterative is more universal.</li> <li>Watch for leading zeros in the reversed result.</li> </ul>"},{"location":"practice-programs-hub/numbers/26-reverse-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/26-reverse-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss handling of negative numbers if required.</li> <li>Watch for integer overflow in Java.</li> <li>String slicing is Pythonic, but iterative is language-agnostic.</li> </ul>"},{"location":"practice-programs-hub/numbers/26-reverse-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>reverse</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code></p>"},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/","title":"Check Armstrong Number","text":"<p>Number Problem 27: Check Armstrong Number</p>  Check if a number is an Armstrong number (sum of its own digits each raised to the power of the number of digits equals the number itself)."},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#example","title":"Example","text":"<ul> <li>Input: <code>153</code></li> <li>Output: <code>True</code> (since 1\u00b3 + 5\u00b3 + 3\u00b3 = 153)</li> </ul>"},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Armstrong check\nint num = n, sum = 0, digits = 0, temp = n;\nwhile (temp != 0) {\n    digits++;\n    temp /= 10;\n}\ntemp = n;\nwhile (temp != 0) {\n    int d = temp % 10;\n    sum += Math.pow(d, digits);\n    temp /= 10;\n}\nboolean isArmstrong = (sum == n);\n</code></pre>"},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#python-solutions","title":"Python Solutions","text":""},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#1-2-3-4-5-6-7-8-9-armstrong-check-digits-lenstrn-sum_-0-temp-n-while-temp-0-d-temp-10-sum_-d-digits-temp-10-is_armstrong-sum_-n","title":"<pre><code># Armstrong check\ndigits = len(str(n))\nsum_ = 0\ntemp = n\nwhile temp != 0:\n    d = temp % 10\n    sum_ += d ** digits\n    temp //= 10\nis_armstrong = (sum_ == n)\n</code></pre>","text":""},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Raise each digit to the power of the number of digits and sum.</li> <li>Can also use string conversion for digit extraction.</li> </ul>"},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss generalization for n-digit numbers.</li> <li>Handle negative numbers if required.</li> </ul>"},{"location":"practice-programs-hub/numbers/27-check-armstrong-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>armstrong</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code></p>"},{"location":"practice-programs-hub/numbers/28-check-perfect-number/","title":"Check Perfect Number","text":"<p>Number Problem 28: Check Perfect Number</p>  Check if a number is a perfect number (sum of its proper divisors equals the number itself)."},{"location":"practice-programs-hub/numbers/28-check-perfect-number/#example","title":"Example","text":"<ul> <li>Input: <code>28</code></li> <li>Output: <code>True</code> (since 1 + 2 + 4 + 7 + 14 = 28)</li> </ul>"},{"location":"practice-programs-hub/numbers/28-check-perfect-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Perfect number check\nint sum = 0;\nfor (int i = 1; i &lt;= n / 2; i++) {\n    if (n % i == 0) sum += i;\n}\nboolean isPerfect = (sum == n);\n</code></pre>"},{"location":"practice-programs-hub/numbers/28-check-perfect-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Perfect number check\nsum_ = 0\nfor i in range(1, n // 2 + 1):\n    if n % i == 0:\n        sum_ += i\nis_perfect = (sum_ == n)\n</code></pre>"},{"location":"practice-programs-hub/numbers/28-check-perfect-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sum all proper divisors (excluding the number itself) and compare to the number.</li> <li>Only need to check up to n/2 for divisors.</li> </ul>"},{"location":"practice-programs-hub/numbers/28-check-perfect-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = input number Python O(n) O(1) n = input number"},{"location":"practice-programs-hub/numbers/28-check-perfect-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss known perfect numbers (6, 28, 496, ...).</li> <li>Efficient algorithms exist for large n, but brute force is common in interviews.</li> </ul>"},{"location":"practice-programs-hub/numbers/28-check-perfect-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>perfect</code>, <code>easy</code>, <code>interview</code>, <code>divisors</code></p>"},{"location":"practice-programs-hub/numbers/29-check-abundant-number/","title":"Check Abundant Number","text":"<p>Number Problem 29: Check Abundant Number</p>  Check if a number is an abundant number (sum of its proper divisors is greater than the number itself)."},{"location":"practice-programs-hub/numbers/29-check-abundant-number/#example","title":"Example","text":"<ul> <li>Input: <code>12</code></li> <li>Output: <code>True</code> (since 1 + 2 + 3 + 4 + 6 = 16 &gt; 12)</li> </ul>"},{"location":"practice-programs-hub/numbers/29-check-abundant-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Abundant number check\nint sum = 0;\nfor (int i = 1; i &lt;= n / 2; i++) {\n    if (n % i == 0) sum += i;\n}\nboolean isAbundant = (sum &gt; n);\n</code></pre>"},{"location":"practice-programs-hub/numbers/29-check-abundant-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Abundant number check\nsum_ = 0\nfor i in range(1, n // 2 + 1):\n    if n % i == 0:\n        sum_ += i\nis_abundant = (sum_ &gt; n)\n</code></pre>"},{"location":"practice-programs-hub/numbers/29-check-abundant-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sum all proper divisors (excluding the number itself) and check if the sum is greater than the number.</li> <li>Similar to perfect number, but sum &gt; n.</li> </ul>"},{"location":"practice-programs-hub/numbers/29-check-abundant-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = input number Python O(n) O(1) n = input number"},{"location":"practice-programs-hub/numbers/29-check-abundant-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss the difference between perfect, deficient, and abundant numbers.</li> <li>Abundant numbers are more common than perfect numbers.</li> </ul>"},{"location":"practice-programs-hub/numbers/29-check-abundant-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>abundant</code>, <code>easy</code>, <code>interview</code>, <code>divisors</code></p>"},{"location":"practice-programs-hub/numbers/30-check-harshad-number/","title":"Check Harshad Number","text":"<p>Number Problem 30: Check Harshad Number</p>  Check if a number is a Harshad number (divisible by the sum of its digits)."},{"location":"practice-programs-hub/numbers/30-check-harshad-number/#example","title":"Example","text":"<ul> <li>Input: <code>18</code></li> <li>Output: <code>True</code> (since 1 + 8 = 9, and 18 % 9 == 0)</li> </ul>"},{"location":"practice-programs-hub/numbers/30-check-harshad-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Harshad number check\nint sum = 0, temp = n;\nwhile (temp != 0) {\n    sum += temp % 10;\n    temp /= 10;\n}\nboolean isHarshad = (n % sum == 0);\n</code></pre>"},{"location":"practice-programs-hub/numbers/30-check-harshad-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Harshad number check\nsum_ = sum(int(d) for d in str(n))\nis_harshad = (n % sum_ == 0)\n</code></pre>"},{"location":"practice-programs-hub/numbers/30-check-harshad-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A Harshad (Niven) number is divisible by the sum of its digits.</li> <li>Calculate the digit sum, then check divisibility.</li> </ul>"},{"location":"practice-programs-hub/numbers/30-check-harshad-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/30-check-harshad-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss the relationship between Harshad and Niven numbers.</li> <li>Handle negative numbers if required.</li> </ul>"},{"location":"practice-programs-hub/numbers/30-check-harshad-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>harshad</code>, <code>niven</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code></p>"},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/","title":"Check Automorphic Number","text":"<p>Number Problem 31: Check Automorphic Number</p>  Check if a number is an automorphic number (its square ends with the number itself)."},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/#example","title":"Example","text":"<ul> <li>Input: <code>76</code></li> <li>Output: <code>True</code> (since 76\u00b2 = 5776 ends with 76)</li> </ul>"},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Automorphic check\nint sq = n * n;\nString nStr = Integer.toString(n);\nString sqStr = Integer.toString(sq);\nboolean isAutomorphic = sqStr.endsWith(nStr);\n</code></pre>"},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Automorphic check\nsq = n * n\nis_automorphic = str(sq).endswith(str(n))\n</code></pre>"},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>An automorphic number's square ends with the number itself.</li> <li>Convert both to strings and check the suffix.</li> </ul>"},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(d) d = number of digits Python O(d) O(d) d = number of digits"},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss string vs. numeric approaches.</li> <li>Automorphic numbers are rare; know a few examples (5, 6, 25, 76, ...).</li> </ul>"},{"location":"practice-programs-hub/numbers/31-check-automorphic-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>automorphic</code>, <code>easy</code>, <code>interview</code>, <code>suffix</code></p>"},{"location":"practice-programs-hub/numbers/32-check-neon-number/","title":"Check Neon Number","text":"<p>Number Problem 32: Check Neon Number</p>  Check if a number is a neon number (sum of digits of its square is equal to the number itself)."},{"location":"practice-programs-hub/numbers/32-check-neon-number/#example","title":"Example","text":"<ul> <li>Input: <code>9</code></li> <li>Output: <code>True</code> (since 9\u00b2 = 81, 8 + 1 = 9)</li> </ul>"},{"location":"practice-programs-hub/numbers/32-check-neon-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Neon check\nint sq = n * n, sum = 0;\nwhile (sq != 0) {\n    sum += sq % 10;\n    sq /= 10;\n}\nboolean isNeon = (sum == n);\n</code></pre>"},{"location":"practice-programs-hub/numbers/32-check-neon-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Neon check\nsq = n * n\nsum_ = sum(int(d) for d in str(sq))\nis_neon = (sum_ == n)\n</code></pre>"},{"location":"practice-programs-hub/numbers/32-check-neon-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A neon number's square's digit sum equals the number itself.</li> <li>Calculate n\u00b2, sum its digits, and compare to n.</li> </ul>"},{"location":"practice-programs-hub/numbers/32-check-neon-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = digits in n\u00b2 Python O(d) O(1) d = digits in n\u00b2"},{"location":"practice-programs-hub/numbers/32-check-neon-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Only a few neon numbers exist (0, 1, 9).</li> <li>Discuss digit extraction methods.</li> </ul>"},{"location":"practice-programs-hub/numbers/32-check-neon-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>neon</code>, <code>easy</code>, <code>interview</code>, <code>digit-sum</code></p>"},{"location":"practice-programs-hub/numbers/33-check-spy-number/","title":"Check Spy Number","text":"<p>Number Problem 33: Check Spy Number</p>  Check if a number is a spy number (sum of its digits equals the product of its digits)."},{"location":"practice-programs-hub/numbers/33-check-spy-number/#example","title":"Example","text":"<ul> <li>Input: <code>1124</code></li> <li>Output: <code>True</code> (since 1+1+2+4 = 8 and 1\u00d71\u00d72\u00d74 = 8)</li> </ul>"},{"location":"practice-programs-hub/numbers/33-check-spy-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Spy number check\nint sum = 0, prod = 1, temp = n;\nwhile (temp != 0) {\n    int d = temp % 10;\n    sum += d;\n    prod *= d;\n    temp /= 10;\n}\nboolean isSpy = (sum == prod);\n</code></pre>"},{"location":"practice-programs-hub/numbers/33-check-spy-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Spy number check\nsum_ = 0\nprod = 1\ntemp = n\nwhile temp != 0:\n    d = temp % 10\n    sum_ += d\n    prod *= d\n    temp //= 10\nis_spy = (sum_ == prod)\n</code></pre>"},{"location":"practice-programs-hub/numbers/33-check-spy-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A spy number has equal sum and product of its digits.</li> <li>Extract digits, compute both, and compare.</li> </ul>"},{"location":"practice-programs-hub/numbers/33-check-spy-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/33-check-spy-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (zero digits, single digit numbers).</li> <li>Spy numbers are rare; know a few examples (1124, 123, ...).</li> </ul>"},{"location":"practice-programs-hub/numbers/33-check-spy-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>spy</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code></p>"},{"location":"practice-programs-hub/numbers/34-check-magic-number/","title":"Check Magic Number","text":"<p>Number Problem 34: Check Magic Number</p>  A magic number is a number whose repeated sum of digits eventually becomes 1."},{"location":"practice-programs-hub/numbers/34-check-magic-number/#example","title":"Example","text":"<ul> <li>Input: <code>19</code></li> <li>Output: <code>True</code> (since 1+9=10, 1+0=1)</li> </ul>"},{"location":"practice-programs-hub/numbers/34-check-magic-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Magic number check\nint temp = n;\nwhile (temp &gt; 9) {\n    int sum = 0;\n    while (temp != 0) {\n        sum += temp % 10;\n        temp /= 10;\n    }\n    temp = sum;\n}\nboolean isMagic = (temp == 1);\n</code></pre>"},{"location":"practice-programs-hub/numbers/34-check-magic-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Magic number check\ntemp = n\nwhile temp &gt; 9:\n    sum_ = 0\n    while temp != 0:\n        sum_ += temp % 10\n        temp //= 10\n    temp = sum_\nis_magic = (temp == 1)\n</code></pre>"},{"location":"practice-programs-hub/numbers/34-check-magic-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A magic number reduces to 1 by repeatedly summing its digits.</li> <li>Similar to digital root calculation.</li> </ul>"},{"location":"practice-programs-hub/numbers/34-check-magic-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d^2) O(1) d = number of digits Python O(d^2) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/34-check-magic-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss digital root and its properties.</li> <li>Magic numbers are a fun interview question for recursion/loops.</li> </ul>"},{"location":"practice-programs-hub/numbers/34-check-magic-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>magic</code>, <code>easy</code>, <code>interview</code>, <code>digital-root</code></p>"},{"location":"practice-programs-hub/numbers/35-check-happy-number/","title":"Check Happy Number","text":"<p>Number Problem 35: Check Happy Number</p>  A happy number is a number which eventually reaches 1 when replaced by the sum of the squares of its digits repeatedly."},{"location":"practice-programs-hub/numbers/35-check-happy-number/#example","title":"Example","text":"<ul> <li>Input: <code>19</code></li> <li>Output: <code>True</code> (since 1\u00b2+9\u00b2=82, 8\u00b2+2\u00b2=68, 6\u00b2+8\u00b2=100, 1\u00b2+0\u00b2+0\u00b2=1)</li> </ul>"},{"location":"practice-programs-hub/numbers/35-check-happy-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Happy number check\nSet&lt;Integer&gt; seen = new HashSet&lt;&gt;();\nint temp = n;\nwhile (temp != 1 &amp;&amp; !seen.contains(temp)) {\n    seen.add(temp);\n    int sum = 0;\n    while (temp != 0) {\n        int d = temp % 10;\n        sum += d * d;\n        temp /= 10;\n    }\n    temp = sum;\n}\nboolean isHappy = (temp == 1);\n</code></pre>"},{"location":"practice-programs-hub/numbers/35-check-happy-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Happy number check\nseen = set()\ntemp = n\nwhile temp != 1 and temp not in seen:\n    seen.add(temp)\n    sum_ = 0\n    while temp != 0:\n        d = temp % 10\n        sum_ += d * d\n        temp //= 10\n    temp = sum_\nis_happy = (temp == 1)\n</code></pre>"},{"location":"practice-programs-hub/numbers/35-check-happy-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A happy number eventually reaches 1 by repeatedly replacing the number with the sum of the squares of its digits.</li> <li>Use a set to detect cycles (non-happy numbers loop forever).</li> </ul>"},{"location":"practice-programs-hub/numbers/35-check-happy-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d\u00b7k) O(k) d = digits, k = steps to 1 or cycle Python O(d\u00b7k) O(k) d = digits, k = steps to 1 or cycle"},{"location":"practice-programs-hub/numbers/35-check-happy-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss cycle detection (Floyd's algorithm) for optimization.</li> <li>Know a few happy numbers (1, 7, 10, 13, 19, ...).</li> </ul>"},{"location":"practice-programs-hub/numbers/35-check-happy-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>happy</code>, <code>easy</code>, <code>interview</code>, <code>cycle-detection</code></p>"},{"location":"practice-programs-hub/numbers/36-check-niven-number/","title":"Check Niven Number","text":"<p>Number Problem 36: Check Niven Number</p>  A Niven (Harshad) number is divisible by the sum of its digits."},{"location":"practice-programs-hub/numbers/36-check-niven-number/#example","title":"Example","text":"<ul> <li>Input: <code>18</code></li> <li>Output: <code>True</code> (since 1 + 8 = 9, and 18 % 9 == 0)</li> </ul>"},{"location":"practice-programs-hub/numbers/36-check-niven-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Niven number check\nint sum = 0, temp = n;\nwhile (temp != 0) {\n    sum += temp % 10;\n    temp /= 10;\n}\nboolean isNiven = (n % sum == 0);\n</code></pre>"},{"location":"practice-programs-hub/numbers/36-check-niven-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Niven number check\nsum_ = sum(int(d) for d in str(n))\nis_niven = (n % sum_ == 0)\n</code></pre>"},{"location":"practice-programs-hub/numbers/36-check-niven-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A Niven (Harshad) number is divisible by the sum of its digits.</li> <li>Calculate the digit sum, then check divisibility.</li> </ul>"},{"location":"practice-programs-hub/numbers/36-check-niven-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/36-check-niven-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Niven and Harshad numbers are the same concept.</li> <li>Handle negative numbers if required.</li> </ul>"},{"location":"practice-programs-hub/numbers/36-check-niven-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>niven</code>, <code>harshad</code>, <code>easy</code>, <code>interview</code>, <code>digit-manipulation</code></p>"},{"location":"practice-programs-hub/numbers/37-check-pronic-number/","title":"Check Pronic Number","text":"<p>Number Problem 37: Check Pronic Number</p>  A pronic number is the product of two consecutive integers, i.e., n = x * (x + 1)."},{"location":"practice-programs-hub/numbers/37-check-pronic-number/#example","title":"Example","text":"<ul> <li>Input: <code>12</code></li> <li>Output: <code>True</code> (since 3 * 4 = 12)</li> </ul>"},{"location":"practice-programs-hub/numbers/37-check-pronic-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Pronic number check\nboolean isPronic = false;\nfor (int i = 0; i &lt;= n; i++) {\n    if (i * (i + 1) == n) {\n        isPronic = true;\n        break;\n    }\n}\n</code></pre>"},{"location":"practice-programs-hub/numbers/37-check-pronic-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Pronic number check\nis_pronic = False\nfor i in range(n + 1):\n    if i * (i + 1) == n:\n        is_pronic = True\n        break\n</code></pre>"},{"location":"practice-programs-hub/numbers/37-check-pronic-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A pronic number is the product of two consecutive integers.</li> <li>Check all i such that i * (i + 1) == n.</li> </ul>"},{"location":"practice-programs-hub/numbers/37-check-pronic-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(\u221an) O(1) Try all i up to \u221an Python O(\u221an) O(1) Try all i up to \u221an"},{"location":"practice-programs-hub/numbers/37-check-pronic-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Pronic numbers are also called oblong or rectangular numbers.</li> <li>Know a few examples (0, 2, 6, 12, 20, ...).</li> </ul>"},{"location":"practice-programs-hub/numbers/37-check-pronic-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>pronic</code>, <code>easy</code>, <code>interview</code>, <code>consecutive</code></p>"},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/","title":"Check Palindrome Number","text":"<p>Number Problem 38: Check Palindrome Number</p>  A palindrome number reads the same backward as forward."},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/#example","title":"Example","text":"<ul> <li>Input: <code>121</code></li> <li>Output: <code>True</code> (since 121 reversed is 121)</li> </ul>"},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Palindrome number check\nint rev = 0, temp = n;\nwhile (temp != 0) {\n    rev = rev * 10 + temp % 10;\n    temp /= 10;\n}\nboolean isPalindrome = (rev == n);\n</code></pre>"},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Palindrome number check\nis_palindrome = (str(n) == str(n)[::-1])\n</code></pre>"},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A palindrome number reads the same forward and backward.</li> <li>Reverse the digits and compare to the original.</li> </ul>"},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss string vs. integer approaches.</li> <li>Handle negative numbers if required.</li> </ul>"},{"location":"practice-programs-hub/numbers/38-check-palindrome-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>palindrome</code>, <code>easy</code>, <code>interview</code>, <code>reverse</code></p>"},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/","title":"Check Cyclic Number","text":"<p>Number Problem 39: Check Cyclic Number</p>  A cyclic number is a number in which cyclic permutations of the digits are successive multiples of the number."},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/#example","title":"Example","text":"<ul> <li>Input: <code>142857</code></li> <li>Output: <code>True</code> (since 142857 \u00d7 2 = 285714, \u00d73 = 428571, etc., all are cyclic permutations)</li> </ul>"},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Cyclic number check (basic)\nString nStr = Integer.toString(n);\nString concat = nStr + nStr;\nboolean isCyclic = true;\nfor (int i = 2; i &lt;= nStr.length(); i++) {\n    int prod = n * i;\n    if (!concat.contains(Integer.toString(prod))) {\n        isCyclic = false;\n        break;\n    }\n}\n</code></pre>"},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Cyclic number check (basic)\nn_str = str(n)\nconcat = n_str + n_str\nis_cyclic = True\nfor i in range(2, len(n_str) + 1):\n    prod = n * i\n    if str(prod) not in concat:\n        is_cyclic = False\n        break\n</code></pre>"},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A cyclic number's cyclic permutations are successive multiples of the number.</li> <li>Concatenate the number to itself and check for all rotations.</li> </ul>"},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d^2) O(d) d = number of digits Python O(d^2) O(d) d = number of digits"},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>142857 is the most famous cyclic number.</li> <li>Discuss string manipulation and rotation logic.</li> </ul>"},{"location":"practice-programs-hub/numbers/39-check-cyclic-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>cyclic</code>, <code>medium</code>, <code>interview</code>, <code>rotation</code></p>"},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/","title":"Check Kaprekar Number","text":"<p>Number Problem 40: Check Kaprekar Number</p>  A Kaprekar number is a number whose square can be split into two parts that add up to the original number."},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/#example","title":"Example","text":"<ul> <li>Input: <code>45</code></li> <li>Output: <code>True</code> (since 45\u00b2 = 2025, 20 + 25 = 45)</li> </ul>"},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Kaprekar number check\nint sq = n * n;\nString sqStr = Integer.toString(sq);\nint d = Integer.toString(n).length();\nString right = sqStr.substring(sqStr.length() - d);\nString left = sqStr.substring(0, sqStr.length() - d);\nint l = (left.isEmpty()) ? 0 : Integer.parseInt(left);\nint r = Integer.parseInt(right);\nboolean isKaprekar = (l + r == n);\n</code></pre>"},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Kaprekar number check\nsq = n * n\nsq_str = str(sq)\nd = len(str(n))\nright = int(sq_str[-d:])\nleft = int(sq_str[:-d]) if sq_str[:-d] else 0\nis_kaprekar = (left + right == n)\n</code></pre>"},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A Kaprekar number's square can be split into two parts that sum to the original number.</li> <li>Convert n\u00b2 to string, split, and sum the parts.</li> </ul>"},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(d) d = digits in n\u00b2 Python O(d) O(d) d = digits in n\u00b2"},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Know a few Kaprekar numbers (9, 45, 55, 99, 297, ...).</li> <li>Discuss string vs. numeric approaches.</li> </ul>"},{"location":"practice-programs-hub/numbers/40-check-kaprekar-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>kaprekar</code>, <code>easy</code>, <code>interview</code>, <code>split</code></p>"},{"location":"practice-programs-hub/numbers/41-check-evil-number/","title":"Check Evil Number","text":"<p>Number Problem 41: Check Evil Number</p>  An evil number has an even number of 1s in its binary representation."},{"location":"practice-programs-hub/numbers/41-check-evil-number/#example","title":"Example","text":"<ul> <li>Input: <code>9</code></li> <li>Output: <code>True</code> (since 9 in binary is 1001, which has two 1s)</li> </ul>"},{"location":"practice-programs-hub/numbers/41-check-evil-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Evil number check\nString bin = Integer.toBinaryString(n);\nlong count = bin.chars().filter(ch -&gt; ch == '1').count();\nboolean isEvil = (count % 2 == 0);\n</code></pre>"},{"location":"practice-programs-hub/numbers/41-check-evil-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Evil number check\ncount = bin(n).count('1')\nis_evil = (count % 2 == 0)\n</code></pre>"},{"location":"practice-programs-hub/numbers/41-check-evil-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>An evil number has an even number of 1s in its binary representation.</li> <li>Count the 1s in the binary form and check if even.</li> </ul>"},{"location":"practice-programs-hub/numbers/41-check-evil-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of bits Python O(d) O(1) d = number of bits"},{"location":"practice-programs-hub/numbers/41-check-evil-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss bitwise operations and binary representation.</li> <li>Know the difference between evil and odious numbers.</li> </ul>"},{"location":"practice-programs-hub/numbers/41-check-evil-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>evil</code>, <code>easy</code>, <code>interview</code>, <code>bitwise</code></p>"},{"location":"practice-programs-hub/numbers/42-check-odious-number/","title":"Check Odious Number","text":"<p>Number Problem 42: Check Odious Number</p>  An odious number has an odd number of 1s in its binary representation."},{"location":"practice-programs-hub/numbers/42-check-odious-number/#example","title":"Example","text":"<ul> <li>Input: <code>7</code></li> <li>Output: <code>True</code> (since 7 in binary is 111, which has three 1s)</li> </ul>"},{"location":"practice-programs-hub/numbers/42-check-odious-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Odious number check\nString bin = Integer.toBinaryString(n);\nlong count = bin.chars().filter(ch -&gt; ch == '1').count();\nboolean isOdious = (count % 2 == 1);\n</code></pre>"},{"location":"practice-programs-hub/numbers/42-check-odious-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Odious number check\ncount = bin(n).count('1')\nis_odious = (count % 2 == 1)\n</code></pre>"},{"location":"practice-programs-hub/numbers/42-check-odious-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>An odious number has an odd number of 1s in its binary representation.</li> <li>Count the 1s in the binary form and check if odd.</li> </ul>"},{"location":"practice-programs-hub/numbers/42-check-odious-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of bits Python O(d) O(1) d = number of bits"},{"location":"practice-programs-hub/numbers/42-check-odious-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss bitwise operations and binary representation.</li> <li>Know the difference between odious and evil numbers.</li> </ul>"},{"location":"practice-programs-hub/numbers/42-check-odious-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>odious</code>, <code>easy</code>, <code>interview</code>, <code>bitwise</code></p>"},{"location":"practice-programs-hub/numbers/43-check-lucky-number/","title":"Check Lucky Number","text":"<p>Number Problem 43: Check Lucky Number</p>  A lucky number is a number that survives a certain elimination process (the sieve of Josephus). For simplicity, check if a number is lucky using the sieve method."},{"location":"practice-programs-hub/numbers/43-check-lucky-number/#example","title":"Example","text":"<ul> <li>Input: <code>19</code></li> <li>Output: <code>True</code> (19 is a lucky number)</li> </ul>"},{"location":"practice-programs-hub/numbers/43-check-lucky-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Lucky number check (recursive)\nboolean isLucky(int n, int counter) {\n    if (counter &gt; n) return true;\n    if (n % counter == 0) return false;\n    return isLucky(n - n / counter, counter + 1);\n}\n// Usage: isLucky(n, 2)\n</code></pre>"},{"location":"practice-programs-hub/numbers/43-check-lucky-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Lucky number check (recursive)\ndef is_lucky(n, counter=2):\n    if counter &gt; n:\n        return True\n    if n % counter == 0:\n        return False\n    return is_lucky(n - n // counter, counter + 1)\n# Usage: is_lucky(n)\n</code></pre>"},{"location":"practice-programs-hub/numbers/43-check-lucky-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A lucky number survives a sieve process (Josephus sieve).</li> <li>Recursively eliminate every k-th number; if n survives, it's lucky.</li> </ul>"},{"location":"practice-programs-hub/numbers/43-check-lucky-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(log n) O(log n) Recursive depth Python O(log n) O(log n) Recursive depth"},{"location":"practice-programs-hub/numbers/43-check-lucky-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be ready to explain the sieve process.</li> <li>Lucky numbers are a fun recursion/interview topic.</li> </ul>"},{"location":"practice-programs-hub/numbers/43-check-lucky-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>lucky</code>, <code>easy</code>, <code>interview</code>, <code>recursion</code></p>"},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/","title":"Check Sphenic Number","text":"<p>Number Problem 44: Check Sphenic Number</p>  A sphenic number is a positive integer that is the product of exactly three distinct prime numbers."},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/#example","title":"Example","text":"<ul> <li>Input: <code>30</code></li> <li>Output: <code>True</code> (since 30 = 2 \u00d7 3 \u00d7 5)</li> </ul>"},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Sphenic number check\nint count = 0, temp = n;\nfor (int i = 2; i &lt;= temp &amp;&amp; count &lt;= 3; i++) {\n    if (temp % i == 0) {\n        int c = 0;\n        while (temp % i == 0) {\n            temp /= i;\n            c++;\n        }\n        if (c &gt; 1) break;\n        count++;\n    }\n}\nboolean isSphenic = (count == 3 &amp;&amp; temp == 1);\n</code></pre>"},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Sphenic number check\ndef is_sphenic(n):\n    count = 0\n    temp = n\n    i = 2\n    while i &lt;= temp and count &lt;= 3:\n        if temp % i == 0:\n            c = 0\n            while temp % i == 0:\n                temp //= i\n                c += 1\n            if c &gt; 1:\n                break\n            count += 1\n        i += 1\n    return count == 3 and temp == 1\n</code></pre>"},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A sphenic number is the product of exactly three distinct primes.</li> <li>Factorize n and count distinct prime factors.</li> </ul>"},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(\u221an) O(1) Trial division Python O(\u221an) O(1) Trial division"},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss prime factorization and uniqueness.</li> <li>Know a few sphenic numbers (30, 42, 66, ...).</li> </ul>"},{"location":"practice-programs-hub/numbers/44-check-sphenic-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>sphenic</code>, <code>medium</code>, <code>interview</code>, <code>prime-factors</code></p>"},{"location":"practice-programs-hub/numbers/45-check-composite-number/","title":"Check Composite Number","text":"<p>Number Problem 45: Check Composite Number</p>  A composite number has more than two positive divisors (not prime and not 1)."},{"location":"practice-programs-hub/numbers/45-check-composite-number/#example","title":"Example","text":"<ul> <li>Input: <code>9</code></li> <li>Output: <code>True</code> (since 9 has divisors 1, 3, 9)</li> </ul>"},{"location":"practice-programs-hub/numbers/45-check-composite-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Composite number check\nboolean isComposite = (n &gt; 1);\nfor (int i = 2; i &lt;= Math.sqrt(n); i++) {\n    if (n % i == 0) {\n        isComposite = true;\n        break;\n    }\n}\nif (n &lt;= 3) isComposite = false;\n</code></pre>"},{"location":"practice-programs-hub/numbers/45-check-composite-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Composite number check\nis_composite = n &gt; 3 and any(n % i == 0 for i in range(2, int(n ** 0.5) + 1))\n</code></pre>"},{"location":"practice-programs-hub/numbers/45-check-composite-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A composite number has more than two positive divisors (not prime and not 1).</li> <li>Check divisibility by any number from 2 to sqrt(n).</li> </ul>"},{"location":"practice-programs-hub/numbers/45-check-composite-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(\u221an) O(1) Trial division Python O(\u221an) O(1) Trial division"},{"location":"practice-programs-hub/numbers/45-check-composite-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss the difference between prime and composite numbers.</li> <li>Handle edge cases (n &lt;= 3).</li> </ul>"},{"location":"practice-programs-hub/numbers/45-check-composite-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>composite</code>, <code>easy</code>, <code>interview</code>, <code>divisors</code></p>"},{"location":"practice-programs-hub/numbers/45-check-composite-number/#_1","title":"Check Composite Number","text":""},{"location":"practice-programs-hub/numbers/46-check-circular-prime/","title":"Check Circular Prime","text":"<p>Number Problem 46: Check Circular Prime</p>  A circular prime is a prime number that remains prime under all rotations of its digits."},{"location":"practice-programs-hub/numbers/46-check-circular-prime/#example","title":"Example","text":"<ul> <li>Input: <code>197</code></li> <li>Output: <code>True</code> (since 197, 971, and 719 are all prime)</li> </ul>"},{"location":"practice-programs-hub/numbers/46-check-circular-prime/#java-solutions","title":"Java Solutions","text":"<pre><code>// Circular prime check\nboolean isPrime(int x) {\n    if (x &lt; 2) return false;\n    for (int i = 2; i &lt;= Math.sqrt(x); i++)\n        if (x % i == 0) return false;\n    return true;\n}\nboolean isCircularPrime(int n) {\n    String s = Integer.toString(n);\n    for (int i = 0; i &lt; s.length(); i++) {\n        if (!isPrime(Integer.parseInt(s))) return false;\n        s = s.substring(1) + s.charAt(0);\n    }\n    return true;\n}\n</code></pre>"},{"location":"practice-programs-hub/numbers/46-check-circular-prime/#python-solutions","title":"Python Solutions","text":"<pre><code># Circular prime check\ndef is_prime(x):\n    if x &lt; 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_circular_prime(n):\n    s = str(n)\n    for _ in range(len(s)):\n        if not is_prime(int(s)):\n            return False\n        s = s[1:] + s[0]\n    return True\n</code></pre>"},{"location":"practice-programs-hub/numbers/46-check-circular-prime/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A circular prime remains prime under all rotations of its digits.</li> <li>Rotate the digits and check primality for each rotation.</li> </ul>"},{"location":"practice-programs-hub/numbers/46-check-circular-prime/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d\u00b7p) O(d) d = digits, p = primality checks Python O(d\u00b7p) O(d) d = digits, p = primality checks"},{"location":"practice-programs-hub/numbers/46-check-circular-prime/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Know a few circular primes (197, 1193, ...).</li> <li>Discuss string manipulation and primality testing.</li> </ul>"},{"location":"practice-programs-hub/numbers/46-check-circular-prime/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>circular-prime</code>, <code>medium</code>, <code>interview</code>, <code>rotation</code></p>"},{"location":"practice-programs-hub/numbers/47-check-emirp-number/","title":"Check Emirp Number","text":"<p>Number Problem 47: Check Emirp Number</p>  An emirp number is a prime number that results in a different prime when its digits are reversed."},{"location":"practice-programs-hub/numbers/47-check-emirp-number/#example","title":"Example","text":"<ul> <li>Input: <code>13</code></li> <li>Output: <code>True</code> (since 13 and 31 are both prime)</li> </ul>"},{"location":"practice-programs-hub/numbers/47-check-emirp-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Emirp number check\nboolean isPrime(int x) {\n    if (x &lt; 2) return false;\n    for (int i = 2; i &lt;= Math.sqrt(x); i++)\n        if (x % i == 0) return false;\n    return true;\n}\nboolean isEmirp(int n) {\n    int rev = 0, temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return isPrime(n) &amp;&amp; isPrime(rev) &amp;&amp; n != rev;\n}\n</code></pre>"},{"location":"practice-programs-hub/numbers/47-check-emirp-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Emirp number check\ndef is_prime(x):\n    if x &lt; 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_emirp(n):\n    rev = int(str(n)[::-1])\n    return is_prime(n) and is_prime(rev) and n != rev\n</code></pre>"},{"location":"practice-programs-hub/numbers/47-check-emirp-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>An emirp is a prime that becomes a different prime when its digits are reversed.</li> <li>Check primality of n and its reverse, and ensure they are not equal.</li> </ul>"},{"location":"practice-programs-hub/numbers/47-check-emirp-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d + p) O(1) d = digits, p = primality checks Python O(d + p) O(1) d = digits, p = primality checks"},{"location":"practice-programs-hub/numbers/47-check-emirp-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Know a few emirp numbers (13, 17, 31, 37, ...).</li> <li>Discuss difference from palindromic primes.</li> </ul>"},{"location":"practice-programs-hub/numbers/47-check-emirp-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>emirp</code>, <code>medium</code>, <code>interview</code>, <code>reverse</code></p>"},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/","title":"Check Twisted Prime","text":"<p>Number Problem 48: Check Twisted Prime</p>  A twisted prime is a prime number whose reverse is also a prime number (same as emirp, but may include palindromic primes)."},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/#example","title":"Example","text":"<ul> <li>Input: <code>13</code></li> <li>Output: <code>True</code> (since 13 and 31 are both prime)</li> </ul>"},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/#java-solutions","title":"Java Solutions","text":"<pre><code>// Twisted prime check\nboolean isPrime(int x) {\n    if (x &lt; 2) return false;\n    for (int i = 2; i &lt;= Math.sqrt(x); i++)\n        if (x % i == 0) return false;\n    return true;\n}\nboolean isTwistedPrime(int n) {\n    int rev = 0, temp = n;\n    while (temp != 0) {\n        rev = rev * 10 + temp % 10;\n        temp /= 10;\n    }\n    return isPrime(n) &amp;&amp; isPrime(rev);\n}\n</code></pre>"},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/#python-solutions","title":"Python Solutions","text":"<pre><code># Twisted prime check\ndef is_prime(x):\n    if x &lt; 2:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_twisted_prime(n):\n    rev = int(str(n)[::-1])\n    return is_prime(n) and is_prime(rev)\n</code></pre>"},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A twisted prime is a prime whose reverse is also a prime (may include palindromic primes).</li> <li>Check primality of n and its reverse.</li> </ul>"},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d + p) O(1) d = digits, p = primality checks Python O(d + p) O(1) d = digits, p = primality checks"},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss difference between twisted, emirp, and palindromic primes.</li> <li>Know a few twisted primes (13, 17, 31, 37, 101, ...).</li> </ul>"},{"location":"practice-programs-hub/numbers/48-check-twisted-prime/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>twisted-prime</code>, <code>medium</code>, <code>interview</code>, <code>reverse</code></p>"},{"location":"practice-programs-hub/numbers/49-check-unique-number/","title":"Check Unique Number","text":"<p>Number Problem 49: Check Unique Number</p>  A unique number is a number in which all digits are different."},{"location":"practice-programs-hub/numbers/49-check-unique-number/#example","title":"Example","text":"<ul> <li>Input: <code>1234</code></li> <li>Output: <code>True</code> (all digits are unique)</li> </ul>"},{"location":"practice-programs-hub/numbers/49-check-unique-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Unique number check\nString s = Integer.toString(n);\nSet&lt;Character&gt; set = new HashSet&lt;&gt;();\nboolean isUnique = true;\nfor (char c : s.toCharArray()) {\n    if (!set.add(c)) {\n        isUnique = false;\n        break;\n    }\n}\n</code></pre>"},{"location":"practice-programs-hub/numbers/49-check-unique-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Unique number check\ns = str(n)\nis_unique = len(set(s)) == len(s)\n</code></pre>"},{"location":"practice-programs-hub/numbers/49-check-unique-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A unique number has all distinct digits.</li> <li>Use a set to check for duplicates while iterating through digits.</li> </ul>"},{"location":"practice-programs-hub/numbers/49-check-unique-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(d) d = number of digits Python O(d) O(d) d = number of digits"},{"location":"practice-programs-hub/numbers/49-check-unique-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (single digit, leading zeros).</li> <li>Useful for problems involving digit uniqueness.</li> </ul>"},{"location":"practice-programs-hub/numbers/49-check-unique-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>unique</code>, <code>easy</code>, <code>interview</code>, <code>set</code></p>"},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/","title":"Check Repdigit Number","text":"<p>Number Problem 50: Check Repdigit Number</p>  A repdigit number is a natural number composed of repeated instances of the same digit in a given base."},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/#example","title":"Example","text":"<ul> <li>Input: <code>7777</code></li> <li>Output: <code>True</code> (all digits are 7)</li> </ul>"},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/#java-solutions","title":"Java Solutions","text":"<pre><code>// Repdigit number check\nString s = Integer.toString(n);\nboolean isRepdigit = s.chars().allMatch(ch -&gt; ch == s.charAt(0));\n</code></pre>"},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/#python-solutions","title":"Python Solutions","text":"<pre><code># Repdigit number check\ns = str(n)\nis_repdigit = all(ch == s[0] for ch in s)\n</code></pre>"},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>A repdigit number is composed of repeated instances of the same digit.</li> <li>Check if all digits are equal to the first digit.</li> </ul>"},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(d) O(1) d = number of digits Python O(d) O(1) d = number of digits"},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Discuss edge cases (single digit, leading zeros).</li> <li>Repdigits are a fun property in number theory.</li> </ul>"},{"location":"practice-programs-hub/numbers/50-check-repdigit-number/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>numbers</code>, <code>python</code>, <code>java</code>, <code>repdigit</code>, <code>easy</code>, <code>interview</code>, <code>digits</code></p>"},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__build_a_string_search_with_case-insensitive_and_diacritic-insensitive_support/","title":"\ud83e\udde0 Problem: Build a string search with case-insensitive and diacritic-insensitive support","text":"<p>Category: Advanced System Tasks Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__build_a_string_search_with_case-insensitive_and_diacritic-insensitive_support/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Build a string search with case-insensitive and diacritic-insensitive support.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__build_a_string_search_with_case-insensitive_and_diacritic-insensitive_support/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Case-insensitive and diacritic-insensitive search\nimport java.text.Normalizer;\npublic static boolean containsIgnoreCaseDiacritics(String haystack, String needle) {\n    String normHay = Normalizer.normalize(haystack, Normalizer.Form.NFD)\n        .replaceAll(\"\\\\p{M}\", \"\").toLowerCase();\n    String normNeedle = Normalizer.normalize(needle, Normalizer.Form.NFD)\n        .replaceAll(\"\\\\p{M}\", \"\").toLowerCase();\n    return normHay.contains(normNeedle);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__build_a_string_search_with_case-insensitive_and_diacritic-insensitive_support/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Case-insensitive and diacritic-insensitive search\ndef contains_ignore_case_diacritics(haystack, needle):\n    import unicodedata\n    def normalize(s):\n        return ''.join(c for c in unicodedata.normalize('NFD', s)\n                      if not unicodedata.combining(c)).lower()\n    return normalize(needle) in normalize(haystack)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__build_a_string_search_with_case-insensitive_and_diacritic-insensitive_support/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Normalize both strings to remove diacritics (accents) and convert to lowercase.</li> <li>Use standard substring search after normalization.</li> </ul> <p>Edge Cases: - Empty needle: always true. - Empty haystack: always false unless needle is empty. - Non-ASCII characters are handled.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__build_a_string_search_with_case-insensitive_and_diacritic-insensitive_support/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n + m) O(n + m) n = haystack, m = needle Python O(n + m) O(n + m) n = haystack, m = needle","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__build_a_string_search_with_case-insensitive_and_diacritic-insensitive_support/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_basic_string_tokenizer_like_split/","title":"\ud83e\udde0 Problem: Implement a basic string tokenizer (like split())","text":"<p>Category: Advanced System Tasks Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_basic_string_tokenizer_like_split/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Implement a basic string tokenizer (like split()).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_basic_string_tokenizer_like_split/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using manual split (single char delimiter)\npublic static String[] basicSplit(String s, char delimiter) {\n    List&lt;String&gt; result = new ArrayList&lt;&gt;();\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (c == delimiter) {\n            result.add(sb.toString());\n            sb.setLength(0);\n        } else {\n            sb.append(c);\n        }\n    }\n    result.add(sb.toString());\n    return result.toArray(new String[0]);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_basic_string_tokenizer_like_split/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Manual split (single char delimiter)\ndef basic_split(s, delimiter):\n    result = []\n    current = ''\n    for c in s:\n        if c == delimiter:\n            result.append(current)\n            current = ''\n        else:\n            current += c\n    result.append(current)\n    return result\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_basic_string_tokenizer_like_split/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate through the string, splitting at each delimiter character.</li> <li>Collect substrings into a list/array.</li> </ul> <p>Edge Cases: - Empty string returns ['']. - Delimiter at start/end: empty string at start/end of result. - Consecutive delimiters: empty strings in result.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_basic_string_tokenizer_like_split/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_basic_string_tokenizer_like_split/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_simple_diff_checker_between_two_strings/","title":"\ud83e\udde0 Problem: Implement a simple diff checker between two strings","text":"<p>Category: Advanced System Tasks Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_simple_diff_checker_between_two_strings/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Implement a simple diff checker between two strings.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_simple_diff_checker_between_two_strings/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Simple diff checker (character by character)\npublic static List&lt;String&gt; simpleDiff(String a, String b) {\n    List&lt;String&gt; diffs = new ArrayList&lt;&gt;();\n    int n = Math.max(a.length(), b.length());\n    for (int i = 0; i &lt; n; i++) {\n        char ca = i &lt; a.length() ? a.charAt(i) : '-';\n        char cb = i &lt; b.length() ? b.charAt(i) : '-';\n        if (ca != cb) diffs.add(\"Index \" + i + \": '\" + ca + \"' vs '\" + cb + \"'\");\n    }\n    return diffs;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_simple_diff_checker_between_two_strings/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Simple diff checker (character by character)\ndef simple_diff(a, b):\n    diffs = []\n    n = max(len(a), len(b))\n    for i in range(n):\n        ca = a[i] if i &lt; len(a) else '-'\n        cb = b[i] if i &lt; len(b) else '-'\n        if ca != cb:\n            diffs.append(f\"Index {i}: '{ca}' vs '{cb}'\")\n    return diffs\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_simple_diff_checker_between_two_strings/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Compare both strings character by character.</li> <li>Report differences with index and differing characters.</li> </ul> <p>Edge Cases: - Different lengths: missing characters shown as '-'. - Empty strings: returns empty list. - Identical strings: returns empty list.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_simple_diff_checker_between_two_strings/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = max length of strings Python O(n) O(n) n = max length of strings","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__implement_a_simple_diff_checker_between_two_strings/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__simulate_string_search_using_kmp_algorithm/","title":"\ud83e\udde0 Problem: Simulate string search using KMP algorithm","text":"<p>Category: Advanced System Tasks Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__simulate_string_search_using_kmp_algorithm/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Simulate string search using KMP algorithm.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__simulate_string_search_using_kmp_algorithm/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. KMP algorithm for substring search\npublic static int kmpSearch(String haystack, String needle) {\n    if (needle.isEmpty()) return 0;\n    int[] lps = buildLPS(needle);\n    int i = 0, j = 0;\n    while (i &lt; haystack.length()) {\n        if (haystack.charAt(i) == needle.charAt(j)) {\n            i++; j++;\n            if (j == needle.length()) return i - j;\n        } else if (j &gt; 0) {\n            j = lps[j - 1];\n        } else {\n            i++;\n        }\n    }\n    return -1;\n}\nprivate static int[] buildLPS(String pat) {\n    int[] lps = new int[pat.length()];\n    int len = 0, i = 1;\n    while (i &lt; pat.length()) {\n        if (pat.charAt(i) == pat.charAt(len)) {\n            lps[i++] = ++len;\n        } else if (len &gt; 0) {\n            len = lps[len - 1];\n        } else {\n            lps[i++] = 0;\n        }\n    }\n    return lps;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__simulate_string_search_using_kmp_algorithm/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. KMP algorithm for substring search\ndef kmp_search(haystack, needle):\n    if not needle:\n        return 0\n    def build_lps(pat):\n        lps = [0] * len(pat)\n        length = 0\n        i = 1\n        while i &lt; len(pat):\n            if pat[i] == pat[length]:\n                length += 1\n                lps[i] = length\n                i += 1\n            elif length &gt; 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n        return lps\n    lps = build_lps(needle)\n    i = j = 0\n    while i &lt; len(haystack):\n        if haystack[i] == needle[j]:\n            i += 1\n            j += 1\n            if j == len(needle):\n                return i - j\n        elif j &gt; 0:\n            j = lps[j - 1]\n        else:\n            i += 1\n    return -1\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__simulate_string_search_using_kmp_algorithm/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Preprocess the needle to build the LPS (Longest Prefix Suffix) array.</li> <li>Use the LPS array to efficiently search for the needle in the haystack.</li> </ul> <p>Edge Cases: - Empty needle: return 0. - Needle longer than haystack: return -1. - No match: return -1.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__simulate_string_search_using_kmp_algorithm/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n + m) O(m) n = haystack, m = needle Python O(n + m) O(m) n = haystack, m = needle","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__simulate_string_search_using_kmp_algorithm/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__write_a_custom_string_formatter_like_pythons_format_or_javas_messageformat/","title":"\ud83e\udde0 Problem: Write a custom string formatter (like Python's format() or Java's MessageFormat)","text":"<p>Category: Advanced System Tasks Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__write_a_custom_string_formatter_like_pythons_format_or_javas_messageformat/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Write a custom string formatter (like Python's format() or Java's MessageFormat).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__write_a_custom_string_formatter_like_pythons_format_or_javas_messageformat/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Simple custom formatter using {0}, {1}, ...\npublic static String customFormat(String template, Object... args) {\n    String result = template;\n    for (int i = 0; i &lt; args.length; i++) {\n        result = result.replace(\"{\" + i + \"}\", args[i].toString());\n    }\n    return result;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__write_a_custom_string_formatter_like_pythons_format_or_javas_messageformat/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Simple custom formatter using {0}, {1}, ...\ndef custom_format(template, *args):\n    result = template\n    for i, arg in enumerate(args):\n        result = result.replace(f'{{{i}}}', str(arg))\n    return result\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__write_a_custom_string_formatter_like_pythons_format_or_javas_messageformat/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Replace placeholders like {0}, {1}, ... in the template with corresponding arguments.</li> <li>Does not handle advanced formatting (padding, decimals, etc.).</li> </ul> <p>Edge Cases: - More placeholders than args: placeholders remain. - More args than placeholders: extra args ignored. - Non-string arguments are converted to string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__write_a_custom_string_formatter_like_pythons_format_or_javas_messageformat/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n * m) O(n + m) n = template length, m = #args Python O(n * m) O(n + m) n = template length, m = #args","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Advanced_System_Tasks__write_a_custom_string_formatter_like_pythons_format_or_javas_messageformat/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/AnagramCheck/","title":"\ud83e\udde0 Problem: Check If Two Strings Are Anagrams","text":"<p>Write a function that checks whether two strings are anagrams of each other.</p> <p>Category: Strings Difficulty: Easy Tags: string, syntax, language-specific</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/AnagramCheck/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: Two strings <code>s1</code> and <code>s2</code></li> <li>Output: Boolean indicating if they are anagrams</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/AnagramCheck/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:\n  s1 = \"listen\"\n  s2 = \"silent\"\nOutput: True\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/AnagramCheck/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>String s1 = \"listen\";\nString s2 = \"silent\";\n\nchar[] a = s1.toCharArray();\nchar[] b = s2.toCharArray();\nArrays.sort(a);\nArrays.sort(b);\nboolean result = Arrays.equals(a, b);\nSystem.out.println(\"Are anagrams: \" + result);\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/AnagramCheck/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>s1 = \"listen\"\ns2 = \"silent\"\n\nresult = sorted(s1) == sorted(s2)\nprint(f\"Are anagrams: {result}\")\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/AnagramCheck/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Language-specific syntax demonstrated for the task.</li> <li>Python:</li> <li>Uses intuitive string manipulation methods.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/AnagramCheck/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) StringBuilder or Regex Python O(n) O(n) String slicing/lstrip","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/AnagramCheck/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Understand immutability in strings.</li> <li>Pay attention to index out-of-bound errors.</li> <li>Always validate inputs in real-world code.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/","title":"\ud83e\udde0 Problem: Count Character Occurrences","text":"<p>Write a function that takes a string and a character as input and returns the number of times the character appears in the string.</p> <p>Category: Strings Difficulty: Easy Tags: string, brute-force, optimized</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#requirements-if-any","title":"\u2705 Requirements (if any)","text":"<ul> <li>Input: </li> <li>A non-empty string <code>s</code> (e.g., <code>\"hello\"</code>)</li> <li>A character <code>c</code> (e.g., <code>\"l\"</code>)</li> <li>Output: The count of occurrences of <code>c</code> in <code>s</code> (e.g., <code>2</code>)</li> <li>Constraints:</li> <li>Case-sensitive comparison.</li> <li>Time complexity should be linear <code>O(n)</code>.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:  \n  str = \"hello\"\n  search = \"l\"\nOutput: 2\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>String str = \"Hello\";\nint org_len = str.length();\nString search = \"l\";\nint new_len = str.replaceAll(search, \"\").length();\nint diff = org_len - new_len;\nSystem.out.println(\"Occurance of char : \" + search + \" is \" + diff);\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>str = \"Hello\"  \nsearch = \"l\"\norg_len = len(str)\nnew_len = len(str.replace(search, \"\"))\ndiff = org_len - new_len\nprint(f\"Number of times '{search}' appears in '{str}': {diff}\")\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Uses <code>replaceAll()</code> to remove all occurrences of the character.</li> <li>The difference in length gives the count of occurrences.</li> <li>Python:</li> <li>Uses <code>replace()</code> to remove all occurrences of the character.</li> <li>The difference in length gives the count of occurrences.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) <code>replaceAll</code> creates a copy Python O(n) O(n) <code>replace</code> creates a new string","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be prepared to count:</li> <li>Case-sensitive and case-insensitive occurrences.</li> <li>Characters with Unicode, emojis, or special characters (complex case).</li> <li>Avoid using built-in functions if interviewers ask for manual logic:</li> <li>Java Manual Approach: Use a loop and <code>char[]</code>.</li> <li>Python Manual Approach: Use a loop and a counter variable.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CharacterCount/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>string</code>, <code>python</code>, <code>java</code>, <code>count</code>, <code>easy</code>, <code>interview</code>, <code>syntax</code>, <code>language-syntax</code></p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_contains_only_digits/","title":"\ud83e\udde0 Problem: Check if a string contains only digits","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_contains_only_digits/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Check if a string contains only digits.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_contains_only_digits/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\npublic static boolean isOnlyDigitsRegex(String s) {\n    return s != null &amp;&amp; s.matches(\"\\\\d+\");\n}\n\n// 2. Using Character.isDigit in a loop\npublic static boolean isOnlyDigitsLoop(String s) {\n    if (s == null || s.isEmpty()) return false;\n    for (int i = 0; i &lt; s.length(); i++) {\n        if (!Character.isDigit(s.charAt(i))) return false;\n    }\n    return true;\n}\n\n// 3. Using Java 8+ streams\npublic static boolean isOnlyDigitsStream(String s) {\n    return s != null &amp;&amp; !s.isEmpty() &amp;&amp; s.chars().allMatch(Character::isDigit);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_contains_only_digits/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using str.isdigit()\ndef is_only_digits_builtin(s):\n    return isinstance(s, str) and s.isdigit() and len(s) &gt; 0\n\n# 2. Using regex\nimport re\ndef is_only_digits_regex(s):\n    return isinstance(s, str) and re.fullmatch(r\"\\d+\", s) is not None\n\n# 3. Using a loop\ndef is_only_digits_loop(s):\n    if not isinstance(s, str) or not s:\n        return False\n    for c in s:\n        if not c.isdigit():\n            return False\n    return True\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_contains_only_digits/#explanation","title":"\ud83d\udd0d Explanation","text":"<p>There are several ways to check if a string contains only digits: - Regex: Use a regular expression to match the entire string against one or more digits (<code>\\d+</code>). - Character check: Iterate through each character and check if it is a digit using <code>Character.isDigit</code> (Java) or <code>str.isdigit()</code> (Python). - Streams/Comprehensions: Use Java streams or Python comprehensions to check all characters.</p> <p>Edge Cases: - Empty strings should return <code>false</code> (not considered as containing only digits). - Null/None input should return <code>false</code>. - Strings with spaces, signs, or decimal points are not considered as only digits.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_contains_only_digits/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of string Python O(n) O(1) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_contains_only_digits/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_is_a_palindrome/","title":"\ud83e\udde0 Problem: Check if a string is a palindrome","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_is_a_palindrome/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Check if a string is a palindrome.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_is_a_palindrome/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Two-pointer approach\npublic static boolean isPalindrome(String s) {\n    int left = 0, right = s.length() - 1;\n    while (left &lt; right) {\n        if (s.charAt(left++) != s.charAt(right--)) return false;\n    }\n    return true;\n}\n\n// 2. Reverse and compare\npublic static boolean isPalindromeReverse(String s) {\n    return s.equals(new StringBuilder(s).reverse().toString());\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_is_a_palindrome/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Two-pointer approach\ndef is_palindrome(s):\n    left, right = 0, len(s) - 1\n    while left &lt; right:\n        if s[left] != s[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n# 2. Reverse and compare\ndef is_palindrome_reverse(s):\n    return s == s[::-1]\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_is_a_palindrome/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use two pointers from both ends, compare characters moving towards the center.</li> <li>Alternatively, reverse the string and compare to the original.</li> </ul> <p>Edge Cases: - Empty string and single character are palindromes. - Case sensitivity and ignoring non-alphanumeric can be added if required.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_is_a_palindrome/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) / O(n) O(1) for two-pointer, O(n) for reverse Python O(n) O(1) / O(n) O(1) for two-pointer, O(n) for reverse","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_a_string_is_a_palindrome/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_two_strings_are_anagrams/","title":"\ud83e\udde0 Problem: Check if two strings are anagrams","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_two_strings_are_anagrams/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Check if two strings are anagrams.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_two_strings_are_anagrams/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Sort and compare\npublic static boolean areAnagramsSort(String s1, String s2) {\n    if (s1.length() != s2.length()) return false;\n    char[] a = s1.toCharArray(), b = s2.toCharArray();\n    Arrays.sort(a); Arrays.sort(b);\n    return Arrays.equals(a, b);\n}\n\n// 2. Count characters (ASCII)\npublic static boolean areAnagramsCount(String s1, String s2) {\n    if (s1.length() != s2.length()) return false;\n    int[] count = new int[256];\n    for (int i = 0; i &lt; s1.length(); i++) {\n        count[s1.charAt(i)]++;\n        count[s2.charAt(i)]--;\n    }\n    for (int c : count) if (c != 0) return false;\n    return true;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_two_strings_are_anagrams/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Sort and compare\ndef are_anagrams_sort(s1, s2):\n    return sorted(s1) == sorted(s2)\n\n# 2. Count characters (collections.Counter)\nfrom collections import Counter\ndef are_anagrams_counter(s1, s2):\n    return Counter(s1) == Counter(s2)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_two_strings_are_anagrams/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sort and compare: Anagrams have the same sorted character sequence.</li> <li>Count characters: Anagrams have the same character counts for each letter.</li> </ul> <p>Edge Cases: - Different lengths: not anagrams. - Empty strings: considered anagrams. - Case sensitivity and ignoring spaces can be added if required.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_two_strings_are_anagrams/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n log n) O(n) n = length of string Python O(n log n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__check_if_two_strings_are_anagrams/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__convert_a_string_to_title_case/","title":"\ud83e\udde0 Problem: Convert a string to title case","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__convert_a_string_to_title_case/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Convert a string to title case.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__convert_a_string_to_title_case/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using split and StringBuilder\npublic static String toTitleCase(String s) {\n    if (s == null || s.isEmpty()) return s;\n    String[] words = s.split(\" \");\n    StringBuilder sb = new StringBuilder();\n    for (String word : words) {\n        if (!word.isEmpty()) {\n            sb.append(Character.toUpperCase(word.charAt(0)));\n            if (word.length() &gt; 1) sb.append(word.substring(1).toLowerCase());\n        }\n        sb.append(\" \");\n    }\n    return sb.toString().trim();\n}\n\n// 2. Using regex (Java 9+)\npublic static String toTitleCaseRegex(String s) {\n    return s == null ? null : s.replaceAll(\"\\\\b(\\\\w)(\\\\w*)\\\\b\", m -&gt; m.group(1).toUpperCase() + m.group(2).toLowerCase());\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__convert_a_string_to_title_case/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using str.title()\ndef to_title_case_builtin(s):\n    return s.title()\n\n# 2. Manual split and capitalize\ndef to_title_case_manual(s):\n    return ' '.join(word.capitalize() for word in s.split(' '))\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__convert_a_string_to_title_case/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Split the string into words, capitalize the first letter of each, and join them back.</li> <li>Python's <code>str.title()</code> and Java's manual approach both work for basic cases.</li> <li>For more complex cases (apostrophes, hyphens), further logic may be needed.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - Multiple spaces between words are preserved. - Non-letter characters are not changed.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__convert_a_string_to_title_case/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__convert_a_string_to_title_case/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__count_vowels_and_consonants_in_a_string/","title":"\ud83e\udde0 Problem: Count vowels and consonants in a string","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__count_vowels_and_consonants_in_a_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Count vowels and consonants in a string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__count_vowels_and_consonants_in_a_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Count vowels and consonants\npublic static int[] countVowelsAndConsonants(String s) {\n    int vowels = 0, consonants = 0;\n    for (char c : s.toLowerCase().toCharArray()) {\n        if (Character.isLetter(c)) {\n            if (\"aeiou\".indexOf(c) &gt;= 0) vowels++;\n            else consonants++;\n        }\n    }\n    return new int[]{vowels, consonants};\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__count_vowels_and_consonants_in_a_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Count vowels and consonants\ndef count_vowels_and_consonants(s):\n    vowels = consonants = 0\n    for c in s.lower():\n        if c.isalpha():\n            if c in 'aeiou':\n                vowels += 1\n            else:\n                consonants += 1\n    return vowels, consonants\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__count_vowels_and_consonants_in_a_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Convert the string to lowercase and iterate through each character.</li> <li>If the character is a letter, check if it is a vowel or consonant and increment the respective counter.</li> </ul> <p>Edge Cases: - Empty string returns (0, 0). - Non-letter characters are ignored. - Case-insensitive.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__count_vowels_and_consonants_in_a_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of string Python O(n) O(1) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__count_vowels_and_consonants_in_a_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__find_the_first_non-repeating_character/","title":"\ud83e\udde0 Problem: Find the first non-repeating character","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__find_the_first_non-repeating_character/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Find the first non-repeating character.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__find_the_first_non-repeating_character/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using LinkedHashMap (preserves order)\npublic static Character firstNonRepeatingChar(String s) {\n    Map&lt;Character, Integer&gt; count = new LinkedHashMap&lt;&gt;();\n    for (char c : s.toCharArray()) count.put(c, count.getOrDefault(c, 0) + 1);\n    for (Map.Entry&lt;Character, Integer&gt; entry : count.entrySet()) {\n        if (entry.getValue() == 1) return entry.getKey();\n    }\n    return null;\n}\n\n// 2. Using array for ASCII\npublic static Character firstNonRepeatingCharArray(String s) {\n    int[] freq = new int[256];\n    for (char c : s.toCharArray()) freq[c]++;\n    for (char c : s.toCharArray()) if (freq[c] == 1) return c;\n    return null;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__find_the_first_non-repeating_character/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using collections.OrderedDict (preserves order)\nfrom collections import OrderedDict\ndef first_non_repeating_char(s):\n    count = OrderedDict()\n    for c in s:\n        count[c] = count.get(c, 0) + 1\n    for c, v in count.items():\n        if v == 1:\n            return c\n    return None\n\n# 2. Using Counter and string traversal\nfrom collections import Counter\ndef first_non_repeating_char_counter(s):\n    freq = Counter(s)\n    for c in s:\n        if freq[c] == 1:\n            return c\n    return None\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__find_the_first_non-repeating_character/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Count the frequency of each character while preserving order.</li> <li>Return the first character with a count of 1.</li> <li>Use a map/dictionary or array for counting.</li> </ul> <p>Edge Cases: - Empty string returns None/null. - All repeating characters: returns None/null. - Case sensitivity as per requirements.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__find_the_first_non-repeating_character/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) / O(n) O(1) for ASCII, O(n) for map Python O(n) O(1) / O(n) O(1) for ASCII, O(n) for dict","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__find_the_first_non-repeating_character/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_all_occurrences_of_a_given_character/","title":"\ud83e\udde0 Problem: Remove all occurrences of a given character","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_all_occurrences_of_a_given_character/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Remove all occurrences of a given character.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_all_occurrences_of_a_given_character/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using StringBuilder\npublic static String removeChar(String s, char c) {\n    StringBuilder sb = new StringBuilder();\n    for (char ch : s.toCharArray()) {\n        if (ch != c) sb.append(ch);\n    }\n    return sb.toString();\n}\n\n// 2. Using replace (built-in)\npublic static String removeCharReplace(String s, char c) {\n    return s.replace(Character.toString(c), \"\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_all_occurrences_of_a_given_character/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using str.replace()\ndef remove_char_replace(s, c):\n    return s.replace(c, '')\n\n# 2. Using list comprehension\ndef remove_char_listcomp(s, c):\n    return ''.join(ch for ch in s if ch != c)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_all_occurrences_of_a_given_character/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate through the string and append characters that are not the target.</li> <li>Or use built-in replace methods for a concise solution.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - Character not present: returns original string. - Remove all: returns empty string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_all_occurrences_of_a_given_character/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_all_occurrences_of_a_given_character/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_duplicate_characters_from_a_string/","title":"\ud83e\udde0 Problem: Remove duplicate characters from a string","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_duplicate_characters_from_a_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Remove duplicate characters from a string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_duplicate_characters_from_a_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using LinkedHashSet to preserve order\npublic static String removeDuplicates(String s) {\n    Set&lt;Character&gt; seen = new LinkedHashSet&lt;&gt;();\n    for (char c : s.toCharArray()) seen.add(c);\n    StringBuilder sb = new StringBuilder();\n    for (char c : seen) sb.append(c);\n    return sb.toString();\n}\n\n// 2. Using boolean array for ASCII\npublic static String removeDuplicatesArray(String s) {\n    boolean[] seen = new boolean[256];\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (!seen[c]) {\n            seen[c] = true;\n            sb.append(c);\n        }\n    }\n    return sb.toString();\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_duplicate_characters_from_a_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using set and order preservation\ndef remove_duplicates(s):\n    seen = set()\n    result = []\n    for c in s:\n        if c not in seen:\n            seen.add(c)\n            result.append(c)\n    return ''.join(result)\n\n# 2. Using dict.fromkeys (Python 3.7+ preserves order)\ndef remove_duplicates_dict(s):\n    return ''.join(dict.fromkeys(s))\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_duplicate_characters_from_a_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use a set or boolean array to track seen characters and build the result string.</li> <li>Order is preserved by using LinkedHashSet (Java) or dict/set (Python 3.7+).</li> </ul> <p>Edge Cases: - Empty string returns empty string. - All unique: returns original string. - All duplicates: returns single character.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_duplicate_characters_from_a_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1)/O(n) O(1) for ASCII, O(n) for set Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__remove_duplicate_characters_from_a_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__replace_all_spaces_with_%2520/","title":"\ud83e\udde0 Problem: Replace all spaces with %20","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__replace_all_spaces_with_%2520/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Replace all spaces with %20.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__replace_all_spaces_with_%2520/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using StringBuilder\npublic static String replaceSpaces(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (char c : s.toCharArray()) {\n        if (c == ' ') sb.append(\"%20\");\n        else sb.append(c);\n    }\n    return sb.toString();\n}\n\n// 2. Using replace (built-in)\npublic static String replaceSpacesReplace(String s) {\n    return s.replace(\" \", \"%20\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__replace_all_spaces_with_%2520/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using str.replace()\ndef replace_spaces(s):\n    return s.replace(' ', '%20')\n\n# 2. Using list comprehension\ndef replace_spaces_listcomp(s):\n    return ''.join('%20' if c == ' ' else c for c in s)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__replace_all_spaces_with_%2520/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate through the string and replace spaces with \"%20\".</li> <li>Or use built-in replace methods for a concise solution.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - No spaces: returns original string. - All spaces: returns \"%20\" repeated.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__replace_all_spaces_with_%2520/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__replace_all_spaces_with_%2520/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions/","title":"\ud83e\udde0 Problem: Reverse a string without using built-in functions","text":"<p>Category: Core String Manipulation Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Reverse a string without using built-in functions.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using character array\npublic static String reverseString(String s) {\n    char[] arr = s.toCharArray();\n    int left = 0, right = arr.length - 1;\n    while (left &lt; right) {\n        char temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n        left++;\n        right--;\n    }\n    return new String(arr);\n}\n\n// 2. Using StringBuilder (for reference, but not allowed if no built-ins)\npublic static String reverseStringBuilder(String s) {\n    return new StringBuilder(s).reverse().toString();\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using list and two pointers\ndef reverse_string(s):\n    arr = list(s)\n    left, right = 0, len(arr) - 1\n    while left &lt; right:\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    return ''.join(arr)\n\n# 2. Using slicing (for reference, but not allowed if no built-ins)\ndef reverse_string_slice(s):\n    return s[::-1]\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Convert the string to a character array/list and swap characters from both ends moving towards the center.</li> <li>Avoid using built-in reverse functions if not allowed.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - Single character returns itself.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Core_String_Manipulation__reverse_a_string_without_using_built-in_functions/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/","title":"\ud83e\udde0 Problem: Count Occurrence of Characters","text":"<p>Write a function that takes a string and character as input and returns the number of occurrences of a specific character in the string.</p> <p>Category: Strings Difficulty: Easy Tags: string, brute-force, optimized</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: </li> <li>A non-empty string <code>text</code> (e.g., <code>\"Code for coders\"</code>) and <code>search</code> (e.g., <code>'o'</code>).</li> <li>Output: The count of occurrences of the character in <code>int</code> (e.g., <code>3</code>).</li> <li>Constraints:</li> <li>Case-sensitive comparison.</li> <li>Time complexity should be linear <code>O(n)</code>.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:  \n  text = \"Code for coders\";\n    search = 'o';\nOutput: 3\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// m1 : using charArray loops\npublic void charArray(String str, char c) {\n    int count = 0;\n    for (char ch : str.toCharArray()) {\n        if (ch == c) {\n            count++;\n    }\n    }\n    System.out.println(\"Occurrence of \" + c + \" in \" + '\"' + str + '\"' + \" is : \" + count);\n}\n\n// m2 : using charAt loops\npublic void charAt(String str, char c) {\n    int count = 0;\n    for (int i = 0; i &lt; str.length(); i++) {\n    if (str.charAt(i) == c) {\n            count++;\n        }\n    }\n    System.out.println(\"Occurrence of \" + c + \" in \" + '\"' + str + '\"' + \" is : \" + count);\n}\n\n// m3 : using StringUtils from Apache Commons Lang\npublic void stringUtils(String str, char c) {\n    int count = StringUtils.countMatches(str, c);\n    System.out.println(\"Occurrence of \" + c + \" in \" + '\"' + str + '\"' + \" is : \" + count);\n}\n\npublic static void main(String[] args) {\n    String text = \"Code for coders\";\n    char search = 'o';\n    CountOccurrenceOfCharacter count = new CountOccurrenceOfCharacter();\n    count.charArray(text, search);\n    count.charAt(text, search);\n    count.stringUtils(text, search);\n}\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># m1 : using charArray (Python equivalent: iterating over string)\ndef char_array(s, c):\n  count = sum(1 for ch in s if ch == c)\n  print(f\"Occurrence of '{c}' in \\\"{s}\\\" is: {count}\")\n\n# m2 : using character indexing (similar to charAt in Java)\ndef char_at(s, c):\n  count = 0\n  for i in range(len(s)):  # same logic as original Java\n    if s[i] == c:\n      count += 1\n  print(f\"Occurrence of '{c}' in \\\"{s}\\\" is: {count}\")\n\n# m3 : using Python's built-in count (like StringUtils.countMatches)\ndef string_utils(s, c):\n  count = s.count(c)\n  print(f\"Occurrence of '{c}' in \\\"{s}\\\" is: {count}\")\n\nif __name__ == \"__main__\":\n    text = \"Code for coders\"\n    search = 'o'\n    char_array(text, search)\n    char_at(text, search)\n    string_utils(text, search)\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Iterates through each character in the string.</li> <li>Compares each character with the target character.</li> <li>Increments a counter for each match.</li> <li>Python:</li> <li>Uses a generator expression or built-in <code>count()</code> method for efficient counting.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Iterates through the string Python O(n) O(1) Uses a generator expression","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be prepared to count:</li> <li>Uppercase and lowercase characters separately.</li> <li>Characters with Unicode, emojis, or special characters (complex case).</li> <li>Avoid using built-in functions if interviewers ask for manual logic:</li> <li>Java Manual Approach: Use ASCII values (<code>'A' &lt;= char &lt;= 'Z'</code>).</li> <li>Python Manual Approach: Use ASCII values or loops.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountOccurrenceCharcter/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>string</code>, <code>python</code>, <code>java</code>, <code>character-count</code>, <code>easy</code>, <code>interview</code>, <code>syntax</code>, <code>language-syntax</code></p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/","title":"\ud83e\udde0 Problem: Count Uppercase Characters","text":"<p>Write a function that takes a string as input and returns the number of uppercase characters in the string.</p> <p>Category: Strings Difficulty: Easy Tags: string, brute-force, optimized</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: </li> <li>A non-empty string <code>str</code> (e.g., <code>\"Hello World\"</code>)</li> <li>Output: The count of uppercase characters in <code>str</code> (e.g., <code>2</code>)</li> <li>Constraints:</li> <li>Case-sensitive comparison.</li> <li>Time complexity should be linear <code>O(n)</code>.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:  \n  str = \"Hello World\"\nOutput: 2\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#java-solution","title":"\u2615 Java Solution","text":"<pre><code> // m1 using char\npublic void chars(String str) {\n    int count = 0;\n    for (int i = 0; i &lt; str.length(); i++) {\n        if (str.charAt(i) &gt;= 'A' &amp;&amp; str.charAt(i) &lt;= 'Z') {\n            count++;\n        }\n    }\n    System.out.println(count);\n}\n\n// m2\npublic void method(String str) {\n    int count = 0;\n    for (int i = 0; i &lt; str.length() - 1; i++) {\n        if (Character.isUpperCase(str.charAt(i))) {\n            count++;\n        }\n    }\n    System.out.println(count);\n}\n\n// m3\npublic void chars3(String str) {\n    int count = 0;\n    for (int i = 0; i &lt; str.length() - 1; i++) {\n        if (str.charAt(i) &gt;= 65 &amp;&amp; str.charAt(i) &lt;= 90) {\n            count++;\n        }\n    }\n    System.out.println(count);\n}\n\npublic static void main(String[] args) {\n    String str = \"Hello World\";\n    count.chars(str);\n    count.method(str);\n    count.chars3(str);\n}\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def chars():\n  str = \"Hello World\"\n  count = 0\n  for i in range(len(str)):\n    if 'A' &lt;= str[i] &lt;= 'Z':\n      count += 1\n  print(f\"Number of uppercase characters in '{str}': {count}\")\n\ndef chars_method():\n  str = \"Hello World\"\n  count = 0\n  for i in range(len(str)):\n    if str[i].isupper():\n      count += 1\n  print(f\"Number of uppercase characters in '{str}': {count}\")\n\ndef in_method():\n  s = \"Hello World\"\n  count = sum(1 for s in s if s.isupper())\n  print(f\"Number of uppercase characters in '{s}': {count}\")\n\nif __name__ == \"__main__\":\n  chars()\n  chars_method()\n  in_method()\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Iterates through each character in the string.</li> <li>Uses <code>Character.isUpperCase()</code> to check if the character is uppercase.</li> <li>Increments a counter for each uppercase character.</li> <li>Python:</li> <li>Uses a generator expression with <code>isupper()</code> to count uppercase characters.</li> <li>Efficient and concise.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Iterates through the string Python O(n) O(1) Uses a generator expression","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be prepared to count:</li> <li>Uppercase and lowercase characters separately.</li> <li>Characters with Unicode, emojis, or special characters (complex case).</li> <li>Avoid using built-in functions if interviewers ask for manual logic:</li> <li>Java Manual Approach: Use ASCII values (<code>'A' &lt;= char &lt;= 'Z'</code>).</li> <li>Python Manual Approach: Use ASCII values or loops.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountUppecaseCharacter/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>string</code>, <code>python</code>, <code>java</code>, <code>uppercase</code>, <code>easy</code>, <code>interview</code>, <code>syntax</code>, <code>language-syntax</code></p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/","title":"\ud83e\udde0 Problem: Count Vowels in a String","text":"<p>Write a function that takes a string as input and returns the number of vowels in the string.</p> <p>Category: Strings Difficulty: Easy Tags: string, brute-force, optimized</p>","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: </li> <li>A non-empty string <code>str</code> (e.g., <code>\"This is a test string\"</code>)</li> <li>Output: The count of vowels in <code>str</code> (e.g., <code>5</code>)</li> <li>Constraints:</li> <li>Case-insensitive comparison.</li> <li>Time complexity should be linear <code>O(n)</code>.</li> </ul>","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:  \n  str = \"This is a test string\"\nOutput: 5\n</code></pre>","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>import com.google.common.base.CharMatcher;\n\npublic class CountVowels {\n    public static void main(String[] args) {\n        String str = \"This is a test string\";\n        int count = CharMatcher.anyOf(\"aeiouAEIOU\").countIn(str);\n        System.out.println(\"Number of vowels in the string: \" + count);\n    }\n}\n</code></pre>","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Uses Google Guava's <code>CharMatcher</code> to count occurrences of vowels (<code>aeiouAEIOU</code>) in the string.</li> <li>Efficient and concise, leveraging a library for optimized performance.</li> </ul>","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) Iterates through the string","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be prepared to count:</li> <li>Vowels and consonants separately.</li> <li>Characters with Unicode, emojis, or special characters (complex case).</li> <li>Avoid using external libraries if interviewers ask for manual logic:</li> <li>Manual Approach: Use loops and conditional checks (<code>if char in 'aeiouAEIOU'</code>).</li> </ul>","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/CountVowelUsingGoogleGuava/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>string</code>, <code>java</code>, <code>vowels</code>, <code>easy</code>, <code>interview</code>, <code>syntax</code>, <code>language-syntax</code></p>","tags":["java","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/","title":"\ud83e\udde0 Problem: Count Duplicate Characters","text":"<p>Write a function that takes a string as input and returns the number of duplicate characters in it.</p> <p>Category: Strings Difficulty: Easy Tags: string, brute-force, optimized</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: </li> <li>A non-empty string <code>str</code> (e.g., <code>\"Hello World\"</code>)</li> <li>Output: The count of duplicate characters in <code>str</code> (e.g., <code>h = 3 i = 3 ...</code>)</li> <li>Constraints:</li> <li>Case-sensitive comparison.</li> <li>Time complexity should be linear <code>O(n)</code>.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:  \n  str = \"Hello World\"\nOutput: 2\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>public static void bruteforce(String str){\n    int count;\n    if (str == null) {\n        System.out.println(\"The given string is null\");\n    } else if (str.isEmpty()) {\n        System.out.println(\"The given string is empty\");\n    } else {\n        char[] string = str.toCharArray();\n        for (int i = 0; i &lt; string.length; i++) {\n            count =1;\n            for (int j = i+1; j &lt; string.length; j++) {\n                if(string[i]==string[j] &amp;&amp; string[i]!=' ') {\n                    count++;\n                    string[j] ='0';\n                }\n            }\n            if(count&gt;1 &amp;&amp; string[i]!='0') {\n                System.out.println(string[i] + \" = \" + count);\n            }   \n        }\n    }\n}\npublic static void hashsMap(String str) {\n    char[] ch = str.toCharArray();\n    //If  order is important use LinkedHashMap\n    //If order not imp use HashMap\n    //If natural order requried use TreeMap\n    Map&lt;Character,Integer&gt; map = new LinkedHashMap&lt;Character,Integer&gt;(); \n    for(int i = 0; i&lt;ch.length;i++){\n      if(!map.containsKey(ch[i])){\n        map.put(ch[i], 1);\n      }else{\n        map.put(ch[i],map.get(ch[i])+1);\n      }\n    }\n    for (Map.Entry&lt;Character, Integer&gt; entry : map.entrySet()) {\n      if(entry.getValue()&gt;1){\n      System.out.println(entry.getKey() + \" = \" + entry.getValue());\n        }\n    }\n}\npublic static void main(String[] args) {\n    String str = \"This is duplicate characters check program\";\n    bruteforce(str);\n    hashsMap(str);\n}\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>def bruteforce(s):\n    if s is None:\n        print(\"The given string is null\")\n    elif s == \"\":\n        print(\"The given string is empty\")\n    else:\n        string = list(s)\n        for i in range(len(string)):\n            count = 1\n            if string[i] == '0':\n                continue\n            for j in range(i + 1, len(string)):\n                if string[i] == string[j] and string[i] != ' ':\n                    count += 1\n                    string[j] = '0'\n            if count &gt; 1 and string[i] != '0':\n                print(f\"{string[i]} = {count}\")\n\ndef hash_map(s):\n    # Using OrderedDict to preserve insertion order\n    char_count = OrderedDict()\n\n    for ch in s:\n        if ch in char_count:\n            char_count[ch] += 1\n        else:\n            char_count[ch] = 1\n\n    for key, value in char_count.items():\n        if value &gt; 1:\n            print(f\"{key} = {value}\")\n\ndef find_duplicates():\n    s = \"This is a string\"\n    counter = Counter(s)\n    duplicates = {char: count for char, count in counter.items() if count &gt; 1}\n    for char, count in duplicates.items():\n        print(f\"Character '{char}' appears {count} times.\")\n\ndef main():\n    str1 = \"This is duplicate characters check program\"\n\n    print(\"Using bruteforce method:\")\n    bruteforce(str1)\n\n    print(\"\\nUsing hashmap method:\")\n    hash_map(\"Hello World\")\n\n    print(\"\\nUsing find_duplicates method:\")\n    find_duplicates()\nif __name__ == \"__main__\":\n    main()\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Iterates through each character in the string.</li> <li>Uses a brute-force approach or a HashMap to count duplicate characters.</li> <li>Python:</li> <li>Uses a list-based approach, a dictionary, or the <code>Counter</code> class to count duplicate characters efficiently.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) Uses a HashMap for counting Python O(n) O(n) Uses a dictionary or Counter","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Be prepared to count:</li> <li>Duplicate characters in case-sensitive scenarios.</li> <li>Characters with Unicode, emojis, or special characters (complex case).</li> <li>Avoid using built-in functions if interviewers ask for manual logic:</li> <li>Java Manual Approach: Use nested loops for brute force.</li> <li>Python Manual Approach: Use loops and conditionals.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/DuplicateCharacters/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>string</code>, <code>python</code>, <code>java</code>, <code>duplicates</code>, <code>easy</code>, <code>interview</code>, <code>syntax</code>, <code>language-syntax</code></p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__check_for_emoji_presence_in_a_string/","title":"\ud83e\udde0 Problem: Check for emoji presence in a string","text":"<p>Category: Internationalization Edge Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__check_for_emoji_presence_in_a_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Check for emoji presence in a string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__check_for_emoji_presence_in_a_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex for emoji ranges\nimport java.util.regex.*;\npublic static boolean containsEmoji(String s) {\n    Pattern emoji = Pattern.compile(\"[\\uD83C-\\uDBFF\\uDC00-\\uDFFF]+|\\u2600-\\u27BF\");\n    Matcher m = emoji.matcher(s);\n    return m.find();\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__check_for_emoji_presence_in_a_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using regex for emoji ranges\ndef contains_emoji(s):\n    import re\n    emoji_pattern = re.compile(r'[\\U0001F600-\\U0001F64F\\U0001F300-\\U0001F5FF\\U0001F680-\\U0001F6FF\\U0001F1E0-\\U0001F1FF]')\n    return bool(emoji_pattern.search(s))\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__check_for_emoji_presence_in_a_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to match Unicode ranges for emojis.</li> <li>Returns true if any emoji is found in the string.</li> </ul> <p>Edge Cases: - No emoji: returns false. - Multiple emojis: returns true if at least one is present. - Surrogate pairs in Java are handled by regex.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__check_for_emoji_presence_in_a_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of string Python O(n) O(1) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__check_for_emoji_presence_in_a_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__count_words_in_a_multilingual_string/","title":"\ud83e\udde0 Problem: Count words in a multilingual string","text":"<p>Category: Internationalization Edge Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__count_words_in_a_multilingual_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Count words in a multilingual string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__count_words_in_a_multilingual_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex for Unicode word boundaries\nimport java.util.regex.*;\npublic static int countWords(String s) {\n    Matcher m = Pattern.compile(\"\\\\b\\\\w+\\\\b\", Pattern.UNICODE_CHARACTER_CLASS).matcher(s);\n    int count = 0;\n    while (m.find()) count++;\n    return count;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__count_words_in_a_multilingual_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using regex for Unicode word boundaries\ndef count_words(s):\n    import re\n    return len(re.findall(r'\\b\\w+\\b', s, re.UNICODE))\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__count_words_in_a_multilingual_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex with Unicode support to match words in multilingual text.</li> <li>Returns the count of words found.</li> </ul> <p>Edge Cases: - Empty string returns 0. - Punctuation and symbols are not counted as words. - Works for most languages with word boundaries.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__count_words_in_a_multilingual_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(k) n = length of string, k = #words Python O(n) O(k) n = length of string, k = #words","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__count_words_in_a_multilingual_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__handle_and_validate_right-to-left_languages_like_arabic/","title":"\ud83e\udde0 Problem: Handle and validate right-to-left languages (like Arabic)","text":"<p>Category: Internationalization Edge Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__handle_and_validate_right-to-left_languages_like_arabic/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Handle and validate right-to-left languages (like Arabic).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__handle_and_validate_right-to-left_languages_like_arabic/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Check for right-to-left characters (e.g., Arabic, Hebrew)\npublic static boolean containsRTL(String s) {\n    for (char c : s.toCharArray()) {\n        if (Character.UnicodeBlock.of(c) == Character.UnicodeBlock.ARABIC ||\n            Character.UnicodeBlock.of(c) == Character.UnicodeBlock.HEBREW) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__handle_and_validate_right-to-left_languages_like_arabic/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Check for right-to-left characters (e.g., Arabic, Hebrew)\ndef contains_rtl(s):\n    for c in s:\n        if '\\u0600' &lt;= c &lt;= '\\u06FF' or '\\u0590' &lt;= c &lt;= '\\u05FF':\n            return True\n    return False\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__handle_and_validate_right-to-left_languages_like_arabic/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Check if any character in the string belongs to a right-to-left Unicode block (e.g., Arabic, Hebrew).</li> <li>Returns true if any such character is found.</li> </ul> <p>Edge Cases: - No RTL characters: returns false. - Mixed scripts: returns true if at least one RTL character is present. - Empty string returns false.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__handle_and_validate_right-to-left_languages_like_arabic/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of string Python O(n) O(1) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__handle_and_validate_right-to-left_languages_like_arabic/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__normalize_unicode_strings_eg_caf%C3%A9_vs_caf%C3%A9/","title":"\ud83e\udde0 Problem: Normalize Unicode strings (e.g., caf\u00e9 vs cafe\u0301)","text":"<p>Category: Internationalization Edge Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__normalize_unicode_strings_eg_caf%C3%A9_vs_caf%C3%A9/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Normalize Unicode strings (e.g., caf\u00e9 vs cafe\u0301).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__normalize_unicode_strings_eg_caf%C3%A9_vs_caf%C3%A9/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Normalize to NFC (composed form)\nimport java.text.Normalizer;\npublic static String normalizeNFC(String s) {\n    return Normalizer.normalize(s, Normalizer.Form.NFC);\n}\n\n// 2. Normalize to NFD (decomposed form)\npublic static String normalizeNFD(String s) {\n    return Normalizer.normalize(s, Normalizer.Form.NFD);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__normalize_unicode_strings_eg_caf%C3%A9_vs_caf%C3%A9/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Normalize to NFC (composed form)\ndef normalize_nfc(s):\n    import unicodedata\n    return unicodedata.normalize('NFC', s)\n\n# 2. Normalize to NFD (decomposed form)\ndef normalize_nfd(s):\n    import unicodedata\n    return unicodedata.normalize('NFD', s)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__normalize_unicode_strings_eg_caf%C3%A9_vs_caf%C3%A9/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use Unicode normalization to convert strings to a standard form (NFC or NFD).</li> <li>Useful for comparing visually identical but binary different strings.</li> </ul> <p>Edge Cases: - Already normalized: returns original string. - Empty string returns empty string. - Non-letter characters are unaffected.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__normalize_unicode_strings_eg_caf%C3%A9_vs_caf%C3%A9/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__normalize_unicode_strings_eg_caf%C3%A9_vs_caf%C3%A9/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__remove_diacritics_accents_from_letters/","title":"\ud83e\udde0 Problem: Remove diacritics (accents) from letters","text":"<p>Category: Internationalization Edge Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__remove_diacritics_accents_from_letters/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Remove diacritics (accents) from letters.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__remove_diacritics_accents_from_letters/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Remove diacritics using Normalizer\nimport java.text.Normalizer;\npublic static String removeDiacritics(String s) {\n    return Normalizer.normalize(s, Normalizer.Form.NFD)\n        .replaceAll(\"\\\\p{M}\", \"\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__remove_diacritics_accents_from_letters/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Remove diacritics using unicodedata\ndef remove_diacritics(s):\n    import unicodedata\n    return ''.join(c for c in unicodedata.normalize('NFD', s)\n                  if not unicodedata.combining(c))\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__remove_diacritics_accents_from_letters/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Normalize the string to NFD (decomposed form), then remove all combining marks.</li> <li>Returns the string without diacritics/accents.</li> </ul> <p>Edge Cases: - No diacritics: returns original string. - Empty string returns empty string. - Non-letter characters are unaffected.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__remove_diacritics_accents_from_letters/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Internationalization_Edge_Cases__remove_diacritics_accents_from_letters/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__check_if_a_string_is_a_valid_date_eg_dd-mm-yyyy/","title":"\ud83e\udde0 Problem: Check if a string is a valid date (e.g., dd-mm-yyyy)","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__check_if_a_string_is_a_valid_date_eg_dd-mm-yyyy/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Check if a string is a valid date (e.g., dd-mm-yyyy).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__check_if_a_string_is_a_valid_date_eg_dd-mm-yyyy/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex and date parsing\nimport java.util.regex.*;\nimport java.text.*;\npublic static boolean isValidDate(String s) {\n    if (!s.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) return false;\n    SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n    sdf.setLenient(false);\n    try {\n        sdf.parse(s);\n        return true;\n    } catch (ParseException e) {\n        return false;\n    }\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__check_if_a_string_is_a_valid_date_eg_dd-mm-yyyy/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using regex and datetime\nimport re\nfrom datetime import datetime\ndef is_valid_date(s):\n    if not re.fullmatch(r\"\\d{2}-\\d{2}-\\d{4}\", s):\n        return False\n    try:\n        datetime.strptime(s, \"%d-%m-%Y\")\n        return True\n    except ValueError:\n        return False\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__check_if_a_string_is_a_valid_date_eg_dd-mm-yyyy/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to check the format is dd-mm-yyyy.</li> <li>Use date parsing to ensure the date is valid (e.g., not 31-02-2020).</li> </ul> <p>Edge Cases: - Invalid days/months (e.g., 32-01-2020, 29-02-2019). - Non-numeric input. - Empty string returns false.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__check_if_a_string_is_a_valid_date_eg_dd-mm-yyyy/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1) O(1) Parsing fixed-length string Python O(1) O(1) Parsing fixed-length string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__check_if_a_string_is_a_valid_date_eg_dd-mm-yyyy/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_all_numbers_from_a_string/","title":"\ud83e\udde0 Problem: Extract all numbers from a string","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_all_numbers_from_a_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Extract all numbers from a string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_all_numbers_from_a_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\nimport java.util.regex.*;\npublic static List&lt;String&gt; extractNumbers(String s) {\n    List&lt;String&gt; result = new ArrayList&lt;&gt;();\n    Matcher m = Pattern.compile(\"\\\\d+\").matcher(s);\n    while (m.find()) result.add(m.group());\n    return result;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_all_numbers_from_a_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re.findall\ndef extract_numbers(s):\n    import re\n    return re.findall(r'\\d+', s)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_all_numbers_from_a_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to find all sequences of digits in the string.</li> <li>Return as a list of strings.</li> </ul> <p>Edge Cases: - No numbers: returns empty list. - Numbers at start/end of string. - Negative numbers not handled unless regex is changed.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_all_numbers_from_a_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(k) n = length of string, k = #matches Python O(n) O(k) n = length of string, k = #matches","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_all_numbers_from_a_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_domain_name_from_url/","title":"\ud83e\udde0 Problem: Extract domain name from URL","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_domain_name_from_url/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Extract domain name from URL.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_domain_name_from_url/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\nimport java.util.regex.*;\npublic static String extractDomain(String url) {\n    Matcher m = Pattern.compile(\"https?://([^/]+)/?\").matcher(url);\n    if (m.find()) return m.group(1);\n    return null;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_domain_name_from_url/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re and urlparse\nimport re\nfrom urllib.parse import urlparse\ndef extract_domain(url):\n    parsed = urlparse(url)\n    if parsed.netloc:\n        return parsed.netloc\n    m = re.match(r'https?://([^/]+)/?', url)\n    return m.group(1) if m else None\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_domain_name_from_url/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex or urlparse to extract the domain part from a URL.</li> <li>Handles both http and https.</li> </ul> <p>Edge Cases: - No protocol: may not match. - Subdomains and ports are included in netloc. - Malformed URLs return None/null.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_domain_name_from_url/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of string Python O(n) O(1) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__extract_domain_name_from_url/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__find_and_mask_credit_card_numbers_in_text/","title":"\ud83e\udde0 Problem: Find and mask credit card numbers in text","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__find_and_mask_credit_card_numbers_in_text/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Find and mask credit card numbers in text.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__find_and_mask_credit_card_numbers_in_text/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex to mask all but last 4 digits\nimport java.util.regex.*;\npublic static String maskCreditCards(String s) {\n    return s.replaceAll(\"(\\\\b\\\\d{12})(\\\\d{4}\\\\b)\", \"************$2\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__find_and_mask_credit_card_numbers_in_text/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re.sub to mask all but last 4 digits\nimport re\ndef mask_credit_cards(s):\n    return re.sub(r'(\\b\\d{12})(\\d{4}\\b)', lambda m: '*'*12 + m.group(2), s)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__find_and_mask_credit_card_numbers_in_text/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to find 16-digit numbers and mask the first 12 digits.</li> <li>Only masks numbers that look like credit cards (16 digits, word boundaries).</li> </ul> <p>Edge Cases: - No credit card numbers: returns original string. - Multiple cards in one string. - Non-digit separators not handled unless regex is changed.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__find_and_mask_credit_card_numbers_in_text/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__find_and_mask_credit_card_numbers_in_text/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__match_and_extract_hashtags_from_a_tweet/","title":"\ud83e\udde0 Problem: Match and extract hashtags from a tweet","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__match_and_extract_hashtags_from_a_tweet/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Match and extract hashtags from a tweet.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__match_and_extract_hashtags_from_a_tweet/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\nimport java.util.regex.*;\npublic static List&lt;String&gt; extractHashtags(String s) {\n    List&lt;String&gt; result = new ArrayList&lt;&gt;();\n    Matcher m = Pattern.compile(\"#\\\\w+\").matcher(s);\n    while (m.find()) result.add(m.group());\n    return result;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__match_and_extract_hashtags_from_a_tweet/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re.findall\ndef extract_hashtags(s):\n    import re\n    return re.findall(r'#\\w+', s)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__match_and_extract_hashtags_from_a_tweet/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to find all hashtags (words starting with #).</li> <li>Return as a list of strings.</li> </ul> <p>Edge Cases: - No hashtags: returns empty list. - Hashtags at start/end of string. - Non-alphanumeric after #: not matched.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__match_and_extract_hashtags_from_a_tweet/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(k) n = length of string, k = #matches Python O(n) O(k) n = length of string, k = #matches","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__match_and_extract_hashtags_from_a_tweet/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__replace_all_html_tags_in_a_string/","title":"\ud83e\udde0 Problem: Replace all HTML tags in a string","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__replace_all_html_tags_in_a_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Replace all HTML tags in a string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__replace_all_html_tags_in_a_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\nimport java.util.regex.*;\npublic static String removeHtmlTags(String s) {\n    return s.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__replace_all_html_tags_in_a_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re.sub\ndef remove_html_tags(s):\n    import re\n    return re.sub(r'&lt;[^&gt;]+&gt;', '', s)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__replace_all_html_tags_in_a_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to match and remove all substrings that look like HTML tags (anything between &lt; and &gt;).</li> <li>Returns the string with tags removed.</li> </ul> <p>Edge Cases: - No tags: returns original string. - Nested tags are handled. - Malformed tags may not be fully removed.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__replace_all_html_tags_in_a_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__replace_all_html_tags_in_a_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_phone_number_format_eg_123_456-7890/","title":"\ud83e\udde0 Problem: Validate a phone number format (e.g., (123) 456-7890)","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_phone_number_format_eg_123_456-7890/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Validate a phone number format (e.g., (123) 456-7890).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_phone_number_format_eg_123_456-7890/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\npublic static boolean isValidPhoneNumber(String s) {\n    return s.matches(\"\\\\(\\\\d{3}\\\\) \\\\d{3}-\\\\d{4}\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_phone_number_format_eg_123_456-7890/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re.fullmatch\ndef is_valid_phone_number(s):\n    import re\n    return re.fullmatch(r'\\(\\d{3}\\) \\d{3}-\\d{4}', s) is not None\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_phone_number_format_eg_123_456-7890/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to match the exact phone number format (e.g., (123) 456-7890).</li> <li>Returns true if the string matches the pattern.</li> </ul> <p>Edge Cases: - Incorrect format returns false. - Extra spaces or missing digits are not allowed. - Only matches the specific format.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_phone_number_format_eg_123_456-7890/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1) O(1) Fixed-length string Python O(1) O(1) Fixed-length string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_phone_number_format_eg_123_456-7890/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_strong_password_at_least_1_digit_1_uppercase_1_special_char/","title":"\ud83e\udde0 Problem: Validate a strong password (at least 1 digit, 1 uppercase, 1 special char)","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_strong_password_at_least_1_digit_1_uppercase_1_special_char/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Validate a strong password (at least 1 digit, 1 uppercase, 1 special char).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_strong_password_at_least_1_digit_1_uppercase_1_special_char/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\npublic static boolean isStrongPassword(String s) {\n    return s.matches(\"^(?=.*[A-Z])(?=.*\\\\d)(?=.*[^A-Za-z0-9]).+$\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_strong_password_at_least_1_digit_1_uppercase_1_special_char/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re.fullmatch\ndef is_strong_password(s):\n    import re\n    return re.fullmatch(r'(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]).+', s) is not None\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_strong_password_at_least_1_digit_1_uppercase_1_special_char/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex with lookaheads to ensure at least one uppercase, one digit, and one special character.</li> <li>Returns true if the string matches all criteria.</li> </ul> <p>Edge Cases: - Empty string returns false. - Only letters or only digits: returns false. - Minimum length not enforced unless added to regex.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_strong_password_at_least_1_digit_1_uppercase_1_special_char/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of string Python O(n) O(1) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_a_strong_password_at_least_1_digit_1_uppercase_1_special_char/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_email_address_using_regex/","title":"\ud83e\udde0 Problem: Validate email address using regex","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_email_address_using_regex/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Validate email address using regex.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_email_address_using_regex/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex\npublic static boolean isValidEmail(String s) {\n    return s.matches(\"^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_email_address_using_regex/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using re.fullmatch\ndef is_valid_email(s):\n    import re\n    return re.fullmatch(r'[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+', s) is not None\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_email_address_using_regex/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to check for a basic valid email format.</li> <li>Returns true if the string matches the pattern.</li> <li>For stricter validation, use more complex regex or libraries.</li> </ul> <p>Edge Cases: - Missing @ or domain: returns false. - Multiple @: returns false. - Empty string returns false.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_email_address_using_regex/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of string Python O(n) O(1) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_email_address_using_regex/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_ipv4_ipv6_address/","title":"\ud83e\udde0 Problem: Validate IPv4/IPv6 address","text":"<p>Category: Regex Pattern Matching Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_ipv4_ipv6_address/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Validate IPv4/IPv6 address.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_ipv4_ipv6_address/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using regex for IPv4\npublic static boolean isValidIPv4(String s) {\n    return s.matches(\"^(25[0-5]|2[0-4]\\\\d|1?\\\\d?\\\\d)(\\\\.(25[0-5]|2[0-4]\\\\d|1?\\\\d?\\\\d)){3}$\");\n}\n\n// 2. Using regex for IPv6\npublic static boolean isValidIPv6(String s) {\n    return s.matches(\"^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_ipv4_ipv6_address/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using ipaddress module\ndef is_valid_ipv4(s):\n    import ipaddress\n    try:\n        ipaddress.IPv4Address(s)\n        return True\n    except ValueError:\n        return False\n\ndef is_valid_ipv6(s):\n    import ipaddress\n    try:\n        ipaddress.IPv6Address(s)\n        return True\n    except ValueError:\n        return False\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_ipv4_ipv6_address/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to match IPv4/IPv6 patterns (Java) or use the ipaddress module (Python).</li> <li>Returns true if the string is a valid IP address.</li> </ul> <p>Edge Cases: - Out-of-range numbers (e.g., 256.0.0.1) return false. - Empty string returns false. - Extra characters or missing sections return false.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_ipv4_ipv6_address/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(1) O(1) Fixed-length string Python O(1) O(1) Fixed-length string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/Regex_Pattern_Matching__validate_ipv4_ipv6_address/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/","title":"\ud83e\udde0 Problem: Remove Leading Zeros from a String","text":"<p>Write a function to remove leading zeros from a string.</p> <p>Category: Strings Difficulty: Easy Tags: string, syntax, language-specific</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: A string <code>s</code> containing digits</li> <li>Output: The string without leading zeros</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: s = \"000123\"\nOutput: \"123\"\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>String s = \"000123\";\nString result = s.replaceFirst(\"^0+(?!$)\", \"\");\nSystem.out.println(\"Without leading zeros: \" + result);\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>s = \"000123\"\nresult = s.lstrip('0')\nprint(\"Without leading zeros:\", result)\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Language-specific syntax demonstrated for the task.</li> <li>Python:</li> <li>Uses intuitive string manipulation methods.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) StringBuilder or Regex Python O(n) O(n) String slicing/lstrip","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/RemoveLeadingZeros/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Understand immutability in strings.</li> <li>Pay attention to index out-of-bound errors.</li> <li>Always validate inputs in real-world code.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/","title":"\ud83e\udde0 Problem: Replace a Character at Specific Index","text":"<p>Write a function to replace a character at a given index in a string.</p> <p>Category: Strings Difficulty: Easy Tags: string, syntax, language-specific</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: A string <code>s</code>, index <code>i</code>, and character <code>c</code></li> <li>Output: New string with character at index <code>i</code> replaced with <code>c</code></li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input:\n  s = \"hello\", i = 1, c = 'a'\nOutput: \"hallo\"\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>String s = \"hello\";\nint index = 1;\nchar replacement = 'a';\n\nStringBuilder sb = new StringBuilder(s);\nsb.setCharAt(index, replacement);\nSystem.out.println(\"Modified string: \" + sb.toString());\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>s = \"hello\"\nindex = 1\nreplacement = 'a'\n\ns = s[:index] + replacement + s[index+1:]\nprint(\"Modified string:\", s)\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Language-specific syntax demonstrated for the task.</li> <li>Python:</li> <li>Uses intuitive string manipulation methods.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) StringBuilder or Regex Python O(n) O(n) String slicing/lstrip","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/ReplaceChar/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Understand immutability in strings.</li> <li>Pay attention to index out-of-bound errors.</li> <li>Always validate inputs in real-world code.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__automate_test_case_naming_conventions_from_string_inputs/","title":"\ud83e\udde0 Problem: Automate test case naming conventions from string inputs","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__automate_test_case_naming_conventions_from_string_inputs/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Automate test case naming conventions from string inputs.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__automate_test_case_naming_conventions_from_string_inputs/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Convert string to snake_case\ndef toSnakeCase(String s) {\n    return s.trim().toLowerCase().replaceAll(\"[^a-z0-9]+\", \"_\").replaceAll(\"_+\", \"_\").replaceAll(\"^_|_$\", \"\");\n}\n\n// 2. Convert string to camelCase\ndef toCamelCase(String s) {\n    String[] parts = s.trim().toLowerCase().split(\"[^a-z0-9]+\", -1);\n    StringBuilder sb = new StringBuilder(parts[0]);\n    for (int i = 1; i &lt; parts.length; i++) {\n        if (!parts[i].isEmpty())\n            sb.append(Character.toUpperCase(parts[i].charAt(0))).append(parts[i].substring(1));\n    }\n    return sb.toString();\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__automate_test_case_naming_conventions_from_string_inputs/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Convert string to snake_case\ndef to_snake_case(s):\n    import re\n    return re.sub(r'[^a-z0-9]+', '_', s.strip().lower()).strip('_')\n\n# 2. Convert string to camelCase\ndef to_camel_case(s):\n    import re\n    parts = re.split(r'[^a-z0-9]+', s.strip().lower())\n    return parts[0] + ''.join(word.capitalize() for word in parts[1:] if word)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__automate_test_case_naming_conventions_from_string_inputs/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to split and join words in the desired case format.</li> <li>Remove non-alphanumeric characters and handle spaces/underscores.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - Multiple spaces or special characters are handled. - Leading/trailing underscores are removed.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__automate_test_case_naming_conventions_from_string_inputs/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__automate_test_case_naming_conventions_from_string_inputs/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__check_case_sensitivity_issues_in_user_input_validations/","title":"\ud83e\udde0 Problem: Check case sensitivity issues in user input validations","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__check_case_sensitivity_issues_in_user_input_validations/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Check case sensitivity issues in user input validations.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__check_case_sensitivity_issues_in_user_input_validations/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Check if two strings are equal ignoring case\npublic static boolean equalsIgnoreCase(String a, String b) {\n    return a.equalsIgnoreCase(b);\n}\n\n// 2. Check if input matches allowed values (case-insensitive)\npublic static boolean isAllowedInput(String input, String[] allowed) {\n    for (String s : allowed) {\n        if (s.equalsIgnoreCase(input)) return true;\n    }\n    return false;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__check_case_sensitivity_issues_in_user_input_validations/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Check if two strings are equal ignoring case\ndef equals_ignore_case(a, b):\n    return a.lower() == b.lower()\n\n# 2. Check if input matches allowed values (case-insensitive)\ndef is_allowed_input(input, allowed):\n    return input.lower() in (s.lower() for s in allowed)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__check_case_sensitivity_issues_in_user_input_validations/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use case-insensitive comparison for validation.</li> <li>Convert both strings to lower (or upper) case before comparing.</li> </ul> <p>Edge Cases: - Empty strings: handled. - Mixed case in allowed values: handled. - Null/None input should be handled as needed.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__check_case_sensitivity_issues_in_user_input_validations/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__check_case_sensitivity_issues_in_user_input_validations/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__compare_two_large_json_strings_as_string_comparison/","title":"\ud83e\udde0 Problem: Compare two large JSON strings (as string comparison)","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__compare_two_large_json_strings_as_string_comparison/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Compare two large JSON strings (as string comparison).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__compare_two_large_json_strings_as_string_comparison/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Compare normalized JSON strings\nimport com.fasterxml.jackson.databind.ObjectMapper;\npublic static boolean compareJsonStrings(String a, String b) throws Exception {\n    ObjectMapper mapper = new ObjectMapper();\n    Object objA = mapper.readTree(a);\n    Object objB = mapper.readTree(b);\n    return objA.equals(objB);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__compare_two_large_json_strings_as_string_comparison/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Compare normalized JSON strings\ndef compare_json_strings(a, b):\n    import json\n    return json.loads(a) == json.loads(b)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__compare_two_large_json_strings_as_string_comparison/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Parse both JSON strings into objects and compare them for equality.</li> <li>Ignores whitespace, key order, and formatting differences.</li> </ul> <p>Edge Cases: - Invalid JSON: raises exception or returns false. - Different key order: handled. - Extra whitespace: handled.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__compare_two_large_json_strings_as_string_comparison/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of JSON Python O(n) O(n) n = length of JSON","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__compare_two_large_json_strings_as_string_comparison/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__create_dynamic_selectors_using_string_concatenation_in_selenium/","title":"\ud83e\udde0 Problem: Create dynamic selectors using string concatenation in Selenium","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__create_dynamic_selectors_using_string_concatenation_in_selenium/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Create dynamic selectors using string concatenation in Selenium.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__create_dynamic_selectors_using_string_concatenation_in_selenium/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Create dynamic XPath selector\npublic static String dynamicXPath(String base, String value) {\n    return String.format(\"%s[@value='%s']\", base, value);\n}\n\n// 2. Create dynamic CSS selector\npublic static String dynamicCss(String base, String value) {\n    return String.format(\"%s[value='%s']\", base, value);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__create_dynamic_selectors_using_string_concatenation_in_selenium/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Create dynamic XPath selector\ndef dynamic_xpath(base, value):\n    return f\"{base}[@value='{value}']\"\n\n# 2. Create dynamic CSS selector\ndef dynamic_css(base, value):\n    return f\"{base}[value='{value}']\"\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__create_dynamic_selectors_using_string_concatenation_in_selenium/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use string formatting to insert dynamic values into selector templates.</li> <li>Works for both XPath and CSS selectors.</li> </ul> <p>Edge Cases: - Special characters in value may need escaping. - Empty base or value: returns incomplete selector.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__create_dynamic_selectors_using_string_concatenation_in_selenium/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of selector Python O(n) O(n) n = length of selector","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__create_dynamic_selectors_using_string_concatenation_in_selenium/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__extract_tokens_from_authorization_headers/","title":"\ud83e\udde0 Problem: Extract tokens from authorization headers","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__extract_tokens_from_authorization_headers/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Extract tokens from authorization headers.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__extract_tokens_from_authorization_headers/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Extract Bearer token from header\npublic static String extractBearerToken(String header) {\n    if (header == null) return null;\n    String prefix = \"Bearer \";\n    return header.startsWith(prefix) ? header.substring(prefix.length()) : null;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__extract_tokens_from_authorization_headers/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Extract Bearer token from header\ndef extract_bearer_token(header):\n    prefix = 'Bearer '\n    if header and header.startswith(prefix):\n        return header[len(prefix):]\n    return None\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__extract_tokens_from_authorization_headers/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Check if the header starts with the expected prefix and extract the token.</li> <li>Returns the token string or None/null if not found.</li> </ul> <p>Edge Cases: - Header is None or empty: returns None/null. - Prefix not present: returns None/null. - Extra spaces or case differences are not handled unless added.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__extract_tokens_from_authorization_headers/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of header Python O(n) O(n) n = length of header","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__extract_tokens_from_authorization_headers/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__generate_dynamic_test_data_using_string_patterns/","title":"\ud83e\udde0 Problem: Generate dynamic test data using string patterns","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__generate_dynamic_test_data_using_string_patterns/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Generate dynamic test data using string patterns.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__generate_dynamic_test_data_using_string_patterns/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Generate test data using a pattern (e.g., 'user_{i}@test.com')\npublic static List&lt;String&gt; generateTestData(String pattern, int count) {\n    List&lt;String&gt; result = new ArrayList&lt;&gt;();\n    for (int i = 1; i &lt;= count; i++) {\n        result.add(pattern.replace(\"{i}\", String.valueOf(i)));\n    }\n    return result;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__generate_dynamic_test_data_using_string_patterns/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Generate test data using a pattern (e.g., 'user_{i}@test.com')\ndef generate_test_data(pattern, count):\n    return [pattern.replace('{i}', str(i)) for i in range(1, count+1)]\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__generate_dynamic_test_data_using_string_patterns/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Replace the placeholder <code>{i}</code> in the pattern with numbers from 1 to count.</li> <li>Useful for generating emails, usernames, etc., for tests.</li> </ul> <p>Edge Cases: - If pattern does not contain <code>{i}</code>, returns same string multiple times. - count &lt;= 0 returns empty list.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__generate_dynamic_test_data_using_string_patterns/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n * m) O(n * m) n = count, m = pattern length Python O(n * m) O(n * m) n = count, m = pattern length","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__generate_dynamic_test_data_using_string_patterns/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__parse_a_log_file_and_extract_error_messages/","title":"\ud83e\udde0 Problem: Parse a log file and extract error messages","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__parse_a_log_file_and_extract_error_messages/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Parse a log file and extract error messages.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__parse_a_log_file_and_extract_error_messages/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Extract error messages from log lines\npublic static List&lt;String&gt; extractErrorMessages(List&lt;String&gt; logLines) {\n    List&lt;String&gt; errors = new ArrayList&lt;&gt;();\n    for (String line : logLines) {\n        if (line.contains(\"ERROR\")) {\n            errors.add(line);\n        }\n    }\n    return errors;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__parse_a_log_file_and_extract_error_messages/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Extract error messages from log lines\ndef extract_error_messages(log_lines):\n    return [line for line in log_lines if 'ERROR' in line]\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__parse_a_log_file_and_extract_error_messages/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Iterate through each log line and collect those containing the substring 'ERROR'.</li> <li>Can be adapted for different error keywords or regex patterns.</li> </ul> <p>Edge Cases: - No error lines: returns empty list. - Case sensitivity: only matches 'ERROR' as uppercase. - Empty input: returns empty list.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__parse_a_log_file_and_extract_error_messages/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n * m) O(k * m) n = lines, m = line length, k = error lines Python O(n * m) O(k * m) n = lines, m = line length, k = error lines","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__parse_a_log_file_and_extract_error_messages/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__sanitize_input_strings_to_prevent_xss_attacks/","title":"\ud83e\udde0 Problem: Sanitize input strings to prevent XSS attacks","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__sanitize_input_strings_to_prevent_xss_attacks/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Sanitize input strings to prevent XSS attacks.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__sanitize_input_strings_to_prevent_xss_attacks/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Basic HTML escape to prevent XSS\npublic static String sanitizeForXSS(String input) {\n    if (input == null) return null;\n    return input.replace(\"&amp;\", \"&amp;amp;\")\n                .replace(\"&lt;\", \"&amp;lt;\")\n                .replace(\"&gt;\", \"&amp;gt;\")\n                .replace(\"\\\"\", \"&amp;quot;\")\n                .replace(\"'\", \"&amp;#x27;\")\n                .replace(\"/\", \"&amp;#x2F;\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__sanitize_input_strings_to_prevent_xss_attacks/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Basic HTML escape to prevent XSS\ndef sanitize_for_xss(input):\n    if input is None:\n        return None\n    return (input.replace('&amp;', '&amp;amp;')\n                .replace('&lt;', '&amp;lt;')\n                .replace('&gt;', '&amp;gt;')\n                .replace('\"', '&amp;quot;')\n                .replace(\"'\", '&amp;#x27;')\n                .replace('/', '&amp;#x2F;'))\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__sanitize_input_strings_to_prevent_xss_attacks/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Replace special HTML characters with their corresponding HTML entities.</li> <li>Prevents injection of HTML/JS code via user input.</li> </ul> <p>Edge Cases: - Null/None input: returns None. - Already escaped input: escapes again (idempotent). - Only basic HTML characters are handled; for production, use a library.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__sanitize_input_strings_to_prevent_xss_attacks/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of input Python O(n) O(n) n = length of input","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__sanitize_input_strings_to_prevent_xss_attacks/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_api_response_fields_using_string_assertions/","title":"\ud83e\udde0 Problem: Validate API response fields using string assertions","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_api_response_fields_using_string_assertions/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Validate API response fields using string assertions.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_api_response_fields_using_string_assertions/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Assert that a response contains a field value\npublic static boolean assertFieldContains(String response, String field, String expectedValue) {\n    return response.contains(field + \":\" + expectedValue);\n}\n\n// 2. Assert that a response does not contain a field\npublic static boolean assertFieldAbsent(String response, String field) {\n    return !response.contains(field + \":\");\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_api_response_fields_using_string_assertions/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Assert that a response contains a field value\ndef assert_field_contains(response, field, expected_value):\n    return f\"{field}:{expected_value}\" in response\n\n# 2. Assert that a response does not contain a field\ndef assert_field_absent(response, field):\n    return f\"{field}:\" not in response\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_api_response_fields_using_string_assertions/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use string containment to check for field presence or absence in a response.</li> <li>Simple and works for flat string responses; for JSON, parse and check keys/values.</li> </ul> <p>Edge Cases: - Field present but value different: not matched. - Field substring in another field: may cause false positives. - For structured data, use a parser.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_api_response_fields_using_string_assertions/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of response Python O(n) O(1) n = length of response","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_api_response_fields_using_string_assertions/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_urls_and_redirect_strings_in_automation_tests/","title":"\ud83e\udde0 Problem: Validate URLs and redirect strings in automation tests","text":"<p>Category: SDET Use Cases Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_urls_and_redirect_strings_in_automation_tests/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Validate URLs and redirect strings in automation tests.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_urls_and_redirect_strings_in_automation_tests/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Validate URL format using regex\npublic static boolean isValidUrl(String url) {\n    return url.matches(\"^(https?://)?([\\\\w.-]+)\\\\.([a-z]{2,6})([/\\\\w .-]*)*/?$\\\");\n}\n\n// 2. Check if redirect string matches expected pattern\npublic static boolean isValidRedirect(String redirect, String expected) {\n    return redirect.equals(expected);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_urls_and_redirect_strings_in_automation_tests/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Validate URL format using regex\ndef is_valid_url(url):\n    import re\n    return bool(re.match(r'^(https?://)?([\\w.-]+)\\.([a-z]{2,6})([/\\w .-]*)*/?$', url))\n\n# 2. Check if redirect string matches expected pattern\ndef is_valid_redirect(redirect, expected):\n    return redirect == expected\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_urls_and_redirect_strings_in_automation_tests/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use regex to validate URL format (basic check).</li> <li>Compare redirect string to expected value.</li> </ul> <p>Edge Cases: - URL regex is basic; may not cover all valid URLs. - Empty or null input: returns false. - For production, use a URL parsing library.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_urls_and_redirect_strings_in_automation_tests/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of url Python O(n) O(1) n = length of url","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SDET_Use_Cases__validate_urls_and_redirect_strings_in_automation_tests/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__check_if_two_strings_are_one_edit_away/","title":"\ud83e\udde0 Problem: Check if two strings are one edit away","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__check_if_two_strings_are_one_edit_away/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Check if two strings are one edit away.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__check_if_two_strings_are_one_edit_away/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. One-pass check\npublic static boolean oneEditAway(String s1, String s2) {\n    int m = s1.length(), n = s2.length();\n    if (Math.abs(m - n) &gt; 1) return false;\n    String a = m &lt; n ? s1 : s2;\n    String b = m &lt; n ? s2 : s1;\n    int i = 0, j = 0, edits = 0;\n    while (i &lt; a.length() &amp;&amp; j &lt; b.length()) {\n        if (a.charAt(i) != b.charAt(j)) {\n            if (++edits &gt; 1) return false;\n            if (a.length() != b.length()) j++;\n        } else {\n            i++; j++;\n        }\n        j++;\n    }\n    return edits + (b.length() - j) &lt;= 1;\n}\n\n// 2. Split by length difference\npublic static boolean oneEditAwayAlt(String s1, String s2) {\n    int m = s1.length(), n = s2.length();\n    if (Math.abs(m - n) &gt; 1) return false;\n    if (m == n) return oneReplace(s1, s2);\n    if (m + 1 == n) return oneInsert(s1, s2);\n    if (m - 1 == n) return oneInsert(s2, s1);\n    return false;\n}\nprivate static boolean oneReplace(String s1, String s2) {\n    boolean found = false;\n    for (int i = 0; i &lt; s1.length(); i++) {\n        if (s1.charAt(i) != s2.charAt(i)) {\n            if (found) return false;\n            found = true;\n        }\n    }\n    return true;\n}\nprivate static boolean oneInsert(String s1, String s2) {\n    int i = 0, j = 0;\n    while (i &lt; s1.length() &amp;&amp; j &lt; s2.length()) {\n        if (s1.charAt(i) != s2.charAt(j)) {\n            if (i != j) return false;\n            j++;\n        } else {\n            i++; j++;\n        }\n    }\n    return true;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__check_if_two_strings_are_one_edit_away/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. One-pass check\ndef one_edit_away(s1, s2):\n    m, n = len(s1), len(s2)\n    if abs(m - n) &gt; 1:\n        return False\n    a, b = (s1, s2) if m &lt; n else (s2, s1)\n    i = j = edits = 0\n    while i &lt; len(a) and j &lt; len(b):\n        if a[i] != b[j]:\n            if edits == 1:\n                return False\n            edits += 1\n            if len(a) != len(b):\n                j += 1\n        else:\n            i += 1\n            j += 1\n        j += 1\n    return edits + (len(b) - j) &lt;= 1\n\n# 2. Split by length difference\ndef one_edit_away_alt(s1, s2):\n    m, n = len(s1), len(s2)\n    if abs(m - n) &gt; 1:\n        return False\n    if m == n:\n        return one_replace(s1, s2)\n    if m + 1 == n:\n        return one_insert(s1, s2)\n    if m - 1 == n:\n        return one_insert(s2, s1)\n    return False\n\ndef one_replace(s1, s2):\n    found = False\n    for a, b in zip(s1, s2):\n        if a != b:\n            if found:\n                return False\n            found = True\n    return True\n\ndef one_insert(s1, s2):\n    i = j = 0\n    while i &lt; len(s1) and j &lt; len(s2):\n        if s1[i] != s2[j]:\n            if i != j:\n                return False\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return True\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__check_if_two_strings_are_one_edit_away/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>If the length difference is more than 1, return false.</li> <li>If lengths are equal, check for at most one replacement.</li> <li>If lengths differ by 1, check for at most one insertion/deletion.</li> <li>Use two pointers to compare characters and count edits.</li> </ul> <p>Edge Cases: - Both strings empty: true. - One empty, one length 1: true. - More than one edit needed: false.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__check_if_two_strings_are_one_edit_away/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(1) n = length of shorter string Python O(n) O(1) n = length of shorter string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__check_if_two_strings_are_one_edit_away/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__count_and_group_anagrams_in_a_list_of_strings/","title":"\ud83e\udde0 Problem: Count and group anagrams in a list of strings","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__count_and_group_anagrams_in_a_list_of_strings/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Count and group anagrams in a list of strings.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__count_and_group_anagrams_in_a_list_of_strings/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Group anagrams using HashMap\npublic static List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {\n    Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();\n    for (String s : strs) {\n        char[] ca = s.toCharArray();\n        Arrays.sort(ca);\n        String key = new String(ca);\n        map.computeIfAbsent(key, k -&gt; new ArrayList&lt;&gt;()).add(s);\n    }\n    return new ArrayList&lt;&gt;(map.values());\n}\n\n// 2. Count anagram groups\npublic static int countAnagramGroups(String[] strs) {\n    Set&lt;String&gt; set = new HashSet&lt;&gt;();\n    for (String s : strs) {\n        char[] ca = s.toCharArray();\n        Arrays.sort(ca);\n        set.add(new String(ca));\n    }\n    return set.size();\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__count_and_group_anagrams_in_a_list_of_strings/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Group anagrams using defaultdict\ndef group_anagrams(strs):\n    from collections import defaultdict\n    groups = defaultdict(list)\n    for s in strs:\n        key = ''.join(sorted(s))\n        groups[key].append(s)\n    return list(groups.values())\n\n# 2. Count anagram groups\ndef count_anagram_groups(strs):\n    return len({''.join(sorted(s)) for s in strs})\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__count_and_group_anagrams_in_a_list_of_strings/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Sort each string to get a canonical form; group or count by this key.</li> <li>Use a map/dictionary to collect lists of anagrams.</li> <li>The number of unique sorted keys gives the number of anagram groups.</li> </ul> <p>Edge Cases: - Empty input returns empty list or 0. - Single string: one group. - Strings with different lengths cannot be anagrams.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__count_and_group_anagrams_in_a_list_of_strings/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n * k log k) O(n * k) n = #strings, k = max string length Python O(n * k log k) O(n * k) n = #strings, k = max string length","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__count_and_group_anagrams_in_a_list_of_strings/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__encode_and_decode_strings_like_in_url_shorteners/","title":"\ud83e\udde0 Problem: Encode and decode strings (like in URL shorteners)","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__encode_and_decode_strings_like_in_url_shorteners/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Encode and decode strings (like in URL shorteners).</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__encode_and_decode_strings_like_in_url_shorteners/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Simple Base62 encoding/decoding for integers (common in URL shorteners)\npublic class Codec {\n    private static final String BASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    public String encode(int num) {\n        if (num == 0) return \"0\";\n        StringBuilder sb = new StringBuilder();\n        while (num &gt; 0) {\n            sb.append(BASE62.charAt(num % 62));\n            num /= 62;\n        }\n        return sb.reverse().toString();\n    }\n    public int decode(String s) {\n        int num = 0;\n        for (char c : s.toCharArray()) {\n            num = num * 62 + BASE62.indexOf(c);\n        }\n        return num;\n    }\n}\n\n// 2. Encode/decode with a map (for arbitrary strings)\npublic class StringCodec {\n    private Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n    private Map&lt;String, String&gt; rev = new HashMap&lt;&gt;();\n    private int id = 0;\n    public String encode(String longUrl) {\n        String shortUrl = \"http://short.url/\" + id++;\n        map.put(shortUrl, longUrl);\n        rev.put(longUrl, shortUrl);\n        return shortUrl;\n    }\n    public String decode(String shortUrl) {\n        return map.get(shortUrl);\n    }\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__encode_and_decode_strings_like_in_url_shorteners/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Simple Base62 encoding/decoding for integers\nBASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\ndef encode(num):\n    if num == 0:\n        return \"0\"\n    s = []\n    while num &gt; 0:\n        s.append(BASE62[num % 62])\n        num //= 62\n    return ''.join(reversed(s))\n\ndef decode(s):\n    num = 0\n    for c in s:\n        num = num * 62 + BASE62.index(c)\n    return num\n\n# 2. Encode/decode with a map (for arbitrary strings)\nclass Codec:\n    def __init__(self):\n        self.map = {}\n        self.rev = {}\n        self.id = 0\n    def encode(self, longUrl):\n        shortUrl = f\"http://short.url/{self.id}\"\n        self.map[shortUrl] = longUrl\n        self.rev[longUrl] = shortUrl\n        self.id += 1\n        return shortUrl\n    def decode(self, shortUrl):\n        return self.map.get(shortUrl)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__encode_and_decode_strings_like_in_url_shorteners/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Base62: Used to encode integers to a short string (common for numeric IDs in URL shorteners).</li> <li>Map-based: For arbitrary strings, use a map to store the mapping between original and shortened URLs.</li> <li>In real systems, collision handling and persistence are needed.</li> </ul> <p>Edge Cases: - Encoding/decoding 0. - Decoding unknown short URLs returns null/None. - Repeated encoding of the same URL.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__encode_and_decode_strings_like_in_url_shorteners/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(log n) O(1) For Base62; n = integer value Python O(log n) O(1) For Base62; n = integer value","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__encode_and_decode_strings_like_in_url_shorteners/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_all_permutations_of_a_string/","title":"\ud83e\udde0 Problem: Find all permutations of a string","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_all_permutations_of_a_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Find all permutations of a string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_all_permutations_of_a_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Backtracking (recursive)\npublic static List&lt;String&gt; permute(String s) {\n    List&lt;String&gt; result = new ArrayList&lt;&gt;();\n    permuteHelper(s.toCharArray(), 0, result);\n    return result;\n}\nprivate static void permuteHelper(char[] arr, int l, List&lt;String&gt; result) {\n    if (l == arr.length) {\n        result.add(new String(arr));\n        return;\n    }\n    for (int i = l; i &lt; arr.length; i++) {\n        swap(arr, l, i);\n        permuteHelper(arr, l + 1, result);\n        swap(arr, l, i);\n    }\n}\nprivate static void swap(char[] arr, int i, int j) {\n    char temp = arr[i]; arr[i] = arr[j]; arr[j] = temp;\n}\n\n// 2. Using Set to avoid duplicates (for strings with duplicate chars)\npublic static Set&lt;String&gt; permuteUnique(String s) {\n    Set&lt;String&gt; result = new HashSet&lt;&gt;();\n    permuteUniqueHelper(s.toCharArray(), 0, result);\n    return result;\n}\nprivate static void permuteUniqueHelper(char[] arr, int l, Set&lt;String&gt; result) {\n    if (l == arr.length) {\n        result.add(new String(arr));\n        return;\n    }\n    Set&lt;Character&gt; seen = new HashSet&lt;&gt;();\n    for (int i = l; i &lt; arr.length; i++) {\n        if (seen.add(arr[i])) {\n            swap(arr, l, i);\n            permuteUniqueHelper(arr, l + 1, result);\n            swap(arr, l, i);\n        }\n    }\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_all_permutations_of_a_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Backtracking (recursive)\ndef permute(s):\n    result = []\n    def backtrack(path, used):\n        if len(path) == len(s):\n            result.append(''.join(path))\n            return\n        for i, c in enumerate(s):\n            if used[i]: continue\n            used[i] = True\n            backtrack(path + [c], used)\n            used[i] = False\n    backtrack([], [False]*len(s))\n    return result\n\n# 2. Using set to avoid duplicates (for strings with duplicate chars)\ndef permute_unique(s):\n    result = set()\n    def backtrack(path, used):\n        if len(path) == len(s):\n            result.add(''.join(path))\n            return\n        for i, c in enumerate(s):\n            if used[i]: continue\n            used[i] = True\n            backtrack(path + [c], used)\n            used[i] = False\n    backtrack([], [False]*len(s))\n    return list(result)\n\n# 3. Using itertools (for reference)\nfrom itertools import permutations\ndef permute_itertools(s):\n    return [''.join(p) for p in set(permutations(s))]\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_all_permutations_of_a_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use backtracking to generate all possible arrangements of the string's characters.</li> <li>For strings with duplicate characters, use a set to avoid duplicate permutations.</li> <li>Python's <code>itertools.permutations</code> can be used for a concise solution.</li> </ul> <p>Edge Cases: - Empty string: returns [\"\"]. - Single character: returns [char]. - Duplicates: use set to avoid repeated permutations.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_all_permutations_of_a_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n!) O(n!) n = length of string Python O(n!) O(n!) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_all_permutations_of_a_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_common_prefix_among_a_set_of_strings/","title":"\ud83e\udde0 Problem: Find the longest common prefix among a set of strings","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_common_prefix_among_a_set_of_strings/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Find the longest common prefix among a set of strings.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_common_prefix_among_a_set_of_strings/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Horizontal scanning\npublic static String longestCommonPrefix(String[] strs) {\n    if (strs == null || strs.length == 0) return \"\";\n    String prefix = strs[0];\n    for (int i = 1; i &lt; strs.length; i++) {\n        while (strs[i].indexOf(prefix) != 0) {\n            prefix = prefix.substring(0, prefix.length() - 1);\n            if (prefix.isEmpty()) return \"\";\n        }\n    }\n    return prefix;\n}\n\n// 2. Vertical scanning\npublic static String longestCommonPrefixVertical(String[] strs) {\n    if (strs == null || strs.length == 0) return \"\";\n    for (int i = 0; i &lt; strs[0].length(); i++) {\n        char c = strs[0].charAt(i);\n        for (int j = 1; j &lt; strs.length; j++) {\n            if (i == strs[j].length() || strs[j].charAt(i) != c) {\n                return strs[0].substring(0, i);\n            }\n        }\n    }\n    return strs[0];\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_common_prefix_among_a_set_of_strings/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Horizontal scanning\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return \"\"\n    return prefix\n\n# 2. Vertical scanning\ndef longest_common_prefix_vertical(strs):\n    if not strs:\n        return \"\"\n    for i in range(len(strs[0])):\n        c = strs[0][i]\n        for s in strs[1:]:\n            if i == len(s) or s[i] != c:\n                return strs[0][:i]\n    return strs[0]\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_common_prefix_among_a_set_of_strings/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Horizontal scanning: Start with the first string as prefix, reduce it until all strings start with it.</li> <li>Vertical scanning: Compare characters at each position across all strings.</li> <li>Return the prefix found, or empty string if none exists.</li> </ul> <p>Edge Cases: - Empty input: return empty string. - Only one string: return itself. - No common prefix: return empty string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_common_prefix_among_a_set_of_strings/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n * m) O(1) n = #strings, m = min string length Python O(n * m) O(1) n = #strings, m = min string length","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_common_prefix_among_a_set_of_strings/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_substring_without_repeating_characters/","title":"\ud83e\udde0 Problem: Find the longest substring without repeating characters","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_substring_without_repeating_characters/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Find the longest substring without repeating characters.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_substring_without_repeating_characters/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Sliding window with HashSet\npublic static int lengthOfLongestSubstringSet(String s) {\n    int n = s.length(), ans = 0;\n    Set&lt;Character&gt; set = new HashSet&lt;&gt;();\n    int i = 0, j = 0;\n    while (i &lt; n &amp;&amp; j &lt; n) {\n        if (!set.contains(s.charAt(j))) {\n            set.add(s.charAt(j++));\n            ans = Math.max(ans, j - i);\n        } else {\n            set.remove(s.charAt(i++));\n        }\n    }\n    return ans;\n}\n\n// 2. Sliding window with int[256] for ASCII\npublic static int lengthOfLongestSubstringArray(String s) {\n    int n = s.length(), ans = 0;\n    int[] index = new int[256]; // stores last index + 1\n    for (int j = 0, i = 0; j &lt; n; j++) {\n        i = Math.max(index[s.charAt(j)], i);\n        ans = Math.max(ans, j - i + 1);\n        index[s.charAt(j)] = j + 1;\n    }\n    return ans;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_substring_without_repeating_characters/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Sliding window with set\ndef length_of_longest_substring_set(s):\n    seen = set()\n    left = result = 0\n    for right, char in enumerate(s):\n        while char in seen:\n            seen.remove(s[left])\n            left += 1\n        seen.add(char)\n        result = max(result, right - left + 1)\n    return result\n\n# 2. Sliding window with dict (optimized)\ndef length_of_longest_substring_dict(s):\n    last = {}\n    left = result = 0\n    for right, char in enumerate(s):\n        if char in last and last[char] &gt;= left:\n            left = last[char] + 1\n        last[char] = right\n        result = max(result, right - left + 1)\n    return result\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_substring_without_repeating_characters/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Use a sliding window to maintain a substring with unique characters.</li> <li>Expand the window by moving the right pointer; if a duplicate is found, move the left pointer to remove duplicates.</li> <li>Use a set or a map/array to track the last seen positions of characters for optimization.</li> </ul> <p>Edge Cases: - Empty string returns 0. - All unique characters: returns length of string. - All same characters: returns 1.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_substring_without_repeating_characters/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(min(n, m)) m = charset size Python O(n) O(min(n, m)) m = charset size","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__find_the_longest_substring_without_repeating_characters/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_basic_string_compression/","title":"\ud83e\udde0 Problem: Implement basic string compression","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_basic_string_compression/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Implement basic string compression.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_basic_string_compression/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Basic string compression (aabcccccaaa -&gt; a2b1c5a3)\npublic static String compress(String s) {\n    if (s == null || s.isEmpty()) return s;\n    StringBuilder sb = new StringBuilder();\n    int count = 1;\n    for (int i = 1; i &lt;= s.length(); i++) {\n        if (i == s.length() || s.charAt(i) != s.charAt(i - 1)) {\n            sb.append(s.charAt(i - 1)).append(count);\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    String compressed = sb.toString();\n    return compressed.length() &lt; s.length() ? compressed : s;\n}\n\n// 2. Return compressed only if shorter\npublic static String compressIfShorter(String s) {\n    String compressed = compress(s);\n    return compressed.length() &lt; s.length() ? compressed : s;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_basic_string_compression/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Basic string compression (aabcccccaaa -&gt; a2b1c5a3)\ndef compress(s):\n    if not s:\n        return s\n    result = []\n    count = 1\n    for i in range(1, len(s) + 1):\n        if i == len(s) or s[i] != s[i-1]:\n            result.append(s[i-1] + str(count))\n            count = 1\n        else:\n            count += 1\n    compressed = ''.join(result)\n    return compressed if len(compressed) &lt; len(s) else s\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_basic_string_compression/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Count consecutive characters and append the character and count to the result.</li> <li>Only return the compressed string if it is shorter than the original.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - No compression if result is not shorter. - Single character returns itself.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_basic_string_compression/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_basic_string_compression/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_strstr_-_find_the_index_of_the_first_occurrence_of_substring/","title":"\ud83e\udde0 Problem: Implement strStr() \u2013 find the index of the first occurrence of substring","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_strstr_-_find_the_index_of_the_first_occurrence_of_substring/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Implement strStr() \u2013 find the index of the first occurrence of substring.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_strstr_-_find_the_index_of_the_first_occurrence_of_substring/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Using built-in indexOf\npublic static int strStrIndexOf(String haystack, String needle) {\n    return haystack.indexOf(needle);\n}\n\n// 2. Manual sliding window\npublic static int strStrManual(String haystack, String needle) {\n    if (needle.isEmpty()) return 0;\n    int n = haystack.length(), m = needle.length();\n    for (int i = 0; i &lt;= n - m; i++) {\n        if (haystack.substring(i, i + m).equals(needle)) return i;\n    }\n    return -1;\n}\n\n// 3. KMP Algorithm (efficient for repeated searches)\npublic static int strStrKMP(String haystack, String needle) {\n    if (needle.isEmpty()) return 0;\n    int[] lps = computeLPSArray(needle);\n    int i = 0, j = 0;\n    while (i &lt; haystack.length()) {\n        if (haystack.charAt(i) == needle.charAt(j)) {\n            i++; j++;\n            if (j == needle.length()) return i - j;\n        } else if (j &gt; 0) {\n            j = lps[j - 1];\n        } else {\n            i++;\n        }\n    }\n    return -1;\n}\nprivate static int[] computeLPSArray(String pat) {\n    int[] lps = new int[pat.length()];\n    int len = 0, i = 1;\n    while (i &lt; pat.length()) {\n        if (pat.charAt(i) == pat.charAt(len)) {\n            lps[i++] = ++len;\n        } else if (len &gt; 0) {\n            len = lps[len - 1];\n        } else {\n            lps[i++] = 0;\n        }\n    }\n    return lps;\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_strstr_-_find_the_index_of_the_first_occurrence_of_substring/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Using built-in find()\ndef str_str_builtin(haystack, needle):\n    return haystack.find(needle)\n\n# 2. Manual sliding window\ndef str_str_manual(haystack, needle):\n    if needle == \"\":\n        return 0\n    n, m = len(haystack), len(needle)\n    for i in range(n - m + 1):\n        if haystack[i:i+m] == needle:\n            return i\n    return -1\n\n# 3. KMP Algorithm\ndef str_str_kmp(haystack, needle):\n    if needle == \"\":\n        return 0\n    def build_lps(pat):\n        lps = [0] * len(pat)\n        length = 0\n        i = 1\n        while i &lt; len(pat):\n            if pat[i] == pat[length]:\n                length += 1\n                lps[i] = length\n                i += 1\n            elif length &gt; 0:\n                length = lps[length - 1]\n            else:\n                lps[i] = 0\n                i += 1\n        return lps\n    lps = build_lps(needle)\n    i = j = 0\n    while i &lt; len(haystack):\n        if haystack[i] == needle[j]:\n            i += 1\n            j += 1\n            if j == len(needle):\n                return i - j\n        elif j &gt; 0:\n            j = lps[j - 1]\n        else:\n            i += 1\n    return -1\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_strstr_-_find_the_index_of_the_first_occurrence_of_substring/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Built-in: Use <code>indexOf</code> (Java) or <code>find</code> (Python) for a direct solution.</li> <li>Manual: Slide a window of the needle's length over the haystack and compare substrings.</li> <li>KMP: Preprocess the needle to build an LPS (Longest Prefix Suffix) array for efficient searching, especially useful for repeated searches.</li> </ul> <p>Edge Cases: - If <code>needle</code> is empty, return 0. - If <code>needle</code> is longer than <code>haystack</code>, return -1. - If <code>needle</code> is not found, return -1.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_strstr_-_find_the_index_of_the_first_occurrence_of_substring/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n + m) O(m) KMP; n = len(haystack), m = len(needle) Python O(n + m) O(m) KMP; n = len(haystack), m = len(needle)","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__implement_strstr_-_find_the_index_of_the_first_occurrence_of_substring/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__longest_palindromic_substring/","title":"\ud83e\udde0 Problem: Longest palindromic substring","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__longest_palindromic_substring/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Longest palindromic substring.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__longest_palindromic_substring/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Expand Around Center\npublic static String longestPalindrome(String s) {\n    if (s == null || s.length() &lt; 1) return \"\";\n    int start = 0, end = 0;\n    for (int i = 0; i &lt; s.length(); i++) {\n        int len1 = expandFromCenter(s, i, i);\n        int len2 = expandFromCenter(s, i, i + 1);\n        int len = Math.max(len1, len2);\n        if (len &gt; end - start) {\n            start = i - (len - 1) / 2;\n            end = i + len / 2;\n        }\n    }\n    return s.substring(start, end + 1);\n}\nprivate static int expandFromCenter(String s, int left, int right) {\n    while (left &gt;= 0 &amp;&amp; right &lt; s.length() &amp;&amp; s.charAt(left) == s.charAt(right)) {\n        left--;\n        right++;\n    }\n    return right - left - 1;\n}\n\n// 2. Dynamic Programming (for reference)\npublic static String longestPalindromeDP(String s) {\n    int n = s.length();\n    if (n &lt; 1) return \"\";\n    boolean[][] dp = new boolean[n][n];\n    int start = 0, maxLen = 1;\n    for (int i = 0; i &lt; n; i++) dp[i][i] = true;\n    for (int i = n - 1; i &gt;= 0; i--) {\n        for (int j = i + 1; j &lt; n; j++) {\n            if (s.charAt(i) == s.charAt(j)) {\n                if (j - i == 1 || dp[i + 1][j - 1]) {\n                    dp[i][j] = true;\n                    if (j - i + 1 &gt; maxLen) {\n                        start = i;\n                        maxLen = j - i + 1;\n                    }\n                }\n            }\n        }\n    }\n    return s.substring(start, start + maxLen);\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__longest_palindromic_substring/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Expand Around Center\ndef longest_palindrome(s):\n    if not s:\n        return \"\"\n    start = end = 0\n    for i in range(len(s)):\n        l1 = expand(s, i, i)\n        l2 = expand(s, i, i+1)\n        l = max(l1, l2)\n        if l &gt; end - start:\n            start = i - (l - 1) // 2\n            end = i + l // 2\n    return s[start:end+1]\n\ndef expand(s, left, right):\n    while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return right - left - 1\n\n# 2. Dynamic Programming (for reference)\ndef longest_palindrome_dp(s):\n    n = len(s)\n    if n &lt; 1:\n        return \"\"\n    dp = [[False]*n for _ in range(n)]\n    start = 0\n    max_len = 1\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                if j - i == 1 or dp[i+1][j-1]:\n                    dp[i][j] = True\n                    if j - i + 1 &gt; max_len:\n                        start = i\n                        max_len = j - i + 1\n    return s[start:start+max_len]\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__longest_palindromic_substring/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Expand Around Center: For each character (and between characters), expand outward as long as the substring is a palindrome.</li> <li>Dynamic Programming: Use a table to record palindromic substrings and build up to longer ones.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - All characters same: returns the whole string. - Multiple palindromes of same length: returns the first found.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__longest_palindromic_substring/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n^2) O(1)/O(n^2) Expand: O(1) space, DP: O(n^2) Python O(n^2) O(1)/O(n^2) Expand: O(1) space, DP: O(n^2)","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__longest_palindromic_substring/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__run-length_encoding_of_a_string/","title":"\ud83e\udde0 Problem: Run-length encoding of a string","text":"<p>Category: String Algorithms Tags: string manipulation, java, python</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__run-length_encoding_of_a_string/#requirements","title":"\u2705 Requirements","text":"<p>Define a function to solve the following:</p> <p>Run-length encoding of a string.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__run-length_encoding_of_a_string/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>// 1. Simple run-length encoding\npublic static String runLengthEncode(String s) {\n    if (s == null || s.isEmpty()) return \"\";\n    StringBuilder sb = new StringBuilder();\n    int count = 1;\n    for (int i = 1; i &lt;= s.length(); i++) {\n        if (i == s.length() || s.charAt(i) != s.charAt(i - 1)) {\n            sb.append(s.charAt(i - 1)).append(count);\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    return sb.toString();\n}\n\n// 2. Decode run-length encoded string\npublic static String runLengthDecode(String s) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i &lt; s.length(); ) {\n        char c = s.charAt(i++);\n        StringBuilder num = new StringBuilder();\n        while (i &lt; s.length() &amp;&amp; Character.isDigit(s.charAt(i))) {\n            num.append(s.charAt(i++));\n        }\n        int count = Integer.parseInt(num.toString());\n        for (int j = 0; j &lt; count; j++) sb.append(c);\n    }\n    return sb.toString();\n}\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__run-length_encoding_of_a_string/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code># 1. Simple run-length encoding\ndef run_length_encode(s):\n    if not s:\n        return \"\"\n    result = []\n    count = 1\n    for i in range(1, len(s) + 1):\n        if i == len(s) or s[i] != s[i-1]:\n            result.append(s[i-1] + str(count))\n            count = 1\n        else:\n            count += 1\n    return ''.join(result)\n\n# 2. Decode run-length encoded string\ndef run_length_decode(s):\n    result = []\n    i = 0\n    while i &lt; len(s):\n        c = s[i]\n        i += 1\n        num = ''\n        while i &lt; len(s) and s[i].isdigit():\n            num += s[i]\n            i += 1\n        result.append(c * int(num))\n    return ''.join(result)\n</code></pre>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__run-length_encoding_of_a_string/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Encoding: Count consecutive characters and append the character and count to the result.</li> <li>Decoding: Read a character, then parse the following digits as the count, and repeat the character.</li> </ul> <p>Edge Cases: - Empty string returns empty string. - Single character returns itself + 1. - Input with digits as characters may need special handling.</p>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__run-length_encoding_of_a_string/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) n = length of string Python O(n) O(n) n = length of string","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/String_Algorithms__run-length_encoding_of_a_string/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Make sure to handle edge cases.</li> <li>Keep solutions readable and efficient.</li> <li>Be ready to discuss time and space trade-offs.</li> </ul>","tags":["java","python","string","coding"]},{"location":"practice-programs-hub/strings/SwapPairs/","title":"\ud83e\udde0 Problem: Swap Pairs of Characters in a String","text":"<p>Write a function to swap every two adjacent characters in a string.</p> <p>Category: Strings Difficulty: Easy Tags: string, syntax, language-specific</p>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SwapPairs/#requirements","title":"\u2705 Requirements","text":"<ul> <li>Input: A string <code>s</code></li> <li>Output: A new string with adjacent characters swapped</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SwapPairs/#examples","title":"\ud83e\uddea Example(s)","text":"<pre><code>Input: s = \"abcd\"\nOutput: \"badc\"\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SwapPairs/#java-solution","title":"\u2615 Java Solution","text":"<pre><code>String s = \"abcd\";\nStringBuilder result = new StringBuilder(s);\nfor (int i = 0; i &lt; s.length() - 1; i += 2) {\n    char temp = result.charAt(i);\n    result.setCharAt(i, result.charAt(i + 1));\n    result.setCharAt(i + 1, temp);\n}\nSystem.out.println(\"Swapped: \" + result.toString());\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SwapPairs/#python-solution","title":"\ud83d\udd35\ud83d\udfe1 Python Solution","text":"<pre><code>s = \"abcd\"\nlst = list(s)\nfor i in range(0, len(lst) - 1, 2):\n    lst[i], lst[i + 1] = lst[i + 1], lst[i]\nprint(\"Swapped:\", \"\".join(lst))\n</code></pre>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SwapPairs/#explanation","title":"\ud83d\udd0d Explanation","text":"<ul> <li>Java:</li> <li>Language-specific syntax demonstrated for the task.</li> <li>Python:</li> <li>Uses intuitive string manipulation methods.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SwapPairs/#time-space-complexity","title":"\u23f1\ufe0f Time &amp; Space Complexity","text":"Language Time Complexity Space Complexity Notes Java O(n) O(n) StringBuilder or Regex Python O(n) O(n) String slicing/lstrip","tags":["java","python","string","easy","language-syntax"]},{"location":"practice-programs-hub/strings/SwapPairs/#interview-tips-notes","title":"\u26a0\ufe0f Interview Tips / Notes","text":"<ul> <li>Understand immutability in strings.</li> <li>Pay attention to index out-of-bound errors.</li> <li>Always validate inputs in real-world code.</li> </ul>","tags":["java","python","string","easy","language-syntax"]},{"location":"randoms/30-days-sdet-intreview-prep/","title":"\ud83e\uddea 30-Day SDET Interview Preparation Plan","text":"<p>A structured and practical 4-week guide to prepare for Software Development Engineer in Test (SDET) interviews, covering core programming, automation, API, tools, and soft skills.</p>"},{"location":"randoms/30-days-sdet-intreview-prep/#week-1-core-programming-data-structures","title":"\ud83d\udcc5 Week 1: Core Programming &amp; Data Structures","text":""},{"location":"randoms/30-days-sdet-intreview-prep/#days-13-core-programming-essentials","title":"\ud83e\udde0 Days 1\u20133: Core Programming Essentials","text":"<ul> <li>Java fundamentals and syntax</li> <li>String manipulation techniques</li> <li>Working with numbers and common algorithms</li> <li>Understanding Time &amp; Space complexity (Big-O notation)</li> <li>Solve 3 LeetCode (Easy\u2013Medium) problems daily</li> <li>OOP (Object-Oriented Programming) principles:</li> <li>Abstraction, Encapsulation, Inheritance, Polymorphism</li> <li>Manual Testing concepts (Test cases, Bug life cycle, STLC, SDLC)</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#days-47-advanced-programming-patterns","title":"\ud83d\udca1 Days 4\u20137: Advanced Programming &amp; Patterns","text":"<ul> <li>Core Data Structures:</li> <li>Arrays, LinkedLists, HashMaps, Stacks, Queues</li> <li>Algorithmic techniques:</li> <li>Searching and Sorting (Binary Search, QuickSort, MergeSort)</li> <li>Trees and Graphs (basic overview and optional deep-dive)</li> <li>Design Patterns relevant for testing:</li> <li>Page Object Model (POM)</li> <li>Factory Pattern</li> <li>Builder Pattern</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#week-2-test-automation-fundamentals","title":"\u2699\ufe0f Week 2: Test Automation Fundamentals","text":""},{"location":"randoms/30-days-sdet-intreview-prep/#days-810-framework-and-testng-basics","title":"\ud83e\uddea Days 8\u201310: Framework and TestNG Basics","text":"<ul> <li>TestNG core concepts</li> <li>Assertions, annotations (<code>@Test</code>, <code>@Before</code>, <code>@After</code>, etc.)</li> <li>Testing architecture principles: reusability, scalability, maintainability</li> <li>Build a basic reusable test framework using Java + TestNG</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#days-1114-web-automation-with-selenium","title":"\ud83c\udf10 Days 11\u201314: Web Automation with Selenium","text":"<ul> <li>Selenium WebDriver core concepts and setup</li> <li>Locators: <code>id</code>, <code>name</code>, <code>css</code>, <code>xpath</code></li> <li>Synchronization: Implicit, Explicit, Fluent Waits</li> <li><code>Actions</code> class: drag and drop, hover, keyboard, etc.</li> <li>Implement Page Object Model</li> <li>Build a mini e-commerce site test project</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#week-3-api-testing-advanced-topics","title":"\ud83d\udd0c Week 3: API Testing &amp; Advanced Topics","text":""},{"location":"randoms/30-days-sdet-intreview-prep/#days-1517-api-testing-rest-assuredpostman","title":"\ud83d\udd04 Days 15\u201317: API Testing (Rest Assured/Postman)","text":"<ul> <li>REST API principles (CRUD, statelessness)</li> <li>Tools:</li> <li>Postman (Collections, Environment, Pre-request scripts)</li> <li>Rest Assured basics and advanced validations</li> <li>JSON parsing (using GSON, Jackson)</li> <li>OAuth 1.0/2.0, API Keys, and Token Handling</li> <li>HTTP methods (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>) and status codes</li> <li>API Test Framework Design (data-driven, reusable utilities)</li> <li>Mocking with Postman Mock Server / WireMock</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#days-1821-cicd-and-test-infrastructure","title":"\u2699\ufe0f Days 18\u201321: CI/CD and Test Infrastructure","text":"<ul> <li>CI/CD Fundamentals: Jenkins, GitHub Actions basics</li> <li>Docker for testers: containers, Dockerfile, Selenium Grid setup</li> <li>Cross-browser testing strategies and cloud options (BrowserStack/SauceLabs)</li> <li>Test reporting: Allure Reports setup and integration</li> <li>Parallel and distributed testing</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#week-4-system-design-interview-practice","title":"\ud83d\udcbc Week 4: System Design &amp; Interview Practice","text":""},{"location":"randoms/30-days-sdet-intreview-prep/#days-2224-system-framework-design","title":"\ud83e\udde9 Days 22\u201324: System &amp; Framework Design","text":"<ul> <li>Common test automation architecture patterns</li> <li>Choosing the right framework (Hybrid vs Modular vs Data-Driven)</li> <li>Configuration management using <code>config.properties</code>, <code>YAML</code></li> <li>End-to-End framework design task:</li> <li>Web + API + Data handling + Reporting + CI setup</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#days-2527-mock-interviews-scenario-practice","title":"\ud83c\udfa4 Days 25\u201327: Mock Interviews &amp; Scenario Practice","text":"<ul> <li>Daily mock interviews (1 per day)</li> <li>Coding exercises in a whiteboard/online IDE format</li> <li>System design walkthrough (automation architecture)</li> <li>Common QA scenarios: regression, flaky tests, handling bugs</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#days-2830-final-interview-prep-soft-skills","title":"\ud83c\udfaf Days 28\u201330: Final Interview Prep &amp; Soft Skills","text":"<ul> <li>STAR Method practice (Situation, Task, Action, Result)</li> <li>Project explanation walkthrough (domain, tech stack, challenges)</li> <li>Behavioral questions:</li> <li>Conflict resolution</li> <li>Feedback handling</li> <li>Career goals</li> <li>Framework optimization and review</li> <li>Final mock interview with feedback</li> </ul>"},{"location":"randoms/30-days-sdet-intreview-prep/#tips-for-success","title":"\u2705 Tips for Success","text":"<ul> <li>Keep a coding journal for mistakes and learnings.</li> <li>Practice explaining frameworks as if teaching someone.</li> <li>Record mock interviews for self-review.</li> <li>Focus on debugging and logs during tests.</li> </ul> <p>Good luck! \ud83d\ude80</p>"},{"location":"randoms/Practice-programming-Questions/","title":"SDET Interview Practice Programming Questions","text":"<p>This comprehensive list contains 200+ practice programming questions categorized by difficulty level and topic to help you prepare for SDET interviews. The questions are designed to test both algorithmic thinking and practical testing/automation skills.</p>"},{"location":"randoms/Practice-programming-Questions/#easy-level-80-questions","title":"\ud83d\udd39 Easy Level (80 Questions)","text":""},{"location":"randoms/Practice-programming-Questions/#arrays-strings-20","title":"\ud83e\uddee Arrays &amp; Strings (20)","text":"<ol> <li>Find the maximum element in an array.</li> <li>Reverse a string.</li> <li>Check if two strings are anagrams.</li> <li>Remove duplicates from an array.</li> <li>Find the second largest element in an array.</li> <li>Merge two sorted arrays.</li> <li>Find common elements in two arrays.</li> <li>Count the frequency of elements in an array.</li> <li>Rotate an array by one position.</li> <li>Return the sum of all even numbers in an array.</li> <li>Check if a string is a palindrome.</li> <li>Replace all spaces in a string with <code>\"%20\"</code>.</li> <li>Move all zeros to the end of the array.</li> <li>Find the missing number in a range from 1 to N.</li> <li>Convert a string to an integer.</li> <li>Capitalize the first letter of each word in a sentence.</li> <li>Find the first occurrence of a character in a string.</li> <li>Check if an array is sorted in ascending order.</li> <li>Find the longest word in a sentence.</li> <li>Count words in a string.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#loops-conditions-15","title":"\ud83d\udd04 Loops &amp; Conditions (15)","text":"<ol> <li>Print the Fibonacci series up to N.</li> <li>Check if a number is prime.</li> <li>Find the factorial of a number.</li> <li>Count the number of vowels in a string.</li> <li>Print numbers from 1 to 100 with FizzBuzz logic.</li> <li>Print all prime numbers between 1 and 100.</li> <li>Sum of digits in an integer.</li> <li>Check if a number is a power of two.</li> <li>Find the largest of three numbers.</li> <li>Count digits in a number.</li> <li>Check if a year is a leap year.</li> <li>Calculate simple interest given principal, rate, and time.</li> <li>Print multiplication table for a given number.</li> <li>Check if a number is Armstrong number.</li> <li>Find all factors of a number.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#hashing-sets-10","title":"\ud83e\udde0 Hashing &amp; Sets (10)","text":"<ol> <li>Check for duplicates using a set.</li> <li>Find the first non-repeating character in a string.</li> <li>Implement a hash map (using a dictionary/map in your chosen language).</li> <li>Find the intersection of two arrays using sets.</li> <li>Find all pairs that sum to a target.</li> <li>Count unique words in a sentence.</li> <li>Remove duplicates from a linked list.</li> <li>Check if a string has all unique characters.</li> <li>Group words with the same characters (e.g., \"eat\", \"tea\", \"ate\").</li> <li>Implement a simple LRU cache (basic concept).</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#linked-lists-5","title":"\ud83d\udd17 Linked Lists (5)","text":"<ol> <li>Reverse a linked list.</li> <li>Find the middle of a linked list.</li> <li>Detect a cycle in a linked list.</li> <li>Merge two sorted linked lists.</li> <li>Remove the Nth node from the end of a list.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#testing-logic-automation-oriented-15","title":"\ud83e\uddea Testing Logic &amp; Automation-Oriented (15)","text":"<p>Note: These questions are critical for SDET roles as they test your ability to automate, validate, and debug real-world scenarios.</p> <ol> <li>Write a function to validate an email format (basic regex).</li> <li>Simulate login API test (input/output design, status codes).</li> <li>Write a function to test palindrome detection logic.</li> <li>Debug a function that fails intermittently and identify the root cause.</li> <li>Implement a retry mechanism for flaky tests (e.g., with max attempts).</li> <li>Write a function to compare two JSON objects (deep comparison).</li> <li>Validate a phone number using regex (e.g., a specific format).</li> <li>Create a test data generator for usernames (e.g., unique, valid format).</li> <li>Validate input fields with boundary values (e.g., min/max length, special chars).</li> <li>Create a mock function to simulate a database call (e.g., return predefined data).</li> <li>Write a test case for pagination API (e.g., first page, middle, last, empty).</li> <li>Validate URL format using regex.</li> <li>Generate random test data for different data types.</li> <li>Parse CSV data and validate its structure.</li> <li>Validate date formats in different locales.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#stack-queue-5","title":"\ud83e\uddf1 Stack &amp; Queue (5)","text":"<ol> <li>Implement a stack using an array.</li> <li>Implement a queue using two stacks.</li> <li>Check for balanced parentheses in a string.</li> <li>Implement a simple browser back button using a stack.</li> <li>Reverse a queue.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#miscellaneous-10","title":"\ud83d\udccb Miscellaneous (10)","text":"<ol> <li>Convert a decimal number to binary.</li> <li>Find the GCD (Greatest Common Divisor) of two numbers.</li> <li>Validate if brackets are correctly nested (using a stack).</li> <li>Calculate the average of an array of numbers.</li> <li>Flatten a nested list (1 level deep, e.g., <code>[[1,2],[3,4]]</code> to <code>[1,2,3,4]</code>).</li> <li>Convert temperature between Celsius and Fahrenheit.</li> <li>Calculate compound interest.</li> <li>Find LCM of two numbers.</li> <li>Check if a number is perfect square.</li> <li>Convert binary to decimal.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#medium-level-70-questions","title":"\ud83d\udd38 Medium Level (70 Questions)","text":""},{"location":"randoms/Practice-programming-Questions/#arrays-strings-20_1","title":"\ud83d\udd01 Arrays &amp; Strings (20)","text":"<ol> <li>Find the longest substring without repeating characters.</li> <li>Rotate a matrix by 90 degrees (in-place).</li> <li>Find all subarrays that sum to a target value.</li> <li>Implement wildcard matching (<code>*</code>, <code>?</code>) for strings.</li> <li>Convert a Roman numeral to an integer.</li> <li>Implement string compression (e.g., <code>\"aaabb\"</code> \u2192 <code>\"a3b2\"</code>).</li> <li>Find the longest common prefix among a list of words.</li> <li>Find the majority element in an array (appears more than n/2 times).</li> <li>Search for a target in a rotated sorted array.</li> <li>Implement <code>strstr</code> (substring search) function.</li> <li>Find the minimum window substring containing all characters of another string.</li> <li>Group Anagrams together (e.g., [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]).</li> <li>Implement a function to shuffle an array randomly.</li> <li>Find the kth largest element in an array.</li> <li>Calculate the maximum product subarray.</li> <li>Find the longest palindromic substring.</li> <li>Implement string to integer conversion with error handling.</li> <li>Find all permutations of a string.</li> <li>Check if strings are rotations of each other.</li> <li>Implement basic regex matching (<code>.</code> and <code>*</code>).</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#hash-map-sets-10","title":"\ud83e\udde0 Hash Map / Sets (10)","text":"<ol> <li>Implement a word frequency counter using a hash map.</li> <li>Find two strings that are one edit apart (insert, delete, or replace).</li> <li>Implement an LRU Cache class with <code>get</code>/<code>put</code> operations.</li> <li>Find the longest consecutive sequence in an unsorted array.</li> <li>Implement a basic spell checker with suggestions (e.g., using Levenshtein distance).</li> <li>Find the difference of two arrays (elements present in one but not the other).</li> <li>Design a TinyURL or URL shortener (basic hash map concept).</li> <li>Find the first duplicate in an array.</li> <li>Implement a simple bloom filter.</li> <li>Group strings by length using hash map.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#linked-lists-recursion-10","title":"\ud83d\udccb Linked Lists &amp; Recursion (10)","text":"<ol> <li>Detect and remove a loop in a linked list.</li> <li>Add two numbers represented by linked lists (e.g., <code>(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</code>).</li> <li>Clone a linked list with next and random pointers.</li> <li>Implement recursive string reversal.</li> <li>Flatten a multilevel linked list (e.g., where nodes can have a <code>child</code> pointer).</li> <li>Reverse linked list in groups of k.</li> <li>Find intersection point of two linked lists.</li> <li>Sort a linked list using merge sort.</li> <li>Remove duplicates from sorted linked list.</li> <li>Check if linked list is palindrome.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#stack-queue-trees-15","title":"\ud83e\uddf1 Stack / Queue / Trees (15)","text":"<ol> <li>Evaluate a postfix expression.</li> <li>Serialize and deserialize a binary tree.</li> <li>Find the height of a binary tree.</li> <li>Implement level-order traversal of a binary tree.</li> <li>Check if a binary tree is a Binary Search Tree (BST).</li> <li>Find the lowest common ancestor (LCA) of two nodes in a BST.</li> <li>Implement a Min Stack (stack that also returns min element in O(1)).</li> <li>Implement a queue with a circular buffer.</li> <li>Print all root-to-leaf paths in a binary tree.</li> <li>Convert infix expression to postfix.</li> <li>Invert a binary tree.</li> <li>Find diameter of binary tree.</li> <li>Check if binary tree is balanced.</li> <li>Print nodes at k distance from root.</li> <li>Convert sorted array to BST.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#debugging-challenges-5","title":"\ud83d\udc1e Debugging Challenges (5)","text":"<p>Note: Debugging is a critical skill for SDETs. These challenges focus on identifying and fixing issues in code or systems.</p> <ol> <li>Debug a function that throws a null pointer exception.</li> <li>Identify and fix a memory leak in a program.</li> <li>Debug a failing API test and identify the root cause.</li> <li>Fix a race condition in a multithreaded program.</li> <li>Debug a Selenium test that fails intermittently due to timing issues.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#sdet-specific-logic-15","title":"\ud83e\uddea SDET-Specific Logic (15)","text":"<ol> <li>Write a function to demonstrate a data-driven test framework in code (e.g., reading test data from CSV/Excel).</li> <li>Simulate API request and assert status codes and payload (using a mock HTTP client).</li> <li>Write a function that mocks file uploads to a server (e.g., simulates success/failure).</li> <li>Implement a <code>wait-until-success</code> retry logic with timeout for an operation.</li> <li>Create a test function to validate cookie values in response headers.</li> <li>Validate XML structure programmatically (e.g., using XPath or an XML parser).</li> <li>Compare two log files and return significant differences (e.g., based on keywords).</li> <li>Generate a set of random test inputs with constraints (e.g., numbers within a range, specific string patterns).</li> <li>Write a test case to simulate 1000 parallel users accessing an endpoint (conceptual design/pseudocode for load testing).</li> <li>Implement a mock HTTP server to simulate flaky APIs (e.g., introduce delays, return errors randomly).</li> <li>Design a simple logging utility with different log levels (INFO, WARN, ERROR).</li> <li>How would you test a feature that involves real-time updates (e.g., web sockets)? (Conceptual)</li> <li>Write a function to parse command-line arguments for a test script.</li> <li>Validate JSON schema against a predefined structure.</li> <li>Generate test reports in different formats (HTML, XML, JSON).</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#hard-level-60-questions","title":"\ud83d\udd34 Hard Level (60 Questions)","text":""},{"location":"randoms/Practice-programming-Questions/#advanced-arrays-strings-15","title":"\ud83d\udd01 Advanced Arrays &amp; Strings (15)","text":"<ol> <li>Find the longest substring with at most k distinct characters.</li> <li>Implement regular expression matching (support for <code>*</code>, <code>+</code>, <code>?</code>).</li> <li>Find the longest common subsequence of two strings.</li> <li>Implement string matching using KMP algorithm.</li> <li>Find all anagrams in a string.</li> <li>Implement wildcard pattern matching with <code>*</code> and <code>?</code>.</li> <li>Find the shortest superstring containing all given strings.</li> <li>Implement string interleaving check.</li> <li>Find the longest palindromic subsequence.</li> <li>Implement string matching with backspace character.</li> <li>Find the longest substring with k unique characters.</li> <li>Implement string matching with wildcards.</li> <li>Find the shortest common supersequence.</li> <li>Implement string matching with one mismatch.</li> <li>Find the longest substring with equal 0s and 1s.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#advanced-data-structures-15","title":"\ud83e\udde0 Advanced Data Structures (15)","text":"<ol> <li>Implement a Trie (prefix tree) with insert, search, and delete operations.</li> <li>Design a data structure that supports insert, delete, search, and getRandom in O(1).</li> <li>Implement a segment tree for range sum queries.</li> <li>Design a circular queue with dynamic size.</li> <li>Implement a skip list data structure.</li> <li>Design a data structure for LRU cache with O(1) operations.</li> <li>Implement a disjoint set (union-find) data structure.</li> <li>Design a data structure for efficient range queries.</li> <li>Implement a B-tree data structure.</li> <li>Design a data structure for efficient string operations.</li> <li>Implement a suffix tree for string operations.</li> <li>Design a data structure for efficient graph operations.</li> <li>Implement a bloom filter with configurable false positive rate.</li> <li>Design a data structure for efficient matrix operations.</li> <li>Implement a rope data structure for efficient string operations.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#advanced-trees-graphs-15","title":"\ud83c\udf33 Advanced Trees &amp; Graphs (15)","text":"<ol> <li>Serialize and deserialize a binary tree with null markers.</li> <li>Find the diameter of a binary tree (longest path between any two nodes).</li> <li>Implement level-order traversal with null markers.</li> <li>Check if a binary tree is complete.</li> <li>Find the lowest common ancestor in a binary tree (not necessarily BST).</li> <li>Implement iterative postorder traversal.</li> <li>Find the maximum path sum in a binary tree.</li> <li>Implement Morris traversal for inorder traversal.</li> <li>Check if a binary tree is balanced (height difference \u2264 1).</li> <li>Find the kth smallest element in a BST.</li> <li>Implement a binary search tree with delete operation.</li> <li>Convert a binary tree to a doubly linked list.</li> <li>Find the largest BST subtree in a binary tree.</li> <li>Implement a binary tree iterator.</li> <li>Find the shortest path in a weighted graph.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#cicd-and-test-integration-5","title":"\ud83d\udd04 CI/CD and Test Integration (5)","text":"<p>Note: These challenges focus on integrating tests into CI/CD pipelines and handling complex test scenarios.</p> <ol> <li>Design a CI/CD pipeline that runs tests in parallel and generates reports.</li> <li>Implement a script to trigger tests automatically on code commits.</li> <li>Debug a failing test in a CI/CD pipeline and identify the root cause.</li> <li>Automate the deployment of a test environment using Docker.</li> <li>Integrate performance tests into a CI/CD pipeline and analyze results.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#advanced-sdet-performance-testing-15","title":"\ud83e\uddea Advanced SDET &amp; Performance Testing (15)","text":"<ol> <li>Design a load testing framework that can simulate millions of concurrent users.</li> <li>Implement a distributed test execution system with master-slave architecture.</li> <li>Design a test data management system that can generate, store, and clean test data.</li> <li>Implement a test result aggregation system that can handle large-scale test runs.</li> <li>Design a test automation framework that supports multiple browsers and platforms.</li> <li>Implement a test reporting system with real-time dashboards.</li> <li>Design a test environment management system for dynamic provisioning.</li> <li>Implement a test case prioritization algorithm based on risk and coverage.</li> <li>Design a test execution pipeline with parallel and sequential execution.</li> <li>Implement a test data masking system for sensitive data.</li> <li>Design a test monitoring system that tracks system resources during test execution.</li> <li>Implement a test result comparison system for regression testing.</li> <li>Design a test automation framework that supports keyword-driven testing.</li> <li>Implement a test data generation system with constraints and relationships.</li> <li>Design a test execution scheduler that optimizes resource utilization.</li> </ol>"},{"location":"randoms/Practice-programming-Questions/#interview-preparation-tips","title":"\ud83c\udfaf Interview Preparation Tips","text":""},{"location":"randoms/Practice-programming-Questions/#before-the-interview","title":"\ud83d\udcdd Before the Interview","text":"<ul> <li>Practice coding on platforms like LeetCode, HackerRank, or CodeSignal</li> <li>Review data structures and algorithms fundamentals</li> <li>Prepare examples of your testing experience</li> <li>Practice explaining your thought process while coding</li> <li>Review system design concepts for testing frameworks</li> </ul>"},{"location":"randoms/Practice-programming-Questions/#during-the-interview","title":"\ud83d\udca1 During the Interview","text":"<ul> <li>Clarify requirements before starting to code</li> <li>Think out loud while solving problems</li> <li>Consider edge cases and error handling</li> <li>Discuss time and space complexity of your solutions</li> <li>Ask questions about the problem if needed</li> </ul>"},{"location":"randoms/Practice-programming-Questions/#common-sdet-interview-topics","title":"\ud83d\udd0d Common SDET Interview Topics","text":"<ul> <li>Test automation frameworks (Selenium, Appium, Playwright, Cypress)</li> <li>API testing tools (Postman, RestAssured, Karate)</li> <li>Performance testing (JMeter, Gatling, k6)</li> <li>CI/CD pipelines and test integration (Jenkins, GitHub Actions, Azure DevOps)</li> <li>Test data management and test environment setup (Docker, Kubernetes)</li> <li>Test reporting and metrics (Allure, ExtentReports)</li> <li>Mobile testing and cross-platform testing (BrowserStack, Sauce Labs)</li> <li>Security testing basics (OWASP ZAP, Burp Suite)</li> </ul>"},{"location":"randoms/Practice-programming-Questions/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Books: \"Test Automation with Selenium\", \"API Testing with Postman\"</li> <li>Online Courses: Udemy, Coursera, Pluralsight</li> <li>Practice Platforms: LeetCode, HackerRank, TestDome</li> <li>Testing Tools: Selenium, Appium, JMeter, Postman</li> <li>Frameworks: TestNG, JUnit, PyTest, Cucumber</li> </ul> <p>Total Questions: 245+ | Last Updated: 2024</p> <p>This comprehensive list covers both algorithmic problem-solving and practical SDET skills. Focus on understanding the underlying concepts rather than memorizing solutions. Practice implementing these solutions in your preferred programming language and testing framework.</p>"},{"location":"randoms/sdet-interview-prep/","title":"\ud83d\ude80 SDET Interview Preparation Plan","text":"<p>This plan is designed to equip you with the foundational and advanced skills necessary for an SDET role, covering programming, testing methodologies, automation tools, and DevOps concepts.</p>"},{"location":"randoms/sdet-interview-prep/#phase-1-foundational-skills-programming-manual-testing","title":"\ud83d\udcda Phase 1: Foundational Skills - Programming &amp; Manual Testing","text":"<p>This phase builds your core programming muscle and solidifies your understanding of testing principles.</p>"},{"location":"randoms/sdet-interview-prep/#module-11-core-programming-java-python-data-structures","title":"\ud83e\uddd1\u200d\ud83d\udcbb Module 1.1: Core Programming (Java &amp; Python) &amp; Data Structures","text":"<ul> <li> <p>\ud83c\udfaf Objective: Master fundamental programming concepts in both Java and Python, understand data structures, and analyze algorithm efficiency.</p> </li> <li> <p>Key Concepts &amp; Skills:</p> </li> <li> <p>\ud83d\udee0\ufe0f Practice &amp; Projects:</p> <ul> <li>Solve 15-20 easy to medium problems on LeetCode/HackerRank focusing on arrays, strings, hash maps, and basic algorithms in both Java and Python.</li> <li>Implement common data structures from scratch (e.g., custom Stack, Queue).</li> <li>Write small programs demonstrating OOP principles in both languages.</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#java-core","title":"\ud83d\udfe6 Java Core:","text":"<ul> <li>Review:<ul> <li>Java Basics: Syntax, Keywords, Identifiers, Variables, Data Types, Operators, Type Casting.</li> <li>Flow Control: <code>if-else</code>, <code>switch</code>, <code>for</code>, <code>while</code>, <code>do-while</code>, <code>break</code>, <code>continue</code>.</li> <li>Arrays: Single and Multi-dimensional, Array manipulation.</li> <li>Methods: Definition, parameters, return types, Method Overloading, Recursion.</li> <li>Scope: Local, Instance, Static variables.</li> <li>String Manipulation: <code>String</code>, <code>StringBuilder</code>, <code>StringBuffer</code>, common methods, immutability, String pool.</li> </ul> </li> <li>OOPs (Object-Oriented Programming):<ul> <li>Classes, Objects, Constructors, <code>this</code>, <code>super</code>, <code>static</code>.</li> <li>Modifiers: <code>public</code>, <code>private</code>, <code>protected</code>, default.</li> <li>Inheritance, Encapsulation, Polymorphism, Abstraction.</li> <li>Interfaces, Enums, Packages.</li> </ul> </li> <li>Exception Handling:<ul> <li><code>try-catch-finally</code>, <code>throws</code>, <code>throw</code>.</li> <li>Checked vs. Unchecked Exceptions.</li> <li>Custom Exceptions.</li> </ul> </li> <li>Wrapper Classes:<ul> <li>Autoboxing, Unboxing.</li> </ul> </li> <li>Collections Framework:<ul> <li><code>List</code> (<code>ArrayList</code>, <code>LinkedList</code>), <code>Set</code> (<code>HashSet</code>, <code>TreeSet</code>), <code>Map</code> (<code>HashMap</code>, <code>TreeMap</code>).</li> <li>Generics.</li> </ul> </li> <li>Multi-Threading (Basics):<ul> <li><code>Thread</code> class, <code>Runnable</code> interface.</li> <li>Synchronization concepts (high-level).</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#python-core","title":"\ud83d\udfe8 Python Core:","text":"<ul> <li>Basics:<ul> <li>Syntax, Variables, Data Types (Numbers, Strings, Lists, Tuples, Dictionaries, Sets), Operators.</li> </ul> </li> <li>Control Flow:<ul> <li><code>if-elif-else</code>, <code>for</code> loops, <code>while</code> loops, <code>break</code>, <code>continue</code>.</li> </ul> </li> <li>Functions:<ul> <li>Definition, arguments, return values.</li> </ul> </li> <li>OOP in Python:<ul> <li>Classes, Objects, Inheritance, Polymorphism, Encapsulation (using conventions), Abstraction.</li> </ul> </li> <li>String Manipulation:<ul> <li>String methods, f-strings.</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#data-structures-algorithms","title":"\ud83d\udfe9 Data Structures &amp; Algorithms:","text":"<ul> <li>Core DS:<ul> <li>Arrays, Lists (Python lists), HashMaps/Dictionaries, Stacks, Queues.</li> </ul> </li> <li>Advanced DS (Optional but recommended):<ul> <li>Trees (Binary Tree, BST basics), Graphs (basic concepts).</li> </ul> </li> <li>Algorithms:<ul> <li>Sorting (Bubble, Selection, Insertion, Merge, Quick).</li> <li>Searching (Linear, Binary).</li> </ul> </li> <li>Time/Space Complexity (Big O Notation):<ul> <li>Understand how to analyze algorithm efficiency.</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#module-12-manual-testing-fundamentals","title":"\ud83e\uddea Module 1.2: Manual Testing Fundamentals","text":"<ul> <li> <p>\ud83c\udfaf Objective: Solidify understanding of software testing lifecycle and methodologies.</p> </li> <li> <p>Key Concepts &amp; Skills:</p> <ul> <li>Software Development Life Cycle (SDLC):<ul> <li>Waterfall, Agile (Scrum, Kanban).</li> </ul> </li> <li>Software Testing Life Cycle (STLC):<ul> <li>Requirements Analysis, Test Planning, Test Case Development, Test Environment Setup, Test Execution, Test Cycle Closure.</li> </ul> </li> <li>Testing Types:<ul> <li>Functional: Unit, Integration, System, Acceptance, Regression, Sanity, Smoke.</li> <li>Non-Functional: Performance, Security, Usability, Compatibility, Reliability, Scalability.</li> </ul> </li> <li>Test Case Design Techniques:<ul> <li>Equivalence Partitioning, Boundary Value Analysis, Decision Table Testing, State Transition Testing, Use Case Testing.</li> </ul> </li> <li>Bug Life Cycle &amp; Reporting:<ul> <li>How to write effective bug reports (Steps to reproduce, Expected vs. Actual, Severity, Priority).</li> </ul> </li> <li>Test Plan &amp; Strategy:<ul> <li>Components of a test plan.</li> </ul> </li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Practice &amp; Projects:</p> <ul> <li>Analyze a simple web application and design comprehensive test cases.</li> <li>Practice writing detailed bug reports for simulated defects.</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#phase-2-web-automation","title":"\ud83c\udf10 Phase 2: Web Automation","text":"<p>This phase dives into automating web applications using industry-standard tools.</p>"},{"location":"randoms/sdet-interview-prep/#module-21-test-automation-framework-basics","title":"\ud83d\udee0\ufe0f Module 2.1: Test Automation Framework Basics","text":"<ul> <li> <p>\ud83c\udfaf Objective: Understand the principles of building robust and maintainable test automation frameworks.</p> </li> <li> <p>Key Concepts &amp; Skills:</p> <ul> <li>Test Frameworks:<ul> <li>Java: TestNG / JUnit (Annotations, Assertions, Test Suites, Data Providers, Listeners).</li> <li>Python: Pytest / Unittest (Fixtures, Assertions, Parameterization).</li> </ul> </li> <li>Test Architecture Principles:<ul> <li>Modularity, Reusability, Maintainability, Scalability.</li> </ul> </li> <li>Design Patterns:<ul> <li>Page Object Model (POM), Factory Pattern, Builder Pattern (for test data).</li> </ul> </li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Practice &amp; Projects:</p> <ul> <li>Set up a basic test project using Maven/Gradle (Java) or Poetry/pipenv (Python).</li> <li>Implement a simple test framework structure with a few dummy tests using TestNG/Pytest.</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#module-22-selenium-webdriver","title":"\ud83c\udf10 Module 2.2: Selenium WebDriver","text":"<ul> <li> <p>\ud83c\udfaf Objective: Master web element interaction and advanced Selenium features.</p> </li> <li> <p>Key Concepts &amp; Skills:</p> <ul> <li>Core Concepts: WebDriver interface, Browser drivers.</li> <li>Locators: ID, Name, ClassName, TagName, LinkText, PartialLinkText, CSS Selector, XPath (absolute &amp; relative, common functions). Master XPath and CSS selectors.</li> <li>Waits: Implicit Wait, Explicit Wait (<code>WebDriverWait</code> with <code>ExpectedConditions</code>), Fluent Wait.</li> <li>Browser Interactions: Navigation, <code>get()</code>, <code>getCurrentUrl()</code>, <code>getTitle()</code>, <code>close()</code>, <code>quit()</code>.</li> <li>Element Interactions: <code>click()</code>, <code>sendKeys()</code>, <code>clear()</code>, <code>getText()</code>, <code>getAttribute()</code>, <code>isDisplayed()</code>, <code>isEnabled()</code>, <code>isSelected()</code>.</li> <li>Actions Class: Mouse and Keyboard actions (hover, drag-and-drop, right-click, key presses).</li> <li>Handling Specific Elements: Dropdowns (<code>Select</code> class), Alerts (JavaScript alerts), Frames, Multiple Windows/Tabs, File Uploads/Downloads.</li> <li>Screenshots: Taking screenshots for reporting.</li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Practice &amp; Projects:</p> <ul> <li>Page Object Model (POM): Implement POM for a medium-complexity web application (e.g., an e-commerce site, a login-dashboard flow).</li> <li>Build a small e-commerce test project covering login, product search, adding to cart, and checkout using Selenium with Java/TestNG and POM.</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#phase-3-api-mobile-automation-database-testing","title":"\ud83d\udd04 Phase 3: API &amp; Mobile Automation, Database Testing","text":"<p>This phase focuses on testing beyond the UI, crucial for comprehensive test coverage.</p>"},{"location":"randoms/sdet-interview-prep/#module-31-api-testing","title":"\ud83d\udd04 Module 3.1: API Testing","text":"<ul> <li> <p>\ud83c\udfaf Objective: Understand REST principles and automate API testing.</p> </li> <li> <p>Key Concepts &amp; Skills:</p> <ul> <li>REST Principles: Resources, URIs, Statelessness, Client-Server architecture.</li> <li>HTTP Methods: GET, POST, PUT, DELETE, PATCH.</li> <li>HTTP Status Codes: 2xx (Success), 3xx (Redirection), 4xx (Client Error), 5xx (Server Error).</li> <li>Request/Response Structure: Headers, Body (JSON, XML).</li> <li>Authentication: Basic Auth, Bearer Tokens, OAuth 1.0/2.0 (conceptual understanding).</li> <li>JSON Parsing:<ul> <li>Java: Jackson, GSON libraries.</li> <li>Python: <code>json</code> module.</li> </ul> </li> <li>Tools:<ul> <li>Postman: Collections, Environments, Pre-request scripts, Test scripts (assertions), Variables, Mock Servers.</li> <li>RestAssured (Java): Setup, making GET/POST/PUT/DELETE requests, chaining requests, validating responses (status, headers, body), extracting data, serialization/deserialization.</li> <li>Requests Library (Python): Similar capabilities to RestAssured for Python.</li> </ul> </li> </ul> </li> <li> <p>\ud83d\udee0\ufe0f Practice &amp; Projects:</p> <ul> <li>Use Postman to manually test a public API (e.g., GitHub API, JSONPlaceholder).</li> <li>Build an API automation framework using RestAssured (Java) or Python Requests, covering CRUD operations, authentication, and comprehensive assertions.</li> </ul> </li> </ul>"},{"location":"randoms/sdet-interview-prep/#final-tips-for-success","title":"\u2705 Final Tips for Success","text":"<ul> <li>Hands-on Practice is Key: Build small projects for every tool and concept.</li> <li>Understand \"Why\": For every tool and concept, understand why it's used and its advantages/disadvantages.</li> <li>Document Your Work: Keep notes, code snippets, and project READMEs.</li> <li>Networking: Connect with other SDETs, participate in communities.</li> <li>Stay Updated: The SDET landscape evolves rapidly. Follow blogs, attend webinars.</li> <li>Focus on Problem Solving: SDETs are engineers who solve testing problems. Emphasize your problem-solving approach.</li> <li>Communication: Be able to articulate your thoughts clearly and concisely, both in coding and design discussions.</li> </ul> <p>Good luck! Prepare. Practice. Perform. \ud83d\ude80</p>"},{"location":"tech-essentials-guide/","title":"\ud83d\udee0\ufe0f SDET Prep","text":"<p>A structured collection of notes and code examples to prepare for Software Development Engineer in Test (SDET) roles.</p>"},{"location":"tech-essentials-guide/#structure","title":"\ud83d\udcc1 Structure","text":"<ul> <li>automation-frameworks/ \u2013 JUnit, TestNG, PyTest sample usage</li> <li>api-testing/ \u2013 API validation using Postman, REST Assured</li> <li>selenium-playwright/ \u2013 UI automation in Java and Python</li> <li>testing-concepts/ \u2013 Markdown notes on testing strategies</li> <li>performance-testing/ \u2013 JMeter scripts and usage notes</li> <li>ci-cd/ \u2013 GitHub Actions, Jenkins configs for test automation</li> <li>interview-questions/ \u2013 Common SDET questions</li> </ul>"},{"location":"tech-essentials-guide/#tags-for-search-filters","title":"\ud83c\udff7 Tags for Search &amp; Filters","text":"<p><code>selenium</code>, <code>python</code>, <code>java</code>, <code>api</code>, <code>bdd</code>, <code>cicd</code>, <code>testing-strategy</code>, <code>postman</code>, <code>rest-assured</code>, <code>junit</code>, <code>pytest</code></p> <p>Use these examples as starting points for your portfolio or interviews.</p>"},{"location":"tech-essentials-guide/programming/","title":"\ud83d\udcda Programming Languages for SDETs","text":"<p>This section provides in-depth guides and consolidated information on essential programming languages for SDETs, focusing on practical applications, advanced concepts, and best practices.</p> <p>Dive deeper into Java and Python to enhance your test automation and development skills.</p>"},{"location":"tech-essentials-guide/programming/#topics-covered","title":"Topics Covered:","text":"<ul> <li>Java for SDETs</li> <li>Python for SDETs</li> </ul>"},{"location":"tech-essentials-guide/programming/java/01-basics/","title":"Core Java for SDETs: Compact Notes","text":"<p>These notes provide a quick reference for essential Core Java concepts, tailored for an SDET role.</p>","tags":["java","basic","arrays","medium"]},{"location":"tech-essentials-guide/programming/java/01-basics/#1-java-basics","title":"\ud83e\uddf1 1. Java Basics","text":"<ul> <li> <p>Introduction to Java &amp; its role in testing:</p> <ul> <li>Java is a robust, platform-independent, object-oriented language.</li> <li>Role in Testing: Dominant language for test automation (Selenium, Appium), building custom testing frameworks, performance testing tools (JMeter), and creating utility libraries for testing.</li> </ul> </li> <li> <p>Java History and Features:</p> <ul> <li>History: Developed by James Gosling at Sun Microsystems (now Oracle) in the mid-1990s.</li> <li>Features:<ul> <li>Platform Independent (WORA - Write Once, Run Anywhere): Achieved through JVM.</li> <li>Object-Oriented: Based on Objects and Classes.</li> <li>Simple: Clean syntax, less complex than C++.</li> <li>Secure: Robust security model.</li> <li>Robust: Strong memory management, exception handling.</li> <li>Multithreaded: Supports concurrent execution.</li> <li>High Performance: Just-In-Time (JIT) compilers.</li> <li>Distributed: Designed for networked environments.</li> </ul> </li> </ul> </li> <li> <p>JVM, JRE, JDK \u2013 Roles and Differences:</p> <ul> <li>JVM (Java Virtual Machine):<ul> <li>Role: An abstract machine that provides the runtime environment for Java bytecode. It executes the <code>.class</code> files.</li> <li>Nature: Platform-dependent. Actual \"runtime\" component.</li> </ul> </li> <li>JRE (Java Runtime Environment):<ul> <li>Role: Provides the necessary components to run Java applications. It includes the JVM, Java core classes, and supporting files.</li> <li>Nature: Does not contain development tools (compiler, debugger).</li> </ul> </li> <li>JDK (Java Development Kit):<ul> <li>Role: Comprehensive kit for developing, compiling, and running Java applications. It includes the JRE + development tools like <code>javac</code> (compiler), <code>java</code> (launcher), <code>jar</code>, <code>javadoc</code>, etc.</li> <li>Nature: Essential for developers/SDETs.</li> </ul> </li> </ul> </li> <li> <p>Setting up Java Environment:</p> <ul> <li>Steps:<ol> <li>Download and install the latest stable JDK from Oracle.</li> <li>Set <code>JAVA_HOME</code> environment variable to the JDK installation directory.</li> <li>Add <code>%JAVA_HOME%\\bin</code> (Windows) or <code>$JAVA_HOME/bin</code> (Linux/macOS) to the <code>PATH</code> environment variable.</li> <li>Verify installation: Open terminal/command prompt and run <code>java -version</code> and <code>javac -version</code>.</li> </ol> </li> </ul> </li> <li> <p>Writing &amp; Running a Java Program:</p> <ul> <li>Write: Create a <code>.java</code> file (e.g., <code>MyProgram.java</code>) with a <code>public class MyProgram { public static void main(String[] args) { /* code */ } }</code>.</li> <li>Compile: Open terminal, navigate to directory, run <code>javac MyProgram.java</code>. This creates <code>MyProgram.class</code> (bytecode).</li> <li>Run: Execute <code>java MyProgram</code> (no <code>.class</code> extension). The JVM loads and executes the bytecode.</li> </ul> </li> <li> <p>Java Coding Standards:</p> <ul> <li>CamelCase for names: <code>ClassName</code>, <code>methodName</code>, <code>variableName</code>.</li> <li>Constants: <code>ALL_CAPS_WITH_UNDERSCORES</code>.</li> <li>Indentation: Consistent 4 spaces or 1 tab.</li> <li>Brace style: Typically \"Egyptian style\" (<code>{</code> on same line).</li> <li>Meaningful Names: Variables, methods, classes should clearly indicate their purpose.</li> <li>Comments: Use <code>//</code> for single-line, <code>/* ... */</code> for multi-line, <code>/** ... */</code> for Javadoc.</li> </ul> </li> </ul>","tags":["java","basic","arrays","medium"]},{"location":"tech-essentials-guide/programming/java/01-basics/#2-java-syntax-and-fundamentals","title":"\ud83d\udcdd 2. Java Syntax and Fundamentals","text":"<ul> <li> <p>Java Keywords and Identifiers:</p> <ul> <li>Keywords: Reserved words with predefined meanings (e.g., <code>public</code>, <code>static</code>, <code>void</code>, <code>int</code>, <code>if</code>). Cannot be used as identifiers.</li> <li>Identifiers: Names given to classes, methods, variables, packages. Rules: Start with letter, <code>$</code>, or <code>_</code>; can contain digits; case-sensitive; no keywords.</li> </ul> </li> <li> <p>Variables and Data Types:</p> <ul> <li>Variables: Named memory locations to store data. Declared as <code>dataType variableName = value;</code>.</li> <li>Data Types:<ul> <li>Primitive (value types):<ul> <li><code>byte</code> (1 byte), <code>short</code> (2 bytes), <code>int</code> (4 bytes), <code>long</code> (8 bytes) - Whole numbers.</li> <li><code>float</code> (4 bytes), <code>double</code> (8 bytes) - Floating-point numbers.</li> <li><code>char</code> (2 bytes, Unicode) - Single character.</li> <li><code>boolean</code> (1 bit) - <code>true</code> or <code>false</code>.</li> </ul> </li> <li>Non-Primitive/Reference (object types): <code>String</code>, Arrays, Classes, Interfaces. Store memory addresses of objects.</li> </ul> </li> </ul> </li> <li> <p>Type Casting (Implicit &amp; Explicit):</p> <ul> <li>Implicit (Widening): Automatic conversion from smaller to larger data type (e.g., <code>int</code> to <code>long</code>, <code>float</code> to <code>double</code>). No data loss.     byte -&gt; short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double</li> <li>Explicit (Narrowing): Manual conversion from larger to smaller data type. Requires a cast operator <code>(type)</code>. Potential for data loss (e.g., <code>double</code> to <code>int</code>).     double -&gt; float -&gt; long -&gt; int -&gt; char -&gt; short -&gt; byte<ul> <li>Example: <code>int x = (int) 3.14; // x becomes 3</code></li> </ul> </li> </ul> </li> <li> <p>Operators: Symbols performing operations on operands.</p> <ul> <li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> (modulus).</li> <li>Logical: <code>&amp;&amp;</code> (AND), <code>||</code> (OR), <code>!</code> (NOT). Operate on boolean expressions.</li> <li>Relational: <code>==</code> (equals), <code>!=</code> (not equals), <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>. Return boolean.</li> <li>Bitwise: <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>. Operate on bits (less common for SDETs in daily tasks).</li> <li>Assignment: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>.</li> <li>Ternary: <code>condition ? value_if_true : value_if_false;</code> (Shorthand <code>if-else</code>).</li> </ul> </li> <li> <p>Flow Control Statements: Dictate execution order.</p> <ul> <li><code>if</code>, <code>if-else</code>, <code>if-else-if-else</code>, <code>switch</code>:<ul> <li><code>if (condition) { // code }</code></li> <li><code>if (condition) { // code } else { // code }</code></li> <li><code>if (condition 1) { // code } else if (condition 2) { // code } else { // code }</code></li> <li><code>switch (expression) { case value: // code; break; default: // code; }</code> (Java 7+ allows String in switch).</li> </ul> </li> <li><code>short-hand if..else</code>:<ul> <li><code>variable = (condition) ? expressionTrue :  expressionFalse;</code></li> <li>Example:     <code>String result = (time &lt; 12) ? \"Good Morning\" : \"Good Evening\";</code></li> </ul> </li> <li><code>for</code>, <code>while</code>, <code>do-while</code>:<ul> <li><code>for (initialization; condition; increment/decrement) { // code }</code></li> <li><code>while (condition) { // code }</code> (Executes 0 or more times)</li> <li><code>do { // code } while (condition);</code> (Executes at least once)</li> <li>Enhanced For Loop (for-each): <code>for (Type element : arrayOrCollection) { // code }</code> - Iterates over elements directly.</li> </ul> </li> <li><code>break</code>, <code>continue</code>:<ul> <li><code>break;</code>: Terminates the nearest loop or <code>switch</code> statement.</li> <li><code>continue;</code>: Skips the current iteration of the loop and proceeds to the next.</li> </ul> </li> </ul> </li> <li> <p>Arrays: Ordered collections of fixed-size elements of the same data type.</p> <ul> <li>Single-Dimensional: <code>dataType[] arrayName = new dataType[size];</code> or <code>dataType[] arrayName = {val1, val2};</code> <pre><code>//Declare array\nString[] cars;\n//insert into array\nString cars[] = {\"TATA\", \"M&amp;M\", \"AUDI\",\"BMW\"};\n//Access item from array\ncars[0]; //TATA\n//To Change in array\ncars[3] =\"TOYOTA\";\n</code></pre></li> </ul> <p><pre><code>//Array ops\n//Array length\ncars.length;\n\n//Loop into array\nfor(int i=0; i&lt;cars.length;i++){\n    System.out.println(cars[i]);\n}\n\n//Using for each\nfor (String carName: cars){\n    System.out.println(carName);\n}\n</code></pre> * Multidimensional (e.g., 2D): <code>dataType[][] matrix = new dataType[rows][cols];</code> * Array Manipulation Techniques: Accessing elements (<code>array[index]</code>), iterating (loops, for-each), <code>array.length</code>, <code>Arrays.copyOf()</code>, <code>System.arraycopy()</code>.</p> </li> <li> <p>Input Handling:</p> <ul> <li><code>Scanner</code>: Simpler for common input types (int, String, etc.).<ul> <li><code>Scanner scanner = new Scanner(System.in);</code></li> <li><code>String name = scanner.nextLine();</code></li> <li><code>int age = scanner.nextInt();</code></li> <li>Remember to <code>scanner.close()</code> to prevent resource leaks.</li> </ul> </li> <li><code>BufferedReader</code>: More efficient for reading large amounts of text (e.g., file input). Needs <code>InputStreamReader</code>. Throws <code>IOException</code>.<ul> <li><code>BufferedReader br = new BufferedReader(new InputStreamReader(System.in));</code></li> <li><code>String line = br.readLine();</code></li> </ul> </li> </ul> </li> </ul>","tags":["java","basic","arrays","medium"]},{"location":"tech-essentials-guide/programming/java/01-basics/#3-methods-and-functional-programming-basics","title":"\ud83e\udde0 3. Methods and Functional Programming Basics","text":"<ul> <li> <p>Defining and Calling Methods:</p> <ul> <li>Definition: A block of code that performs a specific task.<ul> <li><code>[accessModifier] [static] [returnType] methodName([parameters]) { // method body }</code></li> <li>Example: <code>public static int add(int a, int b) { return a + b; }</code></li> </ul> </li> <li>Calling: <code>objectName.methodName(arguments);</code> (for instance methods) or <code>ClassName.methodName(arguments);</code> (for static methods).</li> </ul> </li> <li> <p>Method Parameters and Return Types:</p> <ul> <li>Parameters: Variables listed in the method signature, receiving values passed during the call.</li> <li>Return Type: The data type of the value a method sends back. <code>void</code> means no value is returned.</li> </ul> </li> <li> <p>Method Overloading:</p> <ul> <li>Defining multiple methods in the same class with the same name but different parameter lists (different number of parameters, different types of parameters, or different order of parameters).</li> <li>Return type alone is not sufficient for overloading.</li> <li>Example: <code>add(int a, int b)</code>, <code>add(double a, double b)</code>, <code>add(int a, int b, int c)</code>.</li> </ul> </li> <li> <p>Recursion:</p> <ul> <li>A method calling itself.</li> <li>Requires a base case (termination condition) to prevent <code>StackOverflowError</code>.</li> <li>Often used for problems that can be broken down into smaller, similar sub-problems (e.g., factorial, Fibonacci, tree traversals).</li> </ul> </li> <li> <p>Scope of Variables (Local, Global, Static):</p> <ul> <li>Local Variables: Declared inside a method, block, or constructor. Accessible only within that block. No default value; must be initialized.</li> <li>Instance (Global/Object) Variables: Declared inside a class but outside any method/block. Belongs to an object. Accessible via object reference. Have default values.</li> <li>Static (Class) Variables: Declared inside a class but outside any method, with the <code>static</code> keyword. Belongs to the class, not an object. Shared among all instances. Accessed via <code>ClassName.variableName</code>.</li> </ul> </li> <li> <p>Pass by Value vs Pass by Reference:</p> <ul> <li>Java is strictly Pass by Value.</li> <li>When primitive data types are passed, a copy of the value is passed. Changes to the parameter inside the method do not affect the original variable.</li> <li>When objects (non-primitive data types) are passed, a copy of the reference (memory address) is passed. Both the original reference and the copied reference point to the same object in memory. So, changes to the object's state via the method's parameter will affect the original object. The reference itself cannot be re-pointed to a new object.</li> </ul> </li> </ul>","tags":["java","basic","arrays","medium"]},{"location":"tech-essentials-guide/programming/java/01-basics/#4-string-manipulation","title":"\ud83d\udd24 4. String Manipulation","text":"<ul> <li> <p><code>String</code> Class and String Pool:</p> <ul> <li><code>String</code> Class: Represents immutable (cannot be changed after creation) sequences of characters.</li> <li>String Pool (String Literal Pool): A special memory area within the Heap where String literals are stored. When a String literal is created, Java first checks the pool. If it exists, the existing object's reference is returned; otherwise, a new String object is created and placed in the pool.</li> <li>Created using <code>String s = \"hello\";</code> (literal) or <code>String s = new String(\"hello\");</code> (object, always creates new in heap).</li> </ul> </li> <li> <p><code>String</code>, <code>StringBuilder</code>, <code>StringBuffer</code>:</p> <ul> <li><code>String</code>:<ul> <li>Immutability: Once created, its value cannot be changed. Any operation that appears to modify a String actually creates a new String object.</li> <li>Thread-Safety: Inherently thread-safe due to immutability.</li> <li>Performance: Less efficient for frequent modifications due to creation of many intermediate String objects.</li> <li>Use Case: When string content is constant or rarely changes.</li> </ul> </li> <li><code>StringBuilder</code>:<ul> <li>Mutability: Allows modification of string content without creating new objects.</li> <li>Thread-Safety: Not thread-safe (faster for single-threaded environments).</li> <li>Performance: Highly efficient for frequent string manipulations (insertions, deletions, appends).</li> <li>Use Case: When string content needs frequent modification in a single-threaded context.</li> </ul> </li> <li><code>StringBuffer</code>:<ul> <li>Mutability: Similar to <code>StringBuilder</code>, allows content modification.</li> <li>Thread-Safety: Thread-safe (methods are <code>synchronized</code>).</li> <li>Performance: Slower than <code>StringBuilder</code> due to synchronization overhead.</li> <li>Use Case: When string content needs frequent modification in a multi-threaded context.</li> </ul> </li> </ul> </li> <li> <p>Common String Methods and Usage:     | Method                                     | Syntax                               | Example                                    |     |------------------------------------------------|------------------------------------------|------------------------------------------------|     | <code>length()</code>                                     | <code>string.length()</code>                        | <code>\"hello\".length()</code> \u2192 <code>5</code>                       |     | <code>charAt(int index)</code>                            | <code>string.charAt(index)</code>                   | <code>\"hello\".charAt(1)</code> \u2192 <code>e</code>                      |     | <code>substring(int beginIndex)</code>                    | <code>string.substring(beginIndex)</code>           | <code>\"hello\".substring(2)</code> \u2192 <code>\"llo\"</code>               |     | <code>substring(int beginIndex, int endIndex)</code>      | <code>string.substring(beginIndex, endIndex)</code> | <code>\"hello\".substring(1, 4)</code> \u2192 <code>\"ell\"</code>            |     | <code>indexOf(char/String)</code>                         | <code>string.indexOf(char/String)</code>            | <code>\"hello\".indexOf('l')</code> \u2192 <code>2</code>                   |     | <code>lastIndexOf(char/String)</code>                     | <code>string.lastIndexOf(char/String)</code>        | <code>\"hello\".lastIndexOf('l')</code> \u2192 <code>3</code>               |     | <code>equals(Object another)</code>                       | <code>string.equals(anotherString)</code>           | <code>\"hello\".equals(\"hello\")</code> \u2192 <code>true</code>             |     | <code>equalsIgnoreCase(String another)</code>             | <code>string.equalsIgnoreCase(anotherString)</code> | <code>\"hello\".equalsIgnoreCase(\"HELLO\")</code> \u2192 <code>true</code>   |     | <code>startsWith(String prefix)</code>                    | <code>string.startsWith(prefix)</code>              | <code>\"hello\".startsWith(\"he\")</code> \u2192 <code>true</code>            |     | <code>endsWith(String suffix)</code>                      | <code>string.endsWith(suffix)</code>                | <code>\"hello\".endsWith(\"lo\")</code> \u2192 <code>true</code>              |     | <code>contains(CharSequence s)</code>                     | <code>string.contains(sequence)</code>              | <code>\"hello\".contains(\"ell\")</code> \u2192 <code>true</code>             |     | <code>replace(char oldChar, char newChar)</code>          | <code>string.replace(oldChar, newChar)</code>       | <code>\"hello\".replace('l', 'p')</code> \u2192 <code>\"heppo\"</code>        |     | <code>replaceAll(String regex, String replacement)</code> | <code>string.replaceAll(regex, replacement)</code>  | <code>\"hello123\".replaceAll(\"\\\\d\", \"\")</code> \u2192 <code>\"hello\"</code> |     | <code>trim()</code>                                       | <code>string.trim()</code>                          | <code>\"  hello  \".trim()</code> \u2192 <code>\"hello\"</code>               |     | <code>toUpperCase()</code>                                | <code>string.toUpperCase()</code>                   | <code>\"hello\".toUpperCase()</code> \u2192 <code>\"HELLO\"</code>            |     | <code>toLowerCase()</code>                                | <code>string.toLowerCase()</code>                   | <code>\"HELLO\".toLowerCase()</code> \u2192 <code>\"hello\"</code>            |     | <code>split(String regex)</code>                          | <code>string.split(regex)</code>                    | <code>\"a,b,c\".split(\",\")</code> \u2192 <code>[\"a\", \"b\", \"c\"]</code>       |     | <code>concat(String str)</code>                           | <code>string.concat(str)</code>                     | <code>\"hello\".concat(\" world\")</code> \u2192 <code>\"hello world\"</code>   |     | <code>valueOf(primitiveType)</code>                       | <code>String.valueOf(primitiveType)</code>          | <code>String.valueOf(123)</code> \u2192 <code>\"123\"</code>                |</p> </li> </ul> <ul> <li>String Comparison and Immutability:<ul> <li>Comparison:<ul> <li><code>==</code> (Operator): Compares object references (memory addresses). <code>s1 == s2</code> is true only if <code>s1</code> and <code>s2</code> refer to the exact same object.</li> <li><code>equals()</code> (Method): Compares object content. <code>s1.equals(s2)</code> is true if <code>s1</code> and <code>s2</code> have the same sequence of characters. Always use <code>equals()</code> for content comparison.</li> </ul> </li> <li>Immutability: Explained above. Key concept for understanding String behavior and performance. When you modify a String, you are creating a new one.</li> </ul> </li> </ul>","tags":["java","basic","arrays","medium"]},{"location":"tech-essentials-guide/programming/java/02-oops/","title":"Java Programming Concepts: Object-Oriented Programming (OOP)","text":"<p>\ud83d\udcda Learning Resources: - Oracle Java Documentation - Java OOP Tutorial - Practice OOP Concepts</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#5-object-oriented-programming-oop","title":"\u2699\ufe0f 5. Object-Oriented Programming (OOP)","text":"<p>Object-Oriented Programming (OOP) is a programming paradigm based on the concept of \"objects\", which can contain data and code that manipulates the data. Java is a pure object-oriented language where everything is an object.</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#oop-principles-overview","title":"\ud83c\udfaf OOP Principles Overview","text":"<p>The four fundamental principles of OOP are:</p> Principle Definition Key Benefits Encapsulation Bundling data and methods that operate on the data into a single unit, restricting direct access Data hiding, security, maintainability Inheritance Mechanism where one class acquires properties and behaviors of another class Code reusability, hierarchical organization Polymorphism Ability of an object to take on many forms; methods do different things based on object type Flexibility, extensibility Abstraction Hiding complex implementation details and showing only essential features Simplicity, reduced complexity"},{"location":"tech-essentials-guide/programming/java/02-oops/#defining-classes-and-objects","title":"\ud83c\udfd7\ufe0f Defining Classes and Objects","text":""},{"location":"tech-essentials-guide/programming/java/02-oops/#class-definition","title":"Class Definition","text":"<p>A class is a blueprint or template from which objects are created. It defines common properties (attributes) and behaviors (methods).</p> <p>Syntax: <pre><code>[access_modifier] class ClassName {\n    // Instance variables (attributes)\n    [access_modifier] dataType variableName;\n\n    // Constructors\n    [access_modifier] ClassName() { }\n\n    // Methods (behaviors)\n    [access_modifier] returnType methodName() { }\n}\n</code></pre></p> <p>Example: <pre><code>public class Car {\n    // Instance variables (attributes/state)\n    private String make;\n    private String model;\n    private int year;\n    private double speed;\n    private boolean isRunning;\n\n    // Static variable (class variable)\n    public static final int MAX_SPEED = 200;\n\n    // Constructor\n    public Car(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n        this.speed = 0;\n        this.isRunning = false;\n    }\n\n    // Instance methods (behaviors)\n    public void start() {\n        if (!isRunning) {\n            isRunning = true;\n            System.out.println(make + \" \" + model + \" is starting...\");\n        } else {\n            System.out.println(\"Car is already running!\");\n        }\n    }\n\n    public void accelerate(double amount) {\n        if (isRunning &amp;&amp; speed + amount &lt;= MAX_SPEED) {\n            speed += amount;\n            System.out.println(make + \" \" + model + \" is accelerating. Speed: \" + speed);\n        } else {\n            System.out.println(\"Cannot accelerate. Check if car is running or speed limit.\");\n        }\n    }\n\n    public void brake(double amount) {\n        if (speed - amount &gt;= 0) {\n            speed -= amount;\n            System.out.println(make + \" \" + model + \" is braking. Speed: \" + speed);\n        } else {\n            speed = 0;\n            System.out.println(\"Car has stopped.\");\n        }\n    }\n\n    public void stop() {\n        isRunning = false;\n        speed = 0;\n        System.out.println(make + \" \" + model + \" has stopped.\");\n    }\n\n    // Getter methods\n    public String getMake() { return make; }\n    public String getModel() { return model; }\n    public int getYear() { return year; }\n    public double getSpeed() { return speed; }\n    public boolean isRunning() { return isRunning; }\n\n    // Static method\n    public static void displayMaxSpeed() {\n        System.out.println(\"Maximum speed for all cars: \" + MAX_SPEED);\n    }\n\n    // Override toString method\n    @Override\n    public String toString() {\n        return \"Car{\" +\n                \"make='\" + make + '\\'' +\n                \", model='\" + model + '\\'' +\n                \", year=\" + year +\n                \", speed=\" + speed +\n                \", isRunning=\" + isRunning +\n                '}';\n    }\n}\n</code></pre></p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#object-creation-and-usage","title":"Object Creation and Usage","text":"<p>An object is an instance of a class. It's a real-world entity with state and behavior.</p> <p>Syntax: <pre><code>ClassName objectName = new ClassName(parameters);\n</code></pre></p> <p>Example: <pre><code>public class Main {\n    public static void main(String[] args) {\n        // Creating objects (instantiating the Car class)\n        Car myCar = new Car(\"Toyota\", \"Camry\", 2023);\n        Car anotherCar = new Car(\"Honda\", \"Civic\", 2022);\n\n        // Using object methods\n        myCar.start();\n        myCar.accelerate(50);\n        myCar.brake(20);\n\n        anotherCar.start();\n        anotherCar.accelerate(30);\n\n        // Accessing object state\n        System.out.println(\"My car speed: \" + myCar.getSpeed());\n        System.out.println(\"Another car: \" + anotherCar.toString());\n\n        // Using static method\n        Car.displayMaxSpeed();\n\n        // Object comparison\n        System.out.println(\"Are cars equal? \" + myCar.equals(anotherCar));\n    }\n}\n</code></pre></p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#attributes-and-behavior","title":"\ud83d\udcca Attributes and Behavior","text":""},{"location":"tech-essentials-guide/programming/java/02-oops/#attributes-state","title":"Attributes (State)","text":"<ul> <li>Instance Variables: Belong to each object instance</li> <li>Static Variables: Belong to the class, shared by all instances</li> <li>Final Variables: Cannot be changed after initialization</li> </ul> <p>Example: <pre><code>public class Student {\n    // Instance variables (each object has its own copy)\n    private String name;\n    private int age;\n    private String studentId;\n\n    // Static variable (shared by all Student objects)\n    public static int totalStudents = 0;\n\n    // Final variable (constant)\n    public static final String SCHOOL_NAME = \"Java Academy\";\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n        this.studentId = generateStudentId();\n        totalStudents++; // Increment static counter\n    }\n\n    private String generateStudentId() {\n        return \"STU\" + System.currentTimeMillis();\n    }\n}\n</code></pre></p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#behavior-methods","title":"Behavior (Methods)","text":"<ul> <li>Instance Methods: Operate on instance variables</li> <li>Static Methods: Operate on static variables or utility functions</li> <li>Getter/Setter Methods: Access and modify private variables</li> </ul> <p>Example: <pre><code>public class Calculator {\n    private double result;\n    private static int operationCount = 0;\n\n    // Instance method\n    public void add(double number) {\n        result += number;\n        operationCount++;\n        System.out.println(\"Added \" + number + \". Result: \" + result);\n    }\n\n    public void subtract(double number) {\n        result -= number;\n        operationCount++;\n        System.out.println(\"Subtracted \" + number + \". Result: \" + result);\n    }\n\n    // Getter method\n    public double getResult() {\n        return result;\n    }\n\n    // Static method\n    public static int getOperationCount() {\n        return operationCount;\n    }\n\n    // Static utility method\n    public static double calculateAverage(double[] numbers) {\n        if (numbers.length == 0) return 0;\n\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.length;\n    }\n}\n</code></pre></p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#constructor-default-parameterized-constructor-overloading","title":"\ud83d\udd27 Constructor (Default, Parameterized, Constructor Overloading)","text":"<p>A constructor is a special method used to initialize objects. It has the same name as the class and no return type.</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#default-constructor","title":"Default Constructor","text":"<p>If no constructor is defined, Java provides a public, no-argument constructor.</p> <pre><code>public class Dog {\n    private String name;\n    private int age;\n\n    // Java automatically provides: public Dog() { }\n    // Instance variables get default values: null, 0, false\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#parameterized-constructor","title":"Parameterized Constructor","text":"<p>A constructor with parameters to initialize instance variables.</p> <pre><code>public class Dog {\n    private String name;\n    private int age;\n    private String breed;\n\n    // Parameterized constructor\n    public Dog(String name, int age, String breed) {\n        this.name = name;\n        this.age = age;\n        this.breed = breed;\n    }\n\n    // Usage: Dog myDog = new Dog(\"Buddy\", 5, \"Golden Retriever\");\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#constructor-overloading","title":"Constructor Overloading","text":"<p>Multiple constructors with different parameter lists.</p> <pre><code>public class Dog {\n    private String name;\n    private int age;\n    private String breed;\n\n    // Constructor 1: Default-like\n    public Dog() {\n        this(\"Unknown\", 0, \"Mixed\");\n    }\n\n    // Constructor 2: Name and age only\n    public Dog(String name, int age) {\n        this(name, age, \"Mixed\");\n    }\n\n    // Constructor 3: All parameters\n    public Dog(String name, int age, String breed) {\n        this.name = name;\n        this.age = age;\n        this.breed = breed;\n    }\n\n    // Constructor 4: Copy constructor\n    public Dog(Dog otherDog) {\n        this.name = otherDog.name;\n        this.age = otherDog.age;\n        this.breed = otherDog.breed;\n    }\n}\n\n// Usage examples:\n// Dog dog1 = new Dog();                    // Uses Constructor 1\n// Dog dog2 = new Dog(\"Lucy\", 3);          // Uses Constructor 2\n// Dog dog3 = new Dog(\"Max\", 7, \"Golden\"); // Uses Constructor 3\n// Dog dog4 = new Dog(dog3);               // Uses Constructor 4\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#key-oop-concepts","title":"\ud83d\udd11 Key OOP Concepts","text":""},{"location":"tech-essentials-guide/programming/java/02-oops/#1-encapsulation","title":"1. Encapsulation","text":"<p>Definition: Wrapping data and methods together as a single unit, hiding internal state and requiring all interaction through methods.</p> <p>Benefits: - Data hiding and security - Control over data access - Flexibility to change implementation - Maintainability and modularity</p> <p>Example: <pre><code>public class BankAccount {\n    private String accountNumber;\n    private double balance;\n    private String accountHolder;\n    private static int accountCounter = 0;\n\n    public BankAccount(String accountHolder, double initialBalance) {\n        this.accountHolder = accountHolder;\n        this.accountNumber = generateAccountNumber();\n        if (initialBalance &gt;= 0) {\n            this.balance = initialBalance;\n        } else {\n            this.balance = 0;\n            System.out.println(\"Initial balance cannot be negative. Set to 0.\");\n        }\n        accountCounter++;\n    }\n\n    private String generateAccountNumber() {\n        return \"ACC\" + System.currentTimeMillis();\n    }\n\n    // Getter methods (read-only access)\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public String getAccountHolder() {\n        return accountHolder;\n    }\n\n    // Controlled modification methods\n    public void deposit(double amount) {\n        if (amount &gt; 0) {\n            this.balance += amount;\n            System.out.println(\"Deposited: \" + amount + \". New balance: \" + balance);\n        } else {\n            System.out.println(\"Deposit amount must be positive.\");\n        }\n    }\n\n    public boolean withdraw(double amount) {\n        if (amount &gt; 0 &amp;&amp; balance &gt;= amount) {\n            this.balance -= amount;\n            System.out.println(\"Withdrew: \" + amount + \". New balance: \" + balance);\n            return true;\n        } else {\n            System.out.println(\"Invalid withdrawal amount or insufficient balance.\");\n            return false;\n        }\n    }\n\n    public void transfer(BankAccount recipient, double amount) {\n        if (this.withdraw(amount)) {\n            recipient.deposit(amount);\n            System.out.println(\"Transferred \" + amount + \" to \" + recipient.getAccountHolder());\n        }\n    }\n\n    // Static method\n    public static int getTotalAccounts() {\n        return accountCounter;\n    }\n\n    @Override\n    public String toString() {\n        return \"BankAccount{\" +\n                \"accountNumber='\" + accountNumber + '\\'' +\n                \", balance=\" + balance +\n                \", accountHolder='\" + accountHolder + '\\'' +\n                '}';\n    }\n}\n</code></pre></p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#2-inheritance","title":"2. Inheritance","text":"<p>Definition: Mechanism where one class acquires properties and behaviors of another class.</p> <p>Keywords: <code>extends</code> (for classes), <code>implements</code> (for interfaces)</p> <p>Benefits: - Code reusability - Method overriding - Hierarchical classification</p> <p>Example: <pre><code>// Superclass (Parent class)\npublic class Animal {\n    protected String name;\n    protected int age;\n    protected String species;\n\n    public Animal(String name, int age, String species) {\n        this.name = name;\n        this.age = age;\n        this.species = species;\n    }\n\n    public void eat() {\n        System.out.println(name + \" is eating.\");\n    }\n\n    public void sleep() {\n        System.out.println(name + \" is sleeping.\");\n    }\n\n    public void makeSound() {\n        System.out.println(name + \" makes a sound.\");\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Name: \" + name + \", Age: \" + age + \", Species: \" + species);\n    }\n}\n\n// Subclass (Child class)\npublic class Dog extends Animal {\n    private String breed;\n    private boolean isVaccinated;\n\n    public Dog(String name, int age, String breed) {\n        super(name, age, \"Dog\"); // Call superclass constructor\n        this.breed = breed;\n        this.isVaccinated = false;\n    }\n\n    // Method overriding\n    @Override\n    public void makeSound() {\n        System.out.println(name + \" barks: Woof! Woof!\");\n    }\n\n    // Additional methods specific to Dog\n    public void fetch() {\n        System.out.println(name + \" is fetching the ball.\");\n    }\n\n    public void wagTail() {\n        System.out.println(name + \" is wagging its tail.\");\n    }\n\n    public void vaccinate() {\n        if (!isVaccinated) {\n            isVaccinated = true;\n            System.out.println(name + \" has been vaccinated.\");\n        } else {\n            System.out.println(name + \" is already vaccinated.\");\n        }\n    }\n\n    // Override displayInfo to include breed\n    @Override\n    public void displayInfo() {\n        super.displayInfo(); // Call superclass method\n        System.out.println(\"Breed: \" + breed + \", Vaccinated: \" + isVaccinated);\n    }\n}\n\n// Another subclass\npublic class Cat extends Animal {\n    private boolean isIndoor;\n\n    public Cat(String name, int age, boolean isIndoor) {\n        super(name, age, \"Cat\");\n        this.isIndoor = isIndoor;\n    }\n\n    @Override\n    public void makeSound() {\n        System.out.println(name + \" meows: Meow! Meow!\");\n    }\n\n    public void purr() {\n        System.out.println(name + \" is purring.\");\n    }\n\n    public void climb() {\n        System.out.println(name + \" is climbing.\");\n    }\n}\n\n// Usage\npublic class InheritanceDemo {\n    public static void main(String[] args) {\n        Animal genericAnimal = new Animal(\"Generic\", 5, \"Unknown\");\n        Dog myDog = new Dog(\"Buddy\", 3, \"Golden Retriever\");\n        Cat myCat = new Cat(\"Whiskers\", 2, true);\n\n        // Polymorphic behavior\n        Animal[] animals = {genericAnimal, myDog, myCat};\n\n        for (Animal animal : animals) {\n            animal.makeSound(); // Different behavior for each type\n        }\n\n        // Specific dog behaviors\n        myDog.fetch();\n        myDog.vaccinate();\n\n        // Specific cat behaviors\n        myCat.purr();\n        myCat.climb();\n    }\n}\n</code></pre></p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#3-polymorphism-compile-time-run-time","title":"3. Polymorphism (Compile-time &amp; Run-time)","text":"<p>Definition: The ability of an object to take on many forms.</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#compile-time-polymorphism-method-overloading","title":"Compile-time Polymorphism (Method Overloading)","text":"<p>Multiple methods with the same name but different parameters.</p> <pre><code>public class Calculator {\n    // Method overloading examples\n\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public int add(int a, int b, int c) {\n        return a + b + c;\n    }\n\n    public double add(double a, double b) {\n        return a + b;\n    }\n\n    public String add(String a, String b) {\n        return a + b; // String concatenation\n    }\n\n    public int add(int[] numbers) {\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        return sum;\n    }\n}\n\n// Usage\nCalculator calc = new Calculator();\nSystem.out.println(calc.add(5, 10));           // 15\nSystem.out.println(calc.add(5, 10, 15));       // 30\nSystem.out.println(calc.add(5.5, 10.5));       // 16.0\nSystem.out.println(calc.add(\"Hello\", \"World\")); // HelloWorld\nSystem.out.println(calc.add(new int[]{1,2,3,4,5})); // 15\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#run-time-polymorphism-method-overriding","title":"Run-time Polymorphism (Method Overriding)","text":"<p>Subclass provides specific implementation for superclass method.</p> <pre><code>public class Shape {\n    protected double area;\n\n    public void calculateArea() {\n        System.out.println(\"Calculating area of generic shape.\");\n    }\n\n    public void displayInfo() {\n        System.out.println(\"This is a shape with area: \" + area);\n    }\n}\n\npublic class Circle extends Shape {\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    @Override\n    public void calculateArea() {\n        this.area = Math.PI * radius * radius;\n        System.out.println(\"Calculating area of circle: \" + area);\n    }\n\n    @Override\n    public void displayInfo() {\n        System.out.println(\"This is a circle with radius: \" + radius + \" and area: \" + area);\n    }\n}\n\npublic class Rectangle extends Shape {\n    private double length;\n    private double width;\n\n    public Rectangle(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    @Override\n    public void calculateArea() {\n        this.area = length * width;\n        System.out.println(\"Calculating area of rectangle: \" + area);\n    }\n\n    @Override\n    public void displayInfo() {\n        System.out.println(\"This is a rectangle with length: \" + length + \n                         \", width: \" + width + \" and area: \" + area);\n    }\n}\n\n// Polymorphism demonstration\npublic class PolymorphismDemo {\n    public static void main(String[] args) {\n        Shape shape1 = new Shape();\n        Shape shape2 = new Circle(5);\n        Shape shape3 = new Rectangle(4, 6);\n\n        // Run-time polymorphism\n        shape1.calculateArea(); // Shape's method\n        shape2.calculateArea(); // Circle's method\n        shape3.calculateArea(); // Rectangle's method\n\n        // Array of shapes demonstrating polymorphism\n        Shape[] shapes = {shape1, shape2, shape3};\n\n        for (Shape shape : shapes) {\n            shape.calculateArea(); // Different behavior based on actual object type\n        }\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#4-abstraction","title":"4. Abstraction","text":"<p>Definition: Hiding complex implementation details and showing only essential features.</p> <p>Achieved through: Abstract classes and interfaces (detailed in section 6)</p> <pre><code>// Abstract class example\npublic abstract class Vehicle {\n    protected String brand;\n    protected String model;\n    protected int year;\n\n    public Vehicle(String brand, String model, int year) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n    }\n\n    // Abstract method (must be implemented by subclasses)\n    public abstract void start();\n\n    // Concrete method (has implementation)\n    public void displayInfo() {\n        System.out.println(\"Brand: \" + brand + \", Model: \" + model + \", Year: \" + year);\n    }\n}\n\npublic class Car extends Vehicle {\n    public Car(String brand, String model, int year) {\n        super(brand, model, year);\n    }\n\n    @Override\n    public void start() {\n        System.out.println(\"Car starts with a key ignition.\");\n    }\n}\n\npublic class Motorcycle extends Vehicle {\n    public Motorcycle(String brand, String model, int year) {\n        super(brand, model, year);\n    }\n\n    @Override\n    public void start() {\n        System.out.println(\"Motorcycle starts with a kick start.\");\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#keywords-this-super-final-static-instanceof","title":"\ud83d\udd11 Keywords: <code>this</code>, <code>super</code>, <code>final</code>, <code>static</code>, <code>instanceof</code>","text":""},{"location":"tech-essentials-guide/programming/java/02-oops/#this-keyword","title":"<code>this</code> Keyword","text":"<p>Refers to the current instance of the class.</p> <pre><code>public class Person {\n    private String name;\n    private int age;\n\n    public Person(String name, int age) {\n        this.name = name; // Refers to instance variable\n        this.age = age;   // Refers to instance variable\n    }\n\n    public Person() {\n        this(\"Unknown\", 0); // Calls parameterized constructor\n    }\n\n    public void setAge(int age) {\n        this.age = age; // Distinguishes instance variable from parameter\n    }\n\n    public void displayInfo() {\n        System.out.println(\"Name: \" + this.name + \", Age: \" + this.age);\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#super-keyword","title":"<code>super</code> Keyword","text":"<p>Refers to the immediate parent (superclass) instance.</p> <pre><code>public class Parent {\n    protected String name;\n    protected int value = 10;\n\n    public Parent(String name) {\n        this.name = name;\n        System.out.println(\"Parent constructor called\");\n    }\n\n    public void display() {\n        System.out.println(\"Parent display method\");\n    }\n}\n\npublic class Child extends Parent {\n    private int value = 20;\n\n    public Child(String name) {\n        super(name); // Calls Parent constructor\n        System.out.println(\"Child constructor called\");\n    }\n\n    public void showValues() {\n        System.out.println(\"Child value: \" + this.value);      // 20\n        System.out.println(\"Parent value: \" + super.value);    // 10\n        super.display(); // Calls Parent's display method\n    }\n\n    @Override\n    public void display() {\n        System.out.println(\"Child display method\");\n        super.display(); // Calls Parent's display method\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#final-keyword","title":"<code>final</code> Keyword","text":"<ul> <li><code>final</code> variable: Constant, cannot be changed</li> <li><code>final</code> method: Cannot be overridden</li> <li><code>final</code> class: Cannot be inherited</li> </ul> <pre><code>public class FinalExample {\n    // Final variable (constant)\n    public static final double PI = 3.14159;\n    public final String constantValue = \"This cannot be changed\";\n\n    public void demonstrateFinal() {\n        // PI = 3.14; // Compile-time error\n        // constantValue = \"New value\"; // Compile-time error\n    }\n}\n\npublic class BaseClass {\n    public final void finalMethod() {\n        System.out.println(\"This method cannot be overridden\");\n    }\n}\n\n// This would cause compile-time error:\n// public class DerivedClass extends BaseClass {\n//     public void finalMethod() { } // Cannot override final method\n// }\n\nfinal class ImmutableClass {\n    private final String data;\n\n    public ImmutableClass(String data) {\n        this.data = data;\n    }\n\n    public String getData() {\n        return data;\n    }\n}\n\n// This would cause compile-time error:\n// class AnotherClass extends ImmutableClass { } // Cannot extend final class\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#static-keyword","title":"<code>static</code> Keyword","text":"<ul> <li><code>static</code> variable: Belongs to class, shared by all instances</li> <li><code>static</code> method: Belongs to class, can be called without object</li> <li><code>static</code> block: Executed once when class is loaded</li> </ul> <pre><code>public class StaticExample {\n    // Static variable (class variable)\n    public static int counter = 0;\n    public static final String APP_NAME = \"Static Demo\";\n\n    // Instance variable\n    private String name;\n\n    public StaticExample(String name) {\n        this.name = name;\n        counter++; // Increment static counter\n    }\n\n    // Static method (class method)\n    public static void displayCounter() {\n        System.out.println(\"Total objects created: \" + counter);\n        // System.out.println(this.name); // ERROR: static method cannot use 'this'\n    }\n\n    // Static utility method\n    public static int calculateSum(int a, int b) {\n        return a + b;\n    }\n\n    // Static block (executed once when class is loaded)\n    static {\n        System.out.println(\"Static block executed - Class loaded\");\n        System.out.println(\"Application: \" + APP_NAME);\n    }\n\n    // Instance method\n    public void displayInfo() {\n        System.out.println(\"Name: \" + name + \", Counter: \" + counter);\n    }\n}\n\n// Usage\nStaticExample obj1 = new StaticExample(\"Object 1\");\nStaticExample obj2 = new StaticExample(\"Object 2\");\nStaticExample.displayCounter(); // Call static method\nSystem.out.println(StaticExample.calculateSum(5, 10)); // Static utility method\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#instanceof-operator","title":"<code>instanceof</code> Operator","text":"<p>Tests if an object is an instance of a particular class or interface.</p> <pre><code>public class InstanceOfDemo {\n    public static void main(String[] args) {\n        Object obj1 = \"Hello\";\n        Object obj2 = 42;\n        Object obj3 = new ArrayList&lt;&gt;();\n\n        // Using instanceof\n        System.out.println(obj1 instanceof String);    // true\n        System.out.println(obj1 instanceof Integer);   // false\n        System.out.println(obj2 instanceof Integer);   // true\n        System.out.println(obj3 instanceof List);      // true\n\n        // Safe casting with instanceof\n        if (obj1 instanceof String) {\n            String str = (String) obj1;\n            System.out.println(\"String length: \" + str.length());\n        }\n\n        // Pattern matching (Java 14+)\n        if (obj2 instanceof Integer number) {\n            System.out.println(\"Number: \" + number);\n        }\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#access-modifiers-public-private-protected-default","title":"\ud83d\udd12 Access Modifiers (<code>public</code>, <code>private</code>, <code>protected</code>, default)","text":"<p>Access modifiers control the visibility of classes, fields, methods, and constructors.</p> Modifier Same Class Same Package Subclass (different package) Anywhere <code>private</code> \u2705 \u274c \u274c \u274c <code>default</code> \u2705 \u2705 \u274c \u274c <code>protected</code> \u2705 \u2705 \u2705 \u274c <code>public</code> \u2705 \u2705 \u2705 \u2705 <pre><code>package com.example.access;\n\npublic class AccessModifiersDemo {\n    // Public - accessible from anywhere\n    public String publicField = \"Public field\";\n\n    // Protected - accessible in same package and subclasses\n    protected String protectedField = \"Protected field\";\n\n    // Default (package-private) - accessible only in same package\n    String defaultField = \"Default field\";\n\n    // Private - accessible only within this class\n    private String privateField = \"Private field\";\n\n    // Public method\n    public void publicMethod() {\n        System.out.println(\"Public method\");\n    }\n\n    // Protected method\n    protected void protectedMethod() {\n        System.out.println(\"Protected method\");\n    }\n\n    // Default method\n    void defaultMethod() {\n        System.out.println(\"Default method\");\n    }\n\n    // Private method\n    private void privateMethod() {\n        System.out.println(\"Private method\");\n    }\n}\n\n// Subclass in same package\nclass SubClass extends AccessModifiersDemo {\n    public void testAccess() {\n        // Can access public, protected, and default members\n        System.out.println(publicField);\n        System.out.println(protectedField);\n        System.out.println(defaultField);\n        // System.out.println(privateField); // Compile-time error\n\n        publicMethod();\n        protectedMethod();\n        defaultMethod();\n        // privateMethod(); // Compile-time error\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#packages-and-imports","title":"\ud83d\udce6 Packages and Imports","text":""},{"location":"tech-essentials-guide/programming/java/02-oops/#packages","title":"Packages","text":"<p>Used to organize related classes and avoid naming conflicts.</p> <pre><code>// File: com/example/banking/BankAccount.java\npackage com.example.banking;\n\npublic class BankAccount {\n    private String accountNumber;\n    private double balance;\n\n    public BankAccount(String accountNumber, double balance) {\n        this.accountNumber = accountNumber;\n        this.balance = balance;\n    }\n\n    // Methods...\n}\n\n// File: com/example/banking/Customer.java\npackage com.example.banking;\n\npublic class Customer {\n    private String name;\n    private String email;\n\n    public Customer(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    // Methods...\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#imports","title":"Imports","text":"<p>Used to bring classes or packages into current scope.</p> <pre><code>package com.example.app;\n\n// Import specific class\nimport java.util.ArrayList;\nimport java.util.HashMap;\n\n// Import all classes from package\nimport java.io.*;\n\n// Import static members\nimport static java.lang.Math.PI;\nimport static java.lang.Math.sqrt;\n\n// Import your own classes\nimport com.example.banking.BankAccount;\nimport com.example.banking.Customer;\n\npublic class MainApp {\n    public static void main(String[] args) {\n        // Using imported classes\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n\n        // Using static imports\n        double radius = 5.0;\n        double area = PI * radius * radius;\n        double side = sqrt(area);\n\n        // Using your own classes\n        BankAccount account = new BankAccount(\"12345\", 1000.0);\n        Customer customer = new Customer(\"John Doe\", \"john@example.com\");\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/02-oops/#practice-exercises","title":"\ud83d\udcda Practice Exercises","text":""},{"location":"tech-essentials-guide/programming/java/02-oops/#exercise-1-create-a-library-management-system","title":"\ud83d\udd27 Exercise 1: Create a Library Management System","text":"<p>Create classes for <code>Book</code>, <code>Author</code>, <code>Library</code>, and <code>Member</code> with proper OOP principles.</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#exercise-2-design-a-shape-hierarchy","title":"\ud83d\udd27 Exercise 2: Design a Shape Hierarchy","text":"<p>Create an abstract <code>Shape</code> class with subclasses <code>Circle</code>, <code>Rectangle</code>, <code>Triangle</code> implementing area and perimeter calculations.</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#exercise-3-implement-a-bank-account-system","title":"\ud83d\udd27 Exercise 3: Implement a Bank Account System","text":"<p>Create <code>Account</code>, <code>SavingsAccount</code>, <code>CheckingAccount</code> classes with inheritance and proper encapsulation.</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#exercise-4-design-a-vehicle-rental-system","title":"\ud83d\udd27 Exercise 4: Design a Vehicle Rental System","text":"<p>Create interfaces <code>Rentable</code>, <code>Insurable</code> and classes <code>Car</code>, <code>Motorcycle</code>, <code>Bicycle</code> implementing these interfaces.</p>"},{"location":"tech-essentials-guide/programming/java/02-oops/#additional-resources","title":"\ud83d\udd17 Additional Resources","text":"<ul> <li>Java OOP Tutorial</li> <li>Java Access Modifiers</li> <li>Java Packages Tutorial</li> </ul> <p>Last Updated: 2024 | Java Version: 17+</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/","title":"Java Programming Concepts: Interfaces and Abstract Classes","text":"<p>\ud83d\udcda Learning Resources: - Java Interfaces Tutorial - Java Abstract Classes Tutorial - Java Enums Tutorial - Functional Interfaces</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#6-interfaces-and-abstract-classes","title":"\ud83c\udfad 6. Interfaces and Abstract Classes","text":"<p>Both interfaces and abstract classes are used to achieve abstraction in Java and define a contract, but they serve different purposes and have different capabilities.</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#defining-and-using-interfaces","title":"\ud83d\udccb Defining and Using Interfaces","text":"<p>Definition: An interface is a blueprint of a class that defines a set of methods that implementing classes must provide.</p> <p>Key Characteristics: - Cannot be instantiated directly - Methods are implicitly <code>public abstract</code> (before Java 8) - Variables are implicitly <code>public static final</code> - A class can implement multiple interfaces</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#basic-interface-example","title":"Basic Interface Example","text":"<pre><code>// Interface definition\npublic interface Drawable {\n    // Constants (implicitly public static final)\n    int MAX_WIDTH = 1000;\n    int MAX_HEIGHT = 1000;\n\n    // Abstract methods (implicitly public abstract)\n    void draw();\n    void resize(int percentage);\n    void setColor(String color);\n\n    // Default method (Java 8+)\n    default void displayInfo() {\n        System.out.println(\"This is a drawable object\");\n    }\n\n    // Static method (Java 8+)\n    static void showMaxDimensions() {\n        System.out.println(\"Max dimensions: \" + MAX_WIDTH + \"x\" + MAX_HEIGHT);\n    }\n}\n\n// Implementing class\npublic class Circle implements Drawable {\n    private int radius;\n    private String color;\n\n    public Circle(int radius) {\n        this.radius = radius;\n        this.color = \"Black\";\n    }\n\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a circle with radius \" + radius);\n    }\n\n    @Override\n    public void resize(int percentage) {\n        radius = (int)(radius * (1 + percentage / 100.0));\n        System.out.println(\"Circle resized by \" + percentage + \"%. New radius: \" + radius);\n    }\n\n    @Override\n    public void setColor(String color) {\n        this.color = color;\n        System.out.println(\"Circle color set to: \" + color);\n    }\n\n    // Can override default method\n    @Override\n    public void displayInfo() {\n        System.out.println(\"This is a circle with radius \" + radius + \" and color \" + color);\n    }\n}\n\npublic class Square implements Drawable {\n    private int side;\n    private String color;\n\n    public Square(int side) {\n        this.side = side;\n        this.color = \"Black\";\n    }\n\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a square with side \" + side);\n    }\n\n    @Override\n    public void resize(int percentage) {\n        side = (int)(side * (1 + percentage / 100.0));\n        System.out.println(\"Square resized by \" + percentage + \"%. New side: \" + side);\n    }\n\n    @Override\n    public void setColor(String color) {\n        this.color = color;\n        System.out.println(\"Square color set to: \" + color);\n    }\n}\n\n// Usage\npublic class InterfaceDemo {\n    public static void main(String[] args) {\n        Drawable circle = new Circle(5);\n        Drawable square = new Square(4);\n\n        // Polymorphic behavior\n        circle.draw();\n        square.draw();\n\n        // Using default method\n        circle.displayInfo();\n        square.displayInfo();\n\n        // Using static method\n        Drawable.showMaxDimensions();\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#interface-vs-abstract-class","title":"\ud83d\udd04 Interface vs Abstract Class","text":"Feature Interface Abstract Class Purpose Defines a contract (what a class can do) Provides blueprint with partial implementation (what a class is) Methods Pre-Java 8: Only abstract methodsPost-Java 8: Abstract, Default, StaticPost-Java 9: Private Can have abstract and concrete methods Variables Only <code>public static final</code> variables Can have <code>final</code>, <code>non-final</code>, <code>static</code>, <code>non-static</code> variables Instantiation Cannot be instantiated directly Cannot be instantiated directly Inheritance A class <code>implements</code> an interface A class <code>extends</code> an abstract class Multiple A class can <code>implement</code> multiple interfaces A class can <code>extend</code> only one abstract class Constructor Cannot have constructors Can have constructors Access Modifiers Members are implicitly <code>public</code> Can have any access modifier <code>extends</code>/<code>implements</code> An interface can <code>extend</code> multiple interfaces An abstract class can <code>implement</code> interfaces and <code>extend</code> one class"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#functional-interfaces","title":"\ud83c\udfaf Functional Interfaces","text":"<p>Definition: An interface with exactly one abstract method, primarily used for lambda expressions.</p> <pre><code>// Functional interface\n@FunctionalInterface\npublic interface Calculator {\n    int operate(int a, int b);\n\n    // Can have default methods\n    default void displayResult(int result) {\n        System.out.println(\"Result: \" + result);\n    }\n\n    // Can have static methods\n    static Calculator getDefaultCalculator() {\n        return (a, b) -&gt; a + b;\n    }\n}\n\n// Built-in functional interfaces\nimport java.util.function.*;\n\npublic class FunctionalInterfaceDemo {\n    public static void main(String[] args) {\n        // Custom functional interface\n        Calculator adder = (x, y) -&gt; x + y;\n        Calculator multiplier = (x, y) -&gt; x * y;\n\n        System.out.println(\"Sum: \" + adder.operate(10, 5));\n        System.out.println(\"Product: \" + multiplier.operate(10, 5));\n\n        // Built-in functional interfaces\n        Predicate&lt;String&gt; isLong = s -&gt; s.length() &gt; 5;\n        Function&lt;String, Integer&gt; getLength = String::length;\n        Consumer&lt;String&gt; printer = System.out::println;\n        Supplier&lt;String&gt; greeting = () -&gt; \"Hello, World!\";\n\n        System.out.println(isLong.test(\"Hello World\")); // true\n        System.out.println(getLength.apply(\"Hello\")); // 5\n        printer.accept(\"Hello from Consumer\");\n        System.out.println(greeting.get());\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#default-and-static-methods-in-interfaces","title":"\ud83d\udd27 Default and Static Methods in Interfaces","text":""},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#default-methods","title":"Default Methods","text":"<p>Methods with implementation in interfaces (Java 8+).</p> <pre><code>public interface Logger {\n    void log(String message);\n\n    default void logInfo(String message) {\n        System.out.println(\"[INFO] \" + message);\n    }\n\n    default void logError(String message) {\n        System.err.println(\"[ERROR] \" + message);\n    }\n\n    default void logWarning(String message) {\n        System.out.println(\"[WARNING] \" + message);\n    }\n}\n\npublic class FileLogger implements Logger {\n    @Override\n    public void log(String message) {\n        System.out.println(\"Logging to file: \" + message);\n    }\n    // No need to implement default methods\n}\n\npublic class ConsoleLogger implements Logger {\n    @Override\n    public void log(String message) {\n        System.out.println(\"Logging to console: \" + message);\n    }\n\n    @Override\n    public void logInfo(String message) {\n        System.out.println(\"Console INFO: \" + message);\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#static-methods","title":"Static Methods","text":"<p>Methods that belong to the interface itself (Java 8+).</p> <pre><code>public interface MathUtils {\n    static int add(int a, int b) {\n        return a + b;\n    }\n\n    static int multiply(int a, int b) {\n        return a * b;\n    }\n\n    static double calculateAverage(double[] numbers) {\n        if (numbers.length == 0) return 0;\n\n        double sum = 0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.length;\n    }\n}\n\n// Usage\npublic class StaticMethodDemo {\n    public static void main(String[] args) {\n        System.out.println(MathUtils.add(5, 3)); // 8\n        System.out.println(MathUtils.multiply(4, 6)); // 24\n\n        double[] numbers = {1.0, 2.0, 3.0, 4.0, 5.0};\n        System.out.println(MathUtils.calculateAverage(numbers)); // 3.0\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#marker-interfaces","title":"\ud83c\udff7\ufe0f Marker Interfaces","text":"<p>Definition: Empty interfaces that mark classes for special behavior.</p> <pre><code>import java.io.Serializable;\nimport java.lang.Cloneable;\n\n// Serializable marker interface\npublic class Student implements Serializable {\n    private String name;\n    private int age;\n\n    public Student(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // No methods required for Serializable\n}\n\n// Custom marker interface\npublic interface Validatable {\n    // Empty interface - just marks the class as validatable\n}\n\npublic class User implements Validatable {\n    private String username;\n    private String email;\n\n    public User(String username, String email) {\n        this.username = username;\n        this.email = email;\n    }\n\n    public boolean isValid() {\n        return username != null &amp;&amp; !username.trim().isEmpty() &amp;&amp;\n               email != null &amp;&amp; email.contains(\"@\");\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#enums","title":"\ud83c\udfb2 Enums","text":"<p>Definition: Special class representing a fixed set of named constants.</p> <pre><code>// Basic enum\npublic enum DayOfWeek {\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\n}\n\n// Enum with attributes and methods\npublic enum TrafficLight {\n    RED(\"Stop\", 30),\n    YELLOW(\"Prepare to stop\", 5),\n    GREEN(\"Go\", 45);\n\n    private final String action;\n    private final int duration;\n\n    // Enum constructor is implicitly private\n    TrafficLight(String action, int duration) {\n        this.action = action;\n        this.duration = duration;\n    }\n\n    public String getAction() {\n        return action;\n    }\n\n    public int getDuration() {\n        return duration;\n    }\n\n    public TrafficLight next() {\n        return values()[(ordinal() + 1) % values().length];\n    }\n}\n\n// Enum with abstract methods\npublic enum Operation {\n    ADD {\n        @Override\n        public double apply(double a, double b) {\n            return a + b;\n        }\n    },\n    SUBTRACT {\n        @Override\n        public double apply(double a, double b) {\n            return a - b;\n        }\n    },\n    MULTIPLY {\n        @Override\n        public double apply(double a, double b) {\n            return a * b;\n        }\n    },\n    DIVIDE {\n        @Override\n        public double apply(double a, double b) {\n            if (b == 0) {\n                throw new ArithmeticException(\"Division by zero\");\n            }\n            return a / b;\n        }\n    };\n\n    public abstract double apply(double a, double b);\n}\n\n// Usage\npublic class EnumDemo {\n    public static void main(String[] args) {\n        // Basic enum\n        DayOfWeek today = DayOfWeek.MONDAY;\n        System.out.println(\"Today is \" + today);\n\n        // Enum with attributes\n        TrafficLight current = TrafficLight.RED;\n        System.out.println(\"Current light: \" + current + \n                         \", Action: \" + current.getAction() + \n                         \", Duration: \" + current.getDuration() + \" seconds\");\n\n        // Enum with abstract methods\n        Operation op = Operation.ADD;\n        System.out.println(\"5 + 3 = \" + op.apply(5, 3));\n\n        // Iterating through enum values\n        for (DayOfWeek day : DayOfWeek.values()) {\n            System.out.println(day);\n        }\n\n        // Enum comparison\n        if (today == DayOfWeek.MONDAY) {\n            System.out.println(\"It's Monday!\");\n        }\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#multiple-interface-implementation","title":"\ud83d\udd17 Multiple Interface Implementation","text":"<pre><code>public interface Flyable {\n    void fly();\n    default void land() {\n        System.out.println(\"Landing...\");\n    }\n}\n\npublic interface Swimmable {\n    void swim();\n    default void dive() {\n        System.out.println(\"Diving...\");\n    }\n}\n\npublic interface Walkable {\n    void walk();\n    default void run() {\n        System.out.println(\"Running...\");\n    }\n}\n\n// Class implementing multiple interfaces\npublic class Duck implements Flyable, Swimmable, Walkable {\n    @Override\n    public void fly() {\n        System.out.println(\"Duck is flying\");\n    }\n\n    @Override\n    public void swim() {\n        System.out.println(\"Duck is swimming\");\n    }\n\n    @Override\n    public void walk() {\n        System.out.println(\"Duck is walking\");\n    }\n\n    // Can override default methods\n    @Override\n    public void land() {\n        System.out.println(\"Duck is landing gracefully\");\n    }\n}\n\n// Usage\npublic class MultipleInterfaceDemo {\n    public static void main(String[] args) {\n        Duck duck = new Duck();\n\n        // Using methods from all interfaces\n        duck.fly();\n        duck.swim();\n        duck.walk();\n        duck.land();\n        duck.dive();\n        duck.run();\n\n        // Polymorphic references\n        Flyable flyable = duck;\n        Swimmable swimmable = duck;\n        Walkable walkable = duck;\n\n        flyable.fly();\n        swimmable.swim();\n        walkable.walk();\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#abstract-classes","title":"\ud83d\udccb Abstract Classes","text":"<p>Definition: A class that cannot be instantiated and may contain abstract methods that must be implemented by subclasses.</p> <pre><code>// Abstract class example\npublic abstract class Vehicle {\n    protected String brand;\n    protected String model;\n    protected int year;\n    protected double fuelLevel;\n\n    public Vehicle(String brand, String model, int year) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n        this.fuelLevel = 100.0;\n    }\n\n    // Abstract method (must be implemented by subclasses)\n    public abstract void start();\n    public abstract void stop();\n\n    // Concrete method (has implementation)\n    public void displayInfo() {\n        System.out.println(\"Brand: \" + brand + \", Model: \" + model + \", Year: \" + year);\n    }\n\n    public void refuel(double amount) {\n        if (amount &gt; 0) {\n            fuelLevel = Math.min(100.0, fuelLevel + amount);\n            System.out.println(\"Refueled. Current fuel level: \" + fuelLevel + \"%\");\n        }\n    }\n\n    public double getFuelLevel() {\n        return fuelLevel;\n    }\n}\n\npublic class Car extends Vehicle {\n    private boolean isAutomatic;\n\n    public Car(String brand, String model, int year, boolean isAutomatic) {\n        super(brand, model, year);\n        this.isAutomatic = isAutomatic;\n    }\n\n    @Override\n    public void start() {\n        System.out.println(\"Car starts with a key ignition.\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Car stops by turning off the engine.\");\n    }\n\n    public void shiftGear() {\n        if (isAutomatic) {\n            System.out.println(\"Automatic transmission - no manual shifting needed.\");\n        } else {\n            System.out.println(\"Manual transmission - driver shifts gears.\");\n        }\n    }\n}\n\npublic class Motorcycle extends Vehicle {\n    private boolean hasSidecar;\n\n    public Motorcycle(String brand, String model, int year, boolean hasSidecar) {\n        super(brand, model, year);\n        this.hasSidecar = hasSidecar;\n    }\n\n    @Override\n    public void start() {\n        System.out.println(\"Motorcycle starts with a kick start.\");\n    }\n\n    @Override\n    public void stop() {\n        System.out.println(\"Motorcycle stops by applying brakes.\");\n    }\n\n    public void wheelie() {\n        System.out.println(\"Motorcycle performs a wheelie!\");\n    }\n}\n\n// Usage\npublic class AbstractClassDemo {\n    public static void main(String[] args) {\n        Vehicle car = new Car(\"Toyota\", \"Camry\", 2023, true);\n        Vehicle motorcycle = new Motorcycle(\"Honda\", \"CBR\", 2022, false);\n\n        // Polymorphic behavior\n        car.start();\n        car.stop();\n        motorcycle.start();\n        motorcycle.stop();\n\n        // Specific behaviors\n        ((Car) car).shiftGear();\n        ((Motorcycle) motorcycle).wheelie();\n    }\n}\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#interface-vs-abstract-class-when-to-use-which","title":"\ud83d\udd04 Interface vs Abstract Class - When to Use Which?","text":""},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#use-interfaces-when","title":"Use Interfaces When:","text":"<ul> <li>You want to define a contract that multiple unrelated classes can implement</li> <li>You need multiple inheritance of type</li> <li>You want to provide default implementations (Java 8+)</li> <li>You're defining a simple contract with no shared state</li> </ul>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#use-abstract-classes-when","title":"Use Abstract Classes When:","text":"<ul> <li>You want to share code among several closely related classes</li> <li>You expect that classes that extend your abstract class have many common methods or fields</li> <li>You want to declare non-public members</li> <li>You want to define constructors</li> </ul>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#practice-exercises","title":"\ud83d\udcda Practice Exercises","text":""},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#exercise-1-create-a-payment-system","title":"\ud83d\udd27 Exercise 1: Create a Payment System","text":"<p>Create interfaces <code>PaymentMethod</code>, <code>Refundable</code> and abstract class <code>Payment</code> with concrete implementations like <code>CreditCard</code>, <code>PayPal</code>, <code>BankTransfer</code>.</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#exercise-2-design-a-notification-system","title":"\ud83d\udd27 Exercise 2: Design a Notification System","text":"<p>Create interface <code>Notifiable</code> and abstract class <code>Notification</code> with subclasses <code>EmailNotification</code>, <code>SMSNotification</code>, <code>PushNotification</code>.</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#exercise-3-implement-a-database-connection-system","title":"\ud83d\udd27 Exercise 3: Implement a Database Connection System","text":"<p>Create interface <code>DatabaseConnection</code> and abstract class <code>AbstractDatabase</code> with implementations for <code>MySQL</code>, <code>PostgreSQL</code>, <code>SQLite</code>.</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#exercise-4-design-a-plugin-system","title":"\ud83d\udd27 Exercise 4: Design a Plugin System","text":"<p>Create interface <code>Plugin</code> and abstract class <code>BasePlugin</code> for a modular application architecture.</p>"},{"location":"tech-essentials-guide/programming/java/03-interfaces-abstract-classes/#additional-resources","title":"\ud83d\udd17 Additional Resources","text":"<ul> <li>Java Interfaces Tutorial</li> <li>Java Abstract Classes Tutorial</li> <li>Java Enums Tutorial</li> <li>Functional Interfaces</li> </ul> <p>Last Updated: 2024 | Java Version: 17+ </p>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/","title":"\ud83e\uddd1\u200d\ud83d\udcbb Core Java Syllabus for SDET Roles","text":""},{"location":"tech-essentials-guide/programming/java/java-syllabus/#1-java-basics","title":"\ud83e\uddf1 1. Java Basics","text":"<ul> <li>Introduction to Java &amp; its role in testing</li> <li>Java History and Features</li> <li>JVM, JRE, JDK \u2013 Roles and Differences</li> <li>Setting up Java Environment</li> <li>Writing &amp; Running a Java Program</li> <li>Java Coding Standards</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#2-java-syntax-and-fundamentals","title":"\ud83d\udcdd 2. Java Syntax and Fundamentals","text":"<ul> <li>Java Keywords and Identifiers</li> <li>Variables and Data Types</li> <li>Type Casting (Implicit &amp; Explicit)</li> <li>Operators (Arithmetic, Logical, Relational, Bitwise, Assignment)</li> <li>Flow Control Statements:</li> <li>if, if-else, switch</li> <li>for, while, do-while</li> <li>break, continue</li> <li>Arrays:</li> <li>Single &amp; Multidimensional Arrays</li> <li>Array manipulation techniques</li> <li>Input Handling: <code>Scanner</code>, <code>BufferedReader</code></li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#3-methods-and-functional-programming-basics","title":"\ud83e\udde0 3. Methods and Functional Programming Basics","text":"<ul> <li>Defining and Calling Methods</li> <li>Method Parameters and Return Types</li> <li>Method Overloading</li> <li>Recursion</li> <li>Scope of Variables (Local, Global, Static)</li> <li>Pass by Value vs Pass by Reference</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#4-string-manipulation","title":"\ud83d\udd24 4. String Manipulation","text":"<ul> <li>String Class and String Pool</li> <li><code>String</code>, <code>StringBuilder</code>, <code>StringBuffer</code></li> <li>Common String methods and usage</li> <li>String Comparison and Immutability</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#5-object-oriented-programming-oop","title":"\u2699\ufe0f 5. Object-Oriented Programming (OOP)","text":"<ul> <li>OOP Principles Overview</li> <li>Defining Classes and Objects</li> <li>Attributes and Behavior</li> <li>Constructor (Default, Parameterized, Constructor Overloading)</li> <li>Key OOP Concepts:</li> <li>Encapsulation</li> <li>Inheritance</li> <li>Polymorphism (Compile-time &amp; Run-time)</li> <li>Abstraction</li> <li><code>this</code>, <code>super</code>, <code>final</code>, <code>static</code>, <code>instanceof</code> keywords</li> <li>Access Modifiers (<code>public</code>, <code>private</code>, <code>protected</code>, default)</li> <li>Packages and Imports</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#6-interfaces-and-abstract-classes","title":"\ud83c\udfad 6. Interfaces and Abstract Classes","text":"<ul> <li>Defining and Using Interfaces</li> <li>Interface vs Abstract Class</li> <li>Functional Interfaces</li> <li>Default and Static methods in Interfaces</li> <li>Marker Interfaces</li> <li>Enums</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#7-exception-handling","title":"\ud83d\udea8 7. Exception Handling","text":"<ul> <li>Types of Errors: Compile-time vs Runtime</li> <li>Exception Hierarchy</li> <li>Checked vs Unchecked Exceptions</li> <li><code>try</code>, <code>catch</code>, <code>finally</code>, <code>throw</code>, <code>throws</code></li> <li>Creating Custom Exceptions</li> <li>Best Practices in Exception Handling</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#8-multithreading-and-concurrency-sdet-oriented","title":"\ud83e\uddf5 8. Multithreading and Concurrency (SDET-Oriented)","text":"<ul> <li>Threads and Runnable Interface</li> <li>Thread Lifecycle</li> <li>Thread Methods (<code>start()</code>, <code>run()</code>, <code>sleep()</code>, <code>join()</code>, etc.)</li> <li>Synchronization and Locks</li> <li>Thread Safety &amp; Race Conditions</li> <li><code>wait()</code>, <code>notify()</code>, <code>notifyAll()</code></li> <li>Executor Framework (Overview)</li> <li>Practical scenarios in test automation with threads</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#9-wrapper-classes","title":"\ud83c\udf81 9. Wrapper Classes","text":"<ul> <li>Autoboxing and Unboxing</li> <li>Usage in Collections and Test Data Management</li> <li>Common methods in Wrapper classes</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#10-java-collections-framework","title":"\ud83e\uddfa 10. Java Collections Framework","text":"<ul> <li>Introduction to Collections API</li> <li>List: <code>ArrayList</code>, <code>LinkedList</code></li> <li>Set: <code>HashSet</code>, <code>LinkedHashSet</code>, <code>TreeSet</code></li> <li>Map: <code>HashMap</code>, <code>TreeMap</code>, <code>LinkedHashMap</code></li> <li>Queue: <code>PriorityQueue</code>, <code>Deque</code></li> <li>Stack</li> <li>Iterators: <code>Iterator</code>, <code>ListIterator</code></li> <li>Comparable vs Comparator</li> <li>Collections Utility Class</li> <li>Best Practices in Collections for Automation</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#11-utility-apis-for-testing","title":"\ud83d\udee0\ufe0f 11. Utility APIs for Testing","text":"<ul> <li>Working with <code>java.time</code> (Date and Time API)</li> <li><code>Math</code>, <code>Random</code>, and <code>UUID</code> classes</li> <li>File I/O: <code>File</code>, <code>FileReader</code>, <code>FileWriter</code>, <code>BufferedReader</code>, <code>BufferedWriter</code></li> <li>Java 8+ Features:</li> <li>Lambda Expressions</li> <li>Streams and Filters</li> <li>Method References</li> <li>Optional</li> <li>Useful Built-in Annotations</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#12-java-for-sdet-practical-integration-topics","title":"\ud83e\uddea 12. Java for SDET (Practical Integration Topics)","text":"<ul> <li>Java + Selenium/TestNG Integration Concepts</li> <li>Java in BDD with Cucumber</li> <li>Page Object Model (POM) using Core Java</li> <li>Handling Test Data (Excel, CSV, JSON)</li> <li>REST API Testing using Core Java (via <code>HttpURLConnection</code> or <code>RestAssured</code>)</li> <li>Java Logging Frameworks (<code>Log4j</code>, <code>SLF4J</code> basics)</li> <li>Basic Maven Understanding (for test automation)</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#13-java-memory-management-and-garbage-collection","title":"\ud83e\udde0 13. Java Memory Management and Garbage Collection","text":""},{"location":"tech-essentials-guide/programming/java/java-syllabus/#java-memory-management-overview","title":"Java Memory Management Overview","text":"<p>Java memory management is handled by the Java Virtual Machine (JVM) and includes:</p>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#memory-areas-in-jvm","title":"Memory Areas in JVM","text":"<ul> <li>Heap:</li> <li>Stores objects and class instances.</li> <li>Divided into:<ul> <li>Young Generation (Eden + Survivor spaces): Newly created objects.</li> <li>Old Generation (Tenured): Long-lived objects.</li> </ul> </li> <li>Stack:</li> <li>Stores method calls and local variables.</li> <li>Each thread has its own stack.</li> <li>Method Area:</li> <li>Stores class-level data (static fields, methods).</li> <li>Program Counter (PC) Register:</li> <li>Stores the address of the current JVM instruction being executed.</li> <li>Native Method Stack:</li> <li>Supports native method execution (outside JVM).</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#garbage-collection-gc","title":"Garbage Collection (GC)","text":"<p>Garbage Collection is the process of automatically freeing memory by deleting unreachable objects.</p>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#key-concepts","title":"Key Concepts:","text":"<ul> <li>Automatic Memory Management by JVM.</li> <li>Objects without references become eligible for GC.</li> <li>You cannot force GC, but can request it using: <pre><code>System.gc();\n</code></pre></li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#gc-process-and-generations","title":"GC Process and Generations","text":"<ol> <li>Young Generation</li> <li>All new objects are allocated here.</li> <li>Frequent GC called Minor GC.</li> <li> <p>Surviving objects move to Old Generation.</p> </li> <li> <p>Old Generation (Tenured)</p> </li> <li>Long-lived objects reside here.</li> <li> <p>Cleaned via Major GC or Full GC.</p> </li> <li> <p>Metaspace (Java 8+)</p> </li> <li>Replaces PermGen.</li> <li>Stores class metadata.</li> </ol>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#garbage-collectors-in-java","title":"Garbage Collectors in Java","text":"GC Name Description Serial GC Single-threaded, suitable for small applications (<code>-XX:+UseSerialGC</code>) Parallel GC Multi-threaded, focuses on throughput (<code>-XX:+UseParallelGC</code>) CMS (Deprecated) Low pause time, replaced by G1 (<code>-XX:+UseConcMarkSweepGC</code>) G1 GC Default from Java 9+, balanced (<code>-XX:+UseG1GC</code>) ZGC / Shenandoah Ultra-low pause time (Java 11+)"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#gc-phases","title":"GC Phases","text":"<ul> <li>Mark: Identifies live (reachable) objects.</li> <li>Sweep: Removes unreachable objects.</li> <li>Compact: Rearranges memory (in some collectors).</li> </ul>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#memory-leaks","title":"Memory Leaks","text":"<p>Memory leaks happen when unused objects are still referenced. Common causes: - Static collections - Unclosed resources - Long-living listeners</p> <p>Use tools like VisualVM, JConsole, YourKit, Eclipse MAT to analyze.</p>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#useful-jvm-options","title":"Useful JVM Options","text":"<pre><code>-verbose:gc\n-Xms&lt;size&gt;         # Initial Heap Size\n-Xmx&lt;size&gt;         # Max Heap Size\n-XX:+UseG1GC\n-XX:+PrintGCDetails\n-XX:+HeapDumpOnOutOfMemoryError\n</code></pre>"},{"location":"tech-essentials-guide/programming/java/java-syllabus/#references","title":"References","text":"<ul> <li>Java Memory Management - Oracle Docs</li> <li>G1 Garbage Collector</li> <li>Java Performance Tuning</li> </ul>"},{"location":"tech-essentials-guide/programming/python/","title":"\ud83d\udc0d Python for SDETs: In-Depth Guide","text":"<p>This section provides detailed insights into Python concepts vital for SDETs, covering advanced data structures, functional programming paradigms, and effective package management.</p>"},{"location":"tech-essentials-guide/programming/python/#table-of-contents","title":"Table of Contents:","text":"<ul> <li>Advanced Data Structures</li> <li>Functional Programming in Python</li> <li>Concurrency and Asynchronous Programming</li> <li>Package Management: Pip &amp; Poetry</li> </ul>"},{"location":"tech-essentials-guide/programming/python/concurrency/","title":"Concurrency and Asynchronous Programming in Python","text":"<p>Explore multithreading, multiprocessing, and asynchronous programming in Python, and how they can be applied to optimize test execution and handle I/O-bound tasks.</p>"},{"location":"tech-essentials-guide/programming/python/concurrency/#topics","title":"Topics:","text":"<ul> <li>Multithreading: <code>threading</code> module, GIL implications.</li> <li>Multiprocessing: <code>multiprocessing</code> module for true parallelism.</li> <li><code>asyncio</code>: Asynchronous I/O for non-blocking operations.</li> <li>Parallel Test Execution: Strategies for running Selenium/API tests in parallel.</li> <li>When to Use Which: Choosing the right concurrency model.</li> </ul>"},{"location":"tech-essentials-guide/programming/python/concurrency/#sdet-perspective-on-concurrency-in-python","title":"\ud83d\udca1 SDET Perspective on Concurrency in Python","text":"<p>Concurrency in Python is a powerful tool for SDETs to speed up test execution, especially for I/O-bound tasks like API calls, network requests, or waiting for UI elements. Understanding the differences between threading, multiprocessing, and asyncio is crucial for choosing the right approach and avoiding common pitfalls like the Global Interpreter Lock (GIL).</p>"},{"location":"tech-essentials-guide/programming/python/concurrency/#multithreading-threading-module","title":"\u2705 Multithreading: <code>threading</code> Module","text":"<p>Definition: Multithreading allows different parts of a program to run concurrently within the same process. In Python, due to the Global Interpreter Lock (GIL), multithreading is best suited for I/O-bound tasks (tasks that spend most of their time waiting for external resources, like network or disk I/O), not CPU-bound tasks.</p>"},{"location":"tech-essentials-guide/programming/python/concurrency/#global-interpreter-lock-gil","title":"Global Interpreter Lock (GIL)","text":"<ul> <li>What it is: A mutex that protects access to Python objects, preventing multiple threads from executing Python bytecodes at once. This means only one thread can be in a state of execution at any point in time.</li> <li>Impact on SDETs: For CPU-bound tasks (e.g., heavy data processing, complex calculations), Python multithreading won't provide true parallelism. However, for I/O-bound tasks (e.g., waiting for web elements, making API calls), threads can still be effective because the GIL is released during I/O operations.</li> </ul>"},{"location":"tech-essentials-guide/programming/python/concurrency/#creating-threads","title":"Creating Threads","text":"<pre><code>import threading\nimport time\n\ndef task(name):\n    print(f\"Thread {name}: Starting task...\")\n    time.sleep(2) # Simulate I/O-bound operation (e.g., waiting for a web element)\n    print(f\"Thread {name}: Task finished.\")\n\n# Create threads\nthread1 = threading.Thread(target=task, args=(\"A\",))\nthread2 = threading.Thread(target=task, args=(\"B\",))\n\n# Start threads\nthread1.start()\nthread2.start()\n\n# Wait for threads to complete\nthread1.join()\nthread2.join()\n\nprint(\"All threads completed.\")\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/concurrency/#thread-synchronization","title":"Thread Synchronization","text":"<p>When multiple threads access shared resources, synchronization mechanisms are needed to prevent race conditions.</p> <ul> <li><code>Lock</code>: A basic synchronization primitive. A thread acquires the lock before accessing a shared resource and releases it afterward.</li> </ul> <p>SDET Relevance: Protecting shared test data, logging mechanisms, or report generation when running tests concurrently.</p> <pre><code>import threading\n\nshared_data = []\ndata_lock = threading.Lock()\n\ndef add_data(item):\n    with data_lock: # Acquire lock\n        shared_data.append(item)\n        print(f\"Added {item}. Current data: {shared_data}\")\n    # Lock is automatically released when exiting 'with' block\n\nthreads = []\nfor i in range(5):\n    thread = threading.Thread(target=add_data, args=(i,))\n    threads.append(thread)\n    thread.start()\n\nfor thread in threads:\n    thread.join()\n\nprint(f\"Final shared data: {shared_data}\")\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/concurrency/#multiprocessing-multiprocessing-module","title":"\u2705 Multiprocessing: <code>multiprocessing</code> Module","text":"<p>Definition: Multiprocessing involves running multiple processes independently. Each process has its own Python interpreter and memory space, so the GIL does not apply. This allows for true parallelism on multi-core processors.</p> <p>SDET Relevance: Ideal for CPU-bound tasks or when you need to run completely isolated test environments (e.g., running different test suites in parallel, each in its own process).</p> <pre><code>import multiprocessing\nimport time\n\ndef cpu_bound_task(n):\n    print(f\"Process {multiprocessing.current_process().name}: Starting CPU-bound task...\")\n    sum_val = 0\n    for i in range(n):\n        sum_val += i * i\n    print(f\"Process {multiprocessing.current_process().name}: Task finished. Sum: {sum_val}\")\n\nif __name__ == '__main__': # Essential for multiprocessing on Windows\n    # Create processes\n    process1 = multiprocessing.Process(target=cpu_bound_task, args=(10000000,))\n    process2 = multiprocessing.Process(target=cpu_bound_task, args=(10000000,))\n\n    # Start processes\n    process1.start()\n    process2.start()\n\n    # Wait for processes to complete\n    process1.join()\n    process2.join()\n\n    print(\"All processes completed.\")\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/concurrency/#inter-process-communication-ipc","title":"Inter-Process Communication (IPC)","text":"<ul> <li><code>Queue</code>: For safe message passing between processes.</li> <li><code>Pipe</code>: For two-way communication between two processes.</li> <li><code>Value</code> / <code>Array</code>: For sharing simple data types or arrays.</li> </ul> <p>SDET Relevance: Collecting results from parallel test runs, distributing test data to worker processes.</p> <pre><code>import multiprocessing\n\ndef worker(queue):\n    data = queue.get()\n    print(f\"Worker received: {data}\")\n    queue.put(data * 2)\n\nif __name__ == '__main__':\n    q = multiprocessing.Queue()\n    p = multiprocessing.Process(target=worker, args=(q,))\n    p.start()\n\n    q.put(5)\n    result = q.get()\n    print(f\"Main process received: {result}\")\n\n    p.join()\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/concurrency/#asynchronous-programming-asyncio","title":"\u2705 Asynchronous Programming: <code>asyncio</code>","text":"<p>Definition: <code>asyncio</code> is a library to write concurrent code using the <code>async</code>/<code>await</code> syntax. It's single-threaded and uses an event loop to manage tasks. It's highly efficient for I/O-bound and high-concurrency network applications because it doesn't block while waiting for I/O operations.</p> <p>SDET Relevance: Making multiple API calls concurrently, handling long-running network operations in a non-blocking way, or interacting with asynchronous web applications (e.g., using Playwright's async API).</p> <pre><code>import asyncio\nimport aiohttp # Requires: pip install aiohttp\n\nasync def fetch_url(session, url):\n    print(f\"Fetching {url}...\")\n    async with session.get(url) as response:\n        return await response.text()\n\nasync def main():\n    urls = [\n        \"https://jsonplaceholder.typicode.com/todos/1\",\n        \"https://jsonplaceholder.typicode.com/posts/1\",\n        \"https://jsonplaceholder.typicode.com/users/1\"\n    ]\n\n    async with aiohttp.ClientSession() as session:\n        tasks = []\n        for url in urls:\n            tasks.append(fetch_url(session, url))\n\n        # Run tasks concurrently\n        responses = await asyncio.gather(*tasks)\n\n        for i, response_text in enumerate(responses):\n            print(f\"Response from {urls[i]}: {response_text[:50]}...\")\n\nif __name__ == '__main__':\n    asyncio.run(main())\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/concurrency/#parallel-test-execution-strategies","title":"\u2705 Parallel Test Execution Strategies","text":""},{"location":"tech-essentials-guide/programming/python/concurrency/#1-using-pytest-xdist-for-parallel-test-execution","title":"1. Using <code>pytest-xdist</code> for Parallel Test Execution","text":"<p><code>pytest-xdist</code> is a pytest plugin that extends pytest to run tests in parallel across multiple CPUs or remote hosts.</p> <p>SDET Relevance: Significantly reducing test suite execution time for large test suites.</p> <p>Installation: <pre><code>pip install pytest-xdist\n</code></pre></p> <p>Usage: <pre><code># Run tests in parallel using 4 worker processes\npytest -n 4\n\n# Run tests in parallel using as many processes as CPU cores\npytest -n auto\n\n# Run tests across multiple machines (requires more setup)\npytest -n 2 --dist=loadfile --tx ssh=user@host1//path/to/project --tx ssh=user@host2//path/to/project\n</code></pre></p>"},{"location":"tech-essentials-guide/programming/python/concurrency/#2-selenium-grid-with-python","title":"2. Selenium Grid with Python","text":"<p>Selenium Grid allows you to run your Selenium tests on different machines against different browsers in parallel.</p> <p>SDET Relevance: Scaling test execution, running tests across various browser-OS combinations, and integrating with cloud-based testing platforms (e.g., BrowserStack, Sauce Labs).</p> <pre><code>from selenium import webdriver\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n\n# Assuming a Selenium Grid Hub is running at http://localhost:4444/wd/hub\n\ndef run_test_on_grid(browser_name):\n    if browser_name == \"chrome\":\n        caps = DesiredCapabilities.CHROME.copy()\n    elif browser_name == \"firefox\":\n        caps = DesiredCapabilities.FIREFOX.copy()\n    else:\n        raise ValueError(\"Unsupported browser\")\n\n    driver = webdriver.Remote(\n        command_executor='http://localhost:4444/wd/hub',\n        desired_capabilities=caps\n    )\n    driver.get(\"http://www.google.com\")\n    print(f\"Title on {browser_name}: {driver.title}\")\n    driver.quit()\n\nif __name__ == '__main__':\n    # Example of running in separate processes (or threads)\n    # In a real framework, this would be managed by pytest-xdist or a custom runner\n    chrome_process = multiprocessing.Process(target=run_test_on_grid, args=(\"chrome\",))\n    firefox_process = multiprocessing.Process(target=run_test_on_grid, args=(\"firefox\",))\n\n    chrome_process.start()\n    firefox_process.start()\n\n    chrome_process.join()\n    firefox_process.join()\n\n    print(\"Grid tests completed.\")\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/concurrency/#when-to-use-which-concurrency-model","title":"\u2705 When to Use Which Concurrency Model","text":"Model Best For Considerations SDET Use Case Multithreading I/O-bound tasks (network requests, file I/O, waiting for UI elements). Limited by GIL for CPU-bound tasks. Shared memory can lead to race conditions. Concurrent API calls, waiting for multiple elements on a page, background logging. Multiprocessing CPU-bound tasks, true parallelism. Higher overhead (each process has its own memory). IPC needed for communication. Running independent test suites in parallel, heavy data processing for test data generation. <code>asyncio</code> High-concurrency I/O-bound tasks, network applications. Requires <code>async</code>/<code>await</code> syntax. Not suitable for CPU-bound tasks. Concurrent API calls, interacting with modern asynchronous web applications (e.g., using Playwright's async API)."},{"location":"tech-essentials-guide/programming/python/concurrency/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>concurrency</code>, <code>multithreading</code>, <code>multiprocessing</code>, <code>asyncio</code>, <code>gil</code>, <code>pytest-xdist</code>, <code>selenium-grid</code>, <code>sdet</code>, <code>programming</code>, <code>advanced-python</code>, <code>parallel-execution</code></p>"},{"location":"tech-essentials-guide/programming/python/data-structures/","title":"Advanced Data Structures in Python","text":"<p>Explore Python's built-in and specialized data structures beyond the basics, and understand their optimal use cases in test automation and data manipulation.</p>"},{"location":"tech-essentials-guide/programming/python/data-structures/#topics","title":"Topics:","text":"<ul> <li>Advanced List Operations: Slicing, list comprehensions, nested lists.</li> <li>Dictionary Deep Dive: Views, iteration, nested dictionaries.</li> <li>Sets for Uniqueness: Set operations (union, intersection, difference).</li> <li><code>collections</code> Module: <code>deque</code>, <code>Counter</code>, <code>defaultdict</code>, <code>namedtuple</code>.</li> <li>When to Use Which: Performance considerations and practical examples.</li> </ul>"},{"location":"tech-essentials-guide/programming/python/data-structures/#sdet-perspective-on-python-data-structures","title":"\ud83d\udca1 SDET Perspective on Python Data Structures","text":"<p>Python's flexible and powerful built-in data structures are a cornerstone for efficient test automation. SDETs frequently use them to manage test data, parse API responses (often JSON), interact with web elements, and organize test configurations. A deep understanding allows for more concise, readable, and performant test scripts.</p>"},{"location":"tech-essentials-guide/programming/python/data-structures/#advanced-list-operations","title":"\u2705 Advanced List Operations","text":"<p>Lists are ordered, mutable sequences that can hold items of different data types.</p>"},{"location":"tech-essentials-guide/programming/python/data-structures/#slicing","title":"Slicing","text":"<p>Slicing allows you to extract a portion of a list. The syntax is <code>list[start:end:step]</code>.</p> <ul> <li><code>start</code>: (Optional) The starting index (inclusive). Defaults to 0.</li> <li><code>end</code>: (Optional) The ending index (exclusive). Defaults to the end of the list.</li> <li><code>step</code>: (Optional) The step size. Defaults to 1.</li> </ul> <p>SDET Relevance: Extracting specific ranges of data from a list of test results or web elements.</p> <pre><code>my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(my_list[2:7])    # [2, 3, 4, 5, 6] - Elements from index 2 up to (but not including) 7\nprint(my_list[:5])     # [0, 1, 2, 3, 4] - Elements from beginning up to (but not including) 5\nprint(my_list[5:])     # [5, 6, 7, 8, 9] - Elements from index 5 to the end\nprint(my_list[::2])    # [0, 2, 4, 6, 8] - Every second element\nprint(my_list[::-1])   # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] - Reverse the list\nprint(my_list[1:8:3])  # [1, 4, 7] - From index 1 to 8 (exclusive), step 3\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#list-comprehensions","title":"List Comprehensions","text":"<p>A concise way to create lists. They are often more readable and efficient than traditional <code>for</code> loops for list creation.</p> <p>SDET Relevance: Transforming data, filtering lists of elements, generating test data.</p> <pre><code># Basic transformation: Get text from a list of WebElements\n# web_elements = [elem1, elem2, elem3] # Assume these are Selenium WebElements\n# element_texts = [elem.text for elem in web_elements]\n\n# Filtering: Get only visible elements\n# visible_elements = [elem for elem in web_elements if elem.is_displayed()]\n\n# Generating test data: Create a list of 10 user IDs\nuser_ids = [f\"user_{i:03d}\" for i in range(1, 11)]\nprint(user_ids) # ['user_001', 'user_002', ..., 'user_010']\n\n# Nested list comprehension: Flatten a list of lists\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflat_list = [num for row in matrix for num in row]\nprint(flat_list) # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#nested-lists","title":"Nested Lists","text":"<p>Lists can contain other lists, forming structures like matrices or tables.</p> <p>SDET Relevance: Representing tabular test data (e.g., from CSV/Excel), or complex UI structures.</p> <pre><code>test_data = [\n    [\"username\", \"password\", \"expected_result\"],\n    [\"user1\", \"pass1\", \"success\"],\n    [\"user2\", \"wrong_pass\", \"failure\"]\n]\n\n# Accessing data\nprint(test_data[1][0]) # \"user1\"\n\n# Iterating through nested list\nfor row in test_data:\n    print(row)\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#dictionary-deep-dive","title":"\u2705 Dictionary Deep Dive","text":"<p>Dictionaries are unordered collections of key-value pairs. Keys must be unique and immutable.</p>"},{"location":"tech-essentials-guide/programming/python/data-structures/#views-keys-values-items","title":"Views (<code>keys()</code>, <code>values()</code>, <code>items()</code>)","text":"<p>These methods return view objects that provide a dynamic view of the dictionary's contents. Changes to the dictionary are reflected in the view.</p> <p>SDET Relevance: Iterating through API response fields, checking for specific keys or values in configuration.</p> <pre><code>api_response = {\n    \"id\": \"prod123\",\n    \"name\": \"Laptop\",\n    \"price\": 1200.00,\n    \"inStock\": True\n}\n\nprint(api_response.keys())   # dict_keys(['id', 'name', 'price', 'inStock'])\nprint(api_response.values()) # dict_values(['prod123', 'Laptop', 1200.0, True])\nprint(api_response.items())  # dict_items([('id', 'prod123'), ...])\n\n# Iterating through items\nfor key, value in api_response.items():\n    print(f\"{key}: {value}\")\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#nested-dictionaries","title":"Nested Dictionaries","text":"<p>Dictionaries can contain other dictionaries, useful for representing hierarchical data like complex JSON structures.</p> <p>SDET Relevance: Parsing complex JSON/XML API responses, managing multi-level test configurations.</p> <pre><code>user_profile = {\n    \"user_id\": \"U001\",\n    \"personal_info\": {\n        \"first_name\": \"Alice\",\n        \"last_name\": \"Smith\",\n        \"email\": \"alice@example.com\"\n    },\n    \"address\": {\n        \"street\": \"123 Test St\",\n        \"city\": \"Testville\",\n        \"zip\": \"12345\"\n    }\n}\n\nprint(user_profile[\"personal_info\"][\"email\"]) # \"alice@example.com\"\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#sets-for-uniqueness","title":"\u2705 Sets for Uniqueness","text":"<p>Sets are unordered collections of unique elements. They are highly optimized for membership testing and eliminating duplicates.</p>"},{"location":"tech-essentials-guide/programming/python/data-structures/#set-operations","title":"Set Operations","text":"<p>SDET Relevance: Comparing two lists of data for common elements, finding missing elements, or identifying unique values.</p> <pre><code>expected_ids = {\"A1\", \"B2\", \"C3\", \"D4\"}\nactual_ids = {\"B2\", \"C3\", \"E5\", \"F6\"}\n\n# Union: All unique elements from both sets\nprint(expected_ids.union(actual_ids)) # {'F6', 'D4', 'C3', 'B2', 'E5', 'A1'}\n\n# Intersection: Common elements in both sets\nprint(expected_ids.intersection(actual_ids)) # {'C3', 'B2'}\n\n# Difference: Elements in expected_ids but not in actual_ids\nprint(expected_ids.difference(actual_ids)) # {'D4', 'A1'}\n\n# Symmetric Difference: Elements in either set, but not in both\nprint(expected_ids.symmetric_difference(actual_ids)) # {'F6', 'D4', 'E5', 'A1'}\n\n# Check for subset/superset\nset1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\nprint(set1.issubset(set2)) # True\nprint(set2.issuperset(set1)) # True\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#the-collections-module","title":"\u2705 The <code>collections</code> Module","text":"<p>Python's <code>collections</code> module provides specialized container datatypes that offer alternatives to Python's general purpose built-in containers (<code>dict</code>, <code>list</code>, <code>set</code>, <code>tuple</code>).</p>"},{"location":"tech-essentials-guide/programming/python/data-structures/#deque-double-ended-queue","title":"<code>deque</code> (Double-ended Queue)","text":"<p>Definition: A list-like container with fast appends and pops on either end.</p> <p>SDET Relevance: Implementing a fixed-size log buffer, managing a history of actions in a UI test.</p> <pre><code>from collections import deque\n\n# Max 3 elements\nd = deque(maxlen=3)\nd.append(1)\nd.append(2)\nd.append(3)\nprint(d) # deque([1, 2, 3])\nd.append(4) # 1 is popped from the left\nprint(d) # deque([2, 3, 4])\n\nd.appendleft(0) # 4 is popped from the right\nprint(d) # deque([0, 2, 3])\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#counter","title":"<code>Counter</code>","text":"<p>Definition: A <code>dict</code> subclass for counting hashable objects. It's an unordered collection where elements are stored as dictionary keys and their counts as dictionary values.</p> <p>SDET Relevance: Counting occurrences of specific log messages, API response codes, or elements on a page.</p> <pre><code>from collections import Counter\n\nlog_messages = [\"INFO\", \"ERROR\", \"INFO\", \"DEBUG\", \"ERROR\", \"INFO\"]\ncounts = Counter(log_messages)\nprint(counts) # Counter({'INFO': 3, 'ERROR': 2, 'DEBUG': 1})\n\nprint(counts[\"INFO\"]) # 3\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#defaultdict","title":"<code>defaultdict</code>","text":"<p>Definition: A <code>dict</code> subclass that calls a factory function to supply missing values. When you try to access a key that doesn't exist, it automatically creates it with a default value.</p> <p>SDET Relevance: Grouping test results by category, accumulating data without explicit <code>if key in dict</code> checks.</p> <pre><code>from collections import defaultdict\n\n# Default value for missing keys will be an empty list\ngrouped_errors = defaultdict(list)\n\nerrors = [\n    {\"type\": \"API\", \"code\": 500},\n    {\"type\": \"UI\", \"code\": 404},\n    {\"type\": \"API\", \"code\": 401}\n]\n\nfor error in errors:\n    grouped_errors[error[\"type\"]].append(error[\"code\"])\n\nprint(grouped_errors) # defaultdict(&lt;class 'list'&gt;, {'API': [500, 401], 'UI': [404]})\nprint(grouped_errors[\"DB\"]) # [] (automatically creates an empty list)\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#namedtuple","title":"<code>namedtuple</code>","text":"<p>Definition: A factory function for creating tuple subclasses with named fields. This makes the code more readable and self-documenting than using plain tuples.</p> <p>SDET Relevance: Representing structured test data records (e.g., user credentials, product details) in a lightweight, immutable way.</p> <pre><code>from collections import namedtuple\n\n# Define a namedtuple for a TestUser\nTestUser = namedtuple(\"TestUser\", [\"username\", \"password\", \"email\"])\n\n# Create instances\nuser1 = TestUser(\"testuser1\", \"pass123\", \"test1@example.com\")\nuser2 = TestUser(username=\"testuser2\", password=\"pass456\", email=\"test2@example.com\")\n\n# Access fields by name\nprint(user1.username) # \"testuser1\"\nprint(user2.email)    # \"test2@example.com\"\n\n# Still behaves like a tuple\nprint(user1[0]) # \"testuser1\"\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/data-structures/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>data-structures</code>, <code>list</code>, <code>dict</code>, <code>set</code>, <code>collections-module</code>, <code>sdet</code>, <code>programming</code>, <code>advanced-python</code></p>"},{"location":"tech-essentials-guide/programming/python/functional-programming/","title":"Functional Programming in Python","text":"<p>Discover functional programming concepts in Python and how they can lead to more concise, readable, and testable code, especially for data transformations.</p>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#topics","title":"Topics:","text":"<ul> <li>Lambda Functions: Anonymous functions for quick operations.</li> <li><code>map()</code>, <code>filter()</code>, <code>reduce()</code>: Applying functions to iterables.</li> <li>List, Dict, Set Comprehensions: Concise data structure creation.</li> <li>Generators: Memory-efficient iteration for large datasets.</li> <li>Decorators: Enhancing functions without modifying their code.</li> </ul>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#sdet-perspective-on-functional-programming","title":"\ud83d\udca1 SDET Perspective on Functional Programming","text":"<p>Functional programming (FP) paradigms in Python can significantly enhance the readability, maintainability, and testability of your automation scripts. By focusing on immutable data and pure functions, you can reduce side effects, making your code easier to reason about and debug. This is particularly useful for data processing, transformations, and creating flexible utility functions.</p>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#lambda-functions-anonymous-functions","title":"\u2705 Lambda Functions (Anonymous Functions)","text":"<p>Definition: A small anonymous function. A lambda function can take any number of arguments, but can only have one expression.</p> <p>Syntax: <code>lambda arguments : expression</code></p> <p>SDET Relevance: Quick, inline functions for sorting, filtering, or simple transformations, especially when used with <code>map()</code>, <code>filter()</code>, or <code>sorted()</code>.</p> <pre><code># Example 1: Simple lambda\nadd_two = lambda x: x + 2\nprint(add_two(5)) # 7\n\n# Example 2: Sorting a list of dictionaries by a specific key\nusers = [\n    {'name': 'Alice', 'age': 30},\n    {'name': 'Bob', 'age': 25},\n    {'name': 'Charlie', 'age': 35}\n]\n\n# Sort by age\nsorted_users = sorted(users, key=lambda user: user['age'])\nprint(sorted_users)\n# Output: [{'name': 'Bob', 'age': 25}, {'name': 'Alice', 'age': 30}, {'name': 'Charlie', 'age': 35}]\n\n# Example 3: Filtering elements in Selenium\n# from selenium.webdriver.remote.webelement import WebElement\n# all_elements: list[WebElement] = driver.find_elements(By.CSS_SELECTOR, \".item\")\n# visible_elements = list(filter(lambda elem: elem.is_displayed(), all_elements))\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#map-filter-reduce","title":"\u2705 <code>map()</code>, <code>filter()</code>, <code>reduce()</code>","text":"<p>These are higher-order functions that operate on iterables.</p>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#mapfunction-iterable","title":"<code>map(function, iterable)</code>","text":"<p>Definition: Applies a given <code>function</code> to each item of an <code>iterable</code> and returns a <code>map</code> object (an iterator).</p> <p>SDET Relevance: Transforming data from API responses, converting a list of web elements to their text values.</p> <pre><code># Example: Convert a list of numbers to strings\nnumbers = [1, 2, 3, 4]\nstrings = list(map(str, numbers))\nprint(strings) # ['1', '2', '3', '4']\n\n# Example: Extracting text from a list of Selenium WebElements\n# from selenium.webdriver.remote.webelement import WebElement\n# web_elements: list[WebElement] = driver.find_elements(By.CSS_SELECTOR, \".product-name\")\n# product_names = list(map(lambda elem: elem.text, web_elements))\n# print(product_names)\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#filterfunction-iterable","title":"<code>filter(function, iterable)</code>","text":"<p>Definition: Constructs an iterator from elements of an <code>iterable</code> for which a <code>function</code> returns true.</p> <p>SDET Relevance: Filtering log messages, test data, or web elements based on certain criteria.</p> <pre><code># Example: Filter even numbers\nnumbers = [1, 2, 3, 4, 5, 6]\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers) # [2, 4, 6]\n\n# Example: Filter log entries containing \"ERROR\"\nlog_entries = [\"INFO: User logged in\", \"ERROR: DB connection failed\", \"DEBUG: Data processed\"]\nerror_logs = list(filter(lambda log: \"ERROR\" in log, log_entries))\nprint(error_logs) # ['ERROR: DB connection failed']\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#reducefunction-iterable-initializer","title":"<code>reduce(function, iterable[, initializer])</code>","text":"<p>Definition: Applies a <code>function</code> of two arguments cumulatively to the items of an <code>iterable</code>, from left to right, so as to reduce the iterable to a single value. (Requires <code>functools</code> module).</p> <p>SDET Relevance: Aggregating data, calculating sums or products from a list of values.</p> <pre><code>from functools import reduce\n\n# Example: Sum all numbers in a list\nnumbers = [1, 2, 3, 4, 5]\nsum_of_numbers = reduce(lambda x, y: x + y, numbers)\nprint(sum_of_numbers) # 15\n\n# Example: Concatenate strings\nwords = [\"Hello\", \" \", \"World\", \"!\"]\nsentence = reduce(lambda x, y: x + y, words)\nprint(sentence) # \"Hello World!\"\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#list-dict-set-comprehensions","title":"\u2705 List, Dict, Set Comprehensions","text":"<p>These provide a concise way to create lists, dictionaries, and sets. They are often more readable and efficient than traditional <code>for</code> loops.</p> <p>SDET Relevance: Efficiently transforming and filtering data, generating test data, parsing complex data structures.</p> <pre><code># List Comprehension: Extracting specific data from a list of dictionaries\napi_users = [\n    {'id': 1, 'name': 'Alice', 'status': 'active'},\n    {'id': 2, 'name': 'Bob', 'status': 'inactive'},\n    {'id': 3, 'name': 'Charlie', 'status': 'active'}\n]\n\nactive_user_names = [user['name'] for user in api_users if user['status'] == 'active']\nprint(active_user_names) # ['Alice', 'Charlie']\n\n# Dictionary Comprehension: Creating a mapping from a list\nproduct_list = [(\"Laptop\", 1200), (\"Mouse\", 25), (\"Keyboard\", 75)]\nproduct_prices = {name: price for name, price in product_list}\nprint(product_prices) # {'Laptop': 1200, 'Mouse': 25, 'Keyboard': 75}\n\n# Set Comprehension: Getting unique error codes from a list of log strings\nlogs = [\"ERROR 101\", \"INFO 200\", \"ERROR 101\", \"WARN 300\", \"ERROR 102\"]\nunique_errors = {log.split()[1] for log in logs if log.startswith(\"ERROR\")}\nprint(unique_errors) # {'101', '102'}\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#generators","title":"\u2705 Generators","text":"<p>Definition: Functions that return an iterator that produces a sequence of results instead of a single value. They use the <code>yield</code> keyword. Generators are memory-efficient because they produce items one at a time, only when requested.</p> <p>SDET Relevance: Processing large log files, generating large test data sets on the fly, or iterating through a large number of web elements without loading all of them into memory at once.</p> <pre><code>def generate_test_users(num_users):\n    for i in range(1, num_users + 1):\n        yield {\n            \"username\": f\"user_{i}\",\n            \"email\": f\"user_{i}@example.com\",\n            \"password\": \"password123\"\n        }\n\n# Usage:\n# This will not generate all 100000 users at once, saving memory\nfor user_data in generate_test_users(100000):\n    # print(user_data) # Process each user data as it's generated\n    if user_data[\"username\"] == \"user_5\":\n        print(f\"Found user_5: {user_data}\")\n        break\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#decorators","title":"\u2705 Decorators","text":"<p>Definition: A decorator is a design pattern in Python that allows a user to add new functionality to an existing object without modifying its structure. Decorators are essentially functions that take another function as an argument, add some functionality, and return another function.</p> <p>SDET Relevance: Adding cross-cutting concerns like logging, timing, error handling, retries, or authentication checks to test methods or utility functions without modifying their core logic.</p> <pre><code>import time\n\n# Example 1: Timing decorator\ndef timing_decorator(func):\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f\"Function '{func.__name__}' took {end_time - start_time:.4f} seconds to execute.\")\n        return result\n    return wrapper\n\n@timing_decorator\ndef perform_login_test():\n    print(\"Performing login test...\")\n    time.sleep(2) # Simulate network delay\n    print(\"Login test completed.\")\n\n# perform_login_test()\n\n# Example 2: Retry decorator for flaky tests\ndef retry(max_attempts=3, delay=1):\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            for attempt in range(1, max_attempts + 1):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    print(f\"Attempt {attempt} failed: {e}\")\n                    if attempt &lt; max_attempts:\n                        time.sleep(delay)\n            raise Exception(f\"Function failed after {max_attempts} attempts.\")\n        return wrapper\n    return decorator\n\n@retry(max_attempts=2, delay=0.5)\ndef flaky_element_click():\n    import random\n    if random.random() &lt; 0.7: # 70% chance of failure\n        raise Exception(\"Element not clickable!\")\n    print(\"Element clicked successfully!\")\n\n# flaky_element_click()\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/functional-programming/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>functional-programming</code>, <code>lambda</code>, <code>map</code>, <code>filter</code>, <code>reduce</code>, <code>comprehensions</code>, <code>generators</code>, <code>decorators</code>, <code>sdet</code>, <code>programming</code>, <code>advanced-python</code></p>"},{"location":"tech-essentials-guide/programming/python/package-management/","title":"Python Package Management: Pip &amp; Poetry","text":"<p>An in-depth guide to managing Python project dependencies and virtual environments using Pip and Poetry, essential for reproducible test automation setups.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#topics","title":"Topics:","text":"<ul> <li>Pip Basics: <code>pip install</code>, <code>pip freeze</code>, <code>requirements.txt</code>.</li> <li>Virtual Environments: <code>venv</code> module for isolated environments.</li> <li>Poetry: Installation, <code>pyproject.toml</code>, dependency resolution, publishing.</li> <li>Dependency Conflicts: Strategies for resolving common issues.</li> <li>Best Practices: Managing dependencies in test automation projects.</li> </ul>"},{"location":"tech-essentials-guide/programming/python/package-management/#sdet-perspective-on-package-management","title":"\ud83d\udca1 SDET Perspective on Package Management","text":"<p>Effective package management is critical for SDETs. It ensures that your test automation framework has all the necessary libraries (e.g., Selenium, Requests, Pytest) in the correct versions, prevents dependency conflicts, and makes your project reproducible across different environments (local, CI/CD). Virtual environments are a cornerstone of good Python development practices for isolation.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#pip-basics","title":"\u2705 Pip Basics","text":"<p>Pip is the standard package-management system used to install and manage software packages written in Python.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#common-pip-commands","title":"Common Pip Commands","text":"Command Description SDET Relevance <code>pip install &lt;package_name&gt;</code> Installs a package. Installing test automation libraries (e.g., <code>pip install selenium</code>, <code>pip install requests</code>). <code>pip install &lt;package_name&gt;==&lt;version&gt;</code> Installs a specific version of a package. Ensuring consistent library versions across environments. <code>pip install -r requirements.txt</code> Installs all packages listed in <code>requirements.txt</code>. Setting up a project's dependencies from a shared file. <code>pip freeze</code> Outputs installed packages in <code>requirements.txt</code> format. Generating <code>requirements.txt</code> for project reproducibility. <code>pip uninstall &lt;package_name&gt;</code> Uninstalls a package. Removing unused or problematic dependencies. <code>pip list</code> Lists installed packages. Checking installed packages and their versions. <code>pip show &lt;package_name&gt;</code> Shows information about an installed package. Getting details like version, location, and dependencies of a package."},{"location":"tech-essentials-guide/programming/python/package-management/#requirementstxt","title":"<code>requirements.txt</code>","text":"<p>A file that lists all the dependencies of a Python project, along with their exact versions, to ensure reproducibility.</p> <p>Example <code>requirements.txt</code>:</p> <pre><code>selenium==4.10.0\nrequests==2.31.0\npytest==7.4.0\npytest-html==4.0.0\n</code></pre> <p>SDET Best Practice: Always generate and commit a <code>requirements.txt</code> file (using <code>pip freeze &gt; requirements.txt</code>) to your version control system. This ensures that anyone cloning your project can install the exact same dependencies.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#virtual-environments-venv-module","title":"\u2705 Virtual Environments: <code>venv</code> Module","text":"<p>Definition: A virtual environment is a self-contained directory tree that contains a Python installation for a particular version of Python, plus a number of additional packages. It allows you to work on a specific project without affecting other projects or the global Python installation.</p> <p>SDET Relevance: - Isolation: Prevents dependency conflicts between different test automation projects. - Reproducibility: Ensures that your project runs with the exact same dependencies every time, regardless of the global Python environment. - Cleanliness: Keeps your global Python installation clean.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#common-venv-commands","title":"Common <code>venv</code> Commands","text":"Command Description <code>python3 -m venv &lt;env_name&gt;</code> Creates a new virtual environment named <code>&lt;env_name&gt;</code>. <code>source &lt;env_name&gt;/bin/activate</code> Activates the virtual environment (Linux/macOS). <code>&lt;env_name&gt;\\Scripts\\activate.bat</code> Activates the virtual environment (Windows Command Prompt). <code>&lt;env_name&gt;\\Scripts\\Activate.ps1</code> Activates the virtual environment (Windows PowerShell). <code>deactivate</code> Deactivates the current virtual environment. <p>Example Workflow:</p> <pre><code># 1. Create a virtual environment\npython3 -m venv venv\n\n# 2. Activate it\nsource venv/bin/activate # On Linux/macOS\n# venv\\Scripts\\activate.bat # On Windows\n\n# (venv) # You'll see (venv) in your prompt, indicating activation\n\n# 3. Install dependencies within the virtual environment\npip install selenium pytest requests\n\n# 4. Generate requirements.txt\npip freeze &gt; requirements.txt\n\n# 5. Deactivate when done\ndeactivate\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/package-management/#poetry","title":"\u2705 Poetry","text":"<p>Poetry is a dependency management and packaging tool for Python. It aims to simplify dependency management and packaging by providing a single tool to manage project dependencies, virtual environments, and publishing packages.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#key-features","title":"Key Features","text":"<ul> <li><code>pyproject.toml</code>: Uses a single <code>pyproject.toml</code> file to define project metadata and dependencies, replacing <code>setup.py</code>, <code>requirements.txt</code>, <code>setup.cfg</code>, and <code>MANIFEST.in</code>.</li> <li>Dependency Resolution: Advanced dependency resolver that ensures all dependencies are compatible.</li> <li>Virtual Environment Management: Automatically creates and manages virtual environments for your project.</li> <li>Packaging and Publishing: Simplifies building and publishing your Python packages.</li> </ul>"},{"location":"tech-essentials-guide/programming/python/package-management/#installation","title":"Installation","text":"<pre><code>pip install poetry # Or use recommended installer script\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/package-management/#common-poetry-commands","title":"Common Poetry Commands","text":"Command Description SDET Relevance <code>poetry new &lt;project_name&gt;</code> Creates a new Poetry project. Starting a new test automation framework project. <code>poetry init</code> Initializes Poetry in an existing project. Converting an existing project to use Poetry. <code>poetry add &lt;package_name&gt;</code> Adds a dependency to <code>pyproject.toml</code> and installs it. Adding Selenium, Pytest, Requests to your project. <code>poetry install</code> Installs all dependencies listed in <code>pyproject.toml</code>. Setting up the project on a new machine or in CI/CD. <code>poetry update</code> Updates dependencies to their latest compatible versions. Keeping dependencies up-to-date. <code>poetry run &lt;command&gt;</code> Runs a command within the project's virtual environment. Executing tests: <code>poetry run pytest</code>. <code>poetry shell</code> Activates the project's virtual environment. Manually entering the virtual environment. <code>poetry export -f requirements.txt --output requirements.txt --without-hashes</code> Exports dependencies to a <code>requirements.txt</code> file. For compatibility with tools that only understand <code>requirements.txt</code>. <p>Example <code>pyproject.toml</code> snippet:</p> <pre><code>[tool.poetry]\nname = \"my-automation-framework\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Your Name &lt;you@example.com&gt;\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\nselenium = \"^4.10.0\"\nrequests = \"^2.31.0\"\n\n[tool.poetry.group.dev.dependencies]\npytest = \"^7.4.0\"\npytest-html = \"^4.0.0\"\n</code></pre>"},{"location":"tech-essentials-guide/programming/python/package-management/#dependency-conflicts-strategies-for-resolution","title":"\u2705 Dependency Conflicts: Strategies for Resolution","text":"<p>Dependency conflicts occur when different packages in your project require different, incompatible versions of the same dependency. This is a common headache in test automation.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#common-causes","title":"Common Causes","text":"<ul> <li>Transitive Dependencies: A package you install depends on another package, which in turn depends on a third, and so on.</li> <li>Conflicting Requirements: Two direct dependencies require different major versions of a common library.</li> </ul>"},{"location":"tech-essentials-guide/programming/python/package-management/#resolution-strategies","title":"Resolution Strategies","text":"<ol> <li>Use a Good Dependency Manager: Tools like Poetry (or Maven/Gradle in Java) have sophisticated dependency resolvers that try to find a compatible set of versions for all dependencies.</li> <li>Pin Exact Versions: In <code>requirements.txt</code>, use <code>==</code> to specify exact versions (e.g., <code>selenium==4.10.0</code>). This ensures reproducibility but can make updates harder.</li> <li>Use Version Ranges Carefully: In <code>pyproject.toml</code> or <code>setup.py</code>, use caret (<code>^</code>) or tilde (<code>~</code>) operators to allow for minor/patch updates while preventing breaking changes.<ul> <li><code>^1.2.3</code> (Caret): Compatible with <code>1.2.3</code>, <code>1.2.4</code>, <code>1.3.0</code>, but not <code>2.0.0</code>.</li> <li><code>~1.2.3</code> (Tilde): Compatible with <code>1.2.3</code>, <code>1.2.4</code>, but not <code>1.3.0</code>.</li> </ul> </li> <li>Isolate with Virtual Environments: This is the most fundamental step. Each project gets its own isolated set of dependencies.</li> <li>Review Dependency Trees: Use tools to visualize your dependency tree (<code>pipdeptree</code> for pip, <code>poetry show --tree</code> for Poetry) to identify where conflicts arise.</li> <li>Upgrade/Downgrade Strategically: If a conflict occurs, try upgrading or downgrading the conflicting dependency to a version that satisfies all requirements. Start with the most problematic dependency.</li> <li>Exclude Transitive Dependencies (Advanced): In some cases, you might need to explicitly exclude a transitive dependency if it's causing a conflict and you know it's not strictly needed or can be replaced.</li> </ol> <p>SDET Best Practice: Proactively manage your dependencies. Regularly update them in a controlled manner, and always use virtual environments. When a conflict arises, address it systematically rather than ignoring it.</p>"},{"location":"tech-essentials-guide/programming/python/package-management/#tags","title":"\ud83c\udff7 Tags","text":"<p><code>python</code>, <code>package-management</code>, <code>pip</code>, <code>poetry</code>, <code>venv</code>, <code>virtual-environments</code>, <code>dependencies</code>, <code>pyproject.toml</code>, <code>requirements.txt</code>, <code>sdet</code>, <code>programming</code>, <code>best-practices</code></p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/","title":"\ud83d\udcd8 Comprehensive Manual Testing Notes","text":"","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>\ud83d\udcd8 Comprehensive Manual Testing Notes</li> <li>\ud83d\udcda Table of Contents</li> <li>\ud83e\udde0 Introduction to Manual Testing<ul> <li>\ud83d\udd11 Importance of Manual Testing</li> </ul> </li> <li>\ud83e\uddf0 Types of Manual Testing<ul> <li>\ud83d\udd25 Smoke / Sanity Testing</li> <li>\u2705 Functional Testing</li> <li>\ud83d\udd17 Integration Testing</li> <li>\ud83c\udf10 End-to-End Testing</li> <li>\ud83d\udd04 Regression Testing</li> <li>\ud83d\udd0d Exploratory Testing</li> <li>\ud83d\ude80 Performance Testing</li> </ul> </li> <li>\ud83d\udd04 Manual Testing Process<ul> <li>Step-by-Step Process</li> <li>Flowchart Representation</li> </ul> </li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#introduction-to-manual-testing","title":"\ud83e\udde0 Introduction to Manual Testing","text":"<p>Manual testing involves manually verifying software for defects by simulating end-user behavior. It requires analytical skills, domain expertise, and proficiency in test execution to ensure the software meets functionality and quality standards.</p>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#importance-of-manual-testing","title":"\ud83d\udd11 Importance of Manual Testing","text":"<ul> <li>Human Insight: Identifies usability and design flaws that automation may miss.</li> <li>Flexibility: Adaptable to exploratory and ad-hoc testing scenarios.</li> <li>Comprehensive Coverage: Helps uncover edge cases and scenarios where automation is impractical.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#types-of-manual-testing","title":"\ud83e\uddf0 Types of Manual Testing","text":"","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#smoke-sanity-testing","title":"\ud83d\udd25 Smoke / Sanity Testing","text":"<ul> <li>Purpose: Verify basic functionality of the application.</li> <li>Example: Checking if the login page loads correctly.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#functional-testing","title":"\u2705 Functional Testing","text":"<ul> <li>Purpose: Validate that the application behaves as expected.</li> <li>Example: Testing if a user can successfully place an order.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#integration-testing","title":"\ud83d\udd17 Integration Testing","text":"<ul> <li>Purpose: Ensure modules work together seamlessly.</li> <li>Example: Testing the interaction between the payment gateway and the order system.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#end-to-end-testing","title":"\ud83c\udf10 End-to-End Testing","text":"<ul> <li>Purpose: Test the entire application workflow.</li> <li>Example: Simulating a user journey from registration to checkout.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#regression-testing","title":"\ud83d\udd04 Regression Testing","text":"<ul> <li>Purpose: Verify that new changes haven\u2019t broken existing functionality.</li> <li>Example: Retesting login functionality after a code update.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#exploratory-testing","title":"\ud83d\udd0d Exploratory Testing","text":"<ul> <li>Purpose: Ad-hoc testing to discover issues without predefined cases.</li> <li>Example: Randomly navigating through the application to find bugs.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#performance-testing","title":"\ud83d\ude80 Performance Testing","text":"<ul> <li>Purpose: Assess application speed and stability.</li> <li>\ud83d\udcaa Stress Testing: Test system behavior under extreme load.</li> <li>\ud83d\udcc8 Load Testing: Test system behavior under expected load.</li> </ul>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#manual-testing-process","title":"\ud83d\udd04 Manual Testing Process","text":"","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>\ud83d\udcdc Requirement Analysis: Understand the requirements and scope of testing.</li> <li>\ud83d\udcdd Test Planning: Define the testing strategy, timeline, and resources.</li> <li>\ud83e\uddea Test Case Design: Create detailed test cases based on requirements.</li> <li>\ud83d\udee0\ufe0f Test Environment Setup: Prepare the testing environment and data.</li> <li>\ud83d\ude80 Test Execution: Execute test cases and document results.</li> <li>\ud83d\udc1e Defect Reporting: Log defects in a defect tracking tool.</li> <li>\u2705 Test Closure: Summarize testing activities and results.</li> </ol>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-basics/#flowchart-representation","title":"Flowchart Representation","text":"<p>```mermaid graph TD     A[Requirement Analysis] --&gt; B[Test Planning]     B --&gt; C[Test Case Design]     C --&gt; D[Test Environment Setup]     D --&gt; E[Test Execution]     E --&gt; F[Defect Reporting]     F --&gt; G[Test Closure]</p>","tags":["manual-testing","performance-testing","test-strategy","defect-management","bug-reporting","test-design","qa","sdet","unit-test","integration-test","end-to-end-test"]},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/","title":"Manual testing detailed","text":"<p>Hello there! As an SDET, you're looking for a concise yet comprehensive manual testing guide in markdown, complete with figures, diagrams, and emojis for a Material for MkDocs setup. Let's dive in!</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#manual-testing-your-go-to-guide-for-sdets","title":"\ud83d\udcda Manual Testing: Your Go-To Guide for SDETs","text":"<p>Manual testing is a crucial part of software development that involves a person actively using the software to find bugs and issues. It's a hands-on approach ensuring software works as intended and meets user needs.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#what-is-manual-testing","title":"\ud83c\udfaf What is Manual Testing?","text":"<p>Manual testing is a technique where a QA manually tests a software application to identify bugs by following predefined test cases. The QA analyzes performance from an end user\u2019s perspective, comparing actual behavior against expected behavior, reporting any differences as a bug.</p> <ul> <li>Example: If a login button doesn't redirect to the homepage as expected, that's a bug to report.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#why-manual-testing-is-essential","title":"\ud83d\udca1 Why Manual Testing is Essential","text":"<p>Despite the rise of automation, manual testing remains vital for several reasons: *   Human Intuition &amp; User Experience \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83d\udc69: Humans are creative and can test software in ways automated testing might miss, providing insights into user-friendliness. *   Early Defect Detection \ud83d\udc1b: It helps discover bugs in the early stages of the SDLC, especially for UI/UX. *   Flexibility &amp; Adaptability \ud83e\udd38: Testers can adjust to changing conditions and requirements, ideal for early prototypes or unplanned changes. *   Cost-Effectiveness for Small Projects \ud83d\udcb0: For small, short-term projects, it can be cheaper than setting up automation frameworks. *   Feasibility Check for Automation \u2705: Every new application needs manual testing before automation feasibility can be checked. *   Ensures Bug-Free &amp; Stable Product \u2728: The main goal is to deliver a stable, bug-free product that conforms to requirements.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#key-characteristics-of-manual-testing","title":"\ud83c\udf1f Key Characteristics of Manual Testing","text":"<p>Manual testing involves specific attributes that distinguish it: *   Human Performance \ud83d\ude4b: Conducted by human testers using the product like end-users, providing input and observing results. *   Investigative/Exploratory Testing \ud83d\udd0d: Testers explore applications without predefined test cases, aiding in locating unforeseen problems. *   Time-Intensive \u23f3: Requires significant time, especially for large systems. *   Visual Feedback \ud83d\udc40: Ensures the user interface aligns visually with user expectations. *   Hands-on Understanding \ud83d\ude4c: Provides deeper insights into real-time behavior and usability. *   No Programming Knowledge Required (for black-box) \ud83e\uddd1\u200d\ud83d\udcbb: Testers interact like regular users without complex code. *   Prone to Human Error \ud83e\udd26\u200d\u2640\ufe0f: Testers might overlook aspects due to fatigue or human error. *   Less Reliable / Consistent \ud83d\udcc9: Does not provide testing on all aspects, and results can be subjective. *   Limited Coverage \ud83e\udd0f: Difficult to achieve comprehensive test coverage, especially in complex systems.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#software-development-life-cycle-sdlc","title":"\ud83c\udfd7\ufe0f Software Development Life Cycle (SDLC)","text":"<p>SDLC is a step-by-step process used by the software industry to design, develop, and test software in a systematic way. It ensures a quality product delivery.</p> <p>SDLC Phases \u2699\ufe0f: 1.  Requirement Analysis \ud83d\udccb: Understanding and documenting customer needs (e.g., BRD, SRS, CRS). 2.  Design \ud83c\udfd7\ufe0f: System architects build the complete framework and architecture (High-Level Design, Low-Level Design). 3.  Coding/Development \ud83d\udcbb: Development team writes the software code based on design documents. 4.  Testing \u2705: Testing team evaluates the software for defects and compliance with requirements. 5.  Release/Deployment \ud83d\ude80: Software is deployed to the customer environment. 6.  Maintenance \ud83d\udd27: Ongoing support and updates for the software.</p> <pre><code>graph TD\n    A[Requirement Analysis] --&gt; B[Design]\n    B --&gt; C[Coding]\n    C --&gt; D[Testing]\n    D --&gt; E[Release]\n    E --&gt; F[Maintenance]</code></pre>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#sdlc-models","title":"\ud83d\udcdc SDLC Models","text":"<p>Companies follow various SDLC models based on project size, cost, and requirements. Each model has a different approach to following SDLC phases.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#waterfall-model","title":"\ud83d\udca7 Waterfall Model","text":"<ul> <li>Definition: A traditional, old, and linear sequential model where phases are followed step-by-step, like a ladder. One phase must complete before the next begins, and there's no going back to a previous phase.</li> <li>When to Use: For short, non-complex projects with clear and static requirements.</li> <li>Advantages \u2705:<ul> <li>Good product quality due to detailed documentation in every phase.</li> <li>Less chances of bugs as requirements don't change frequently.</li> </ul> </li> <li>Disadvantages \u274c:<ul> <li>Not suitable for complex or long projects.</li> <li>Cannot accommodate changing requirements.</li> <li>Difficult and costly to fix defects found late in the cycle as it requires going back to previous phases.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#spiral-model","title":"\ud83c\udf00 Spiral Model","text":"<ul> <li>Definition: A risk-driven model that combines elements of the Waterfall and Iterative models. It's an incremental development approach focusing on risk analysis in each cycle.</li> <li>Phases: Planning, Risk Analysis, Engineering (Design &amp; Development), and Evaluation.</li> <li>Iterative &amp; Incremental: Each cycle is an iteration, and new modules are added incrementally. Each cycle releases a new version of the software.</li> <li>When to Use: When frequent deliveries are required and requirements may change. Not suitable for smaller projects due to high cost.</li> <li>Advantages \u2705: Risk handling is a key feature. Testing is done in every cycle.</li> <li>Disadvantages \u274c: Costly and not suitable for smaller projects.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#v-model-verification-validation-model","title":"\ud83d\udcd0 V-Model (Verification &amp; Validation Model)","text":"<ul> <li>Definition: An extension of the Waterfall model where each development phase is associated with a testing phase, executed in a V-shaped manner. It\u2019s also called the V&amp;V Model.</li> <li>Two Sides:<ul> <li>Left Side (Verification / SDLC / Quality Assurance): Focuses on checking documents (BRD, SRS, HLD, LLD) and involves static testing.</li> <li>Right Side (Validation / STLC / Quality Control): Focuses on actual product testing (Unit, Integration, System, Acceptance testing) and involves dynamic testing.</li> </ul> </li> <li>Key Idea: \"Are we building the product right?\" (Verification) vs. \"Are we building the right product?\" (Validation).</li> <li>Advantages \u2705:<ul> <li>Testing starts from the beginning of the project.</li> <li>Defects are found at an early stage, reducing fixing cost.</li> <li>Better understanding of requirements due to early testing involvement.</li> </ul> </li> <li>Disadvantages \u274c:<ul> <li>Not good for complex or object-oriented projects.</li> <li>High documentation effort.</li> <li>No working software is produced until late in the life cycle.</li> <li>High initial investment as all teams (dev, test) are hired early.</li> </ul> </li> </ul> <p><pre><code>graph LR\n    subgraph Verification (SDLC / Quality Assurance)\n        CRS(Customer Requirement Spec.) --&amp;gt; BRD(Business Requirement Doc.)\n        BRD --&amp;gt; SRS(Software Requirement Spec.)\n        SRS --&amp;gt; HLD(High Level Design)\n        HLD --&amp;gt; LLD(Low Level Design)\n        LLD --&amp;gt; Coding(Coding)\n    end\n\n    subgraph Validation (STLC / Quality Control)\n        Coding --&amp;gt; UnitTest(Unit Test)\n        UnitTest --&amp;gt; IntegrationTest(Integration Test)\n        IntegrationTest --&amp;gt; SystemTest(System Test)\n        SystemTest --&amp;gt; AcceptanceTest(Acceptance Test)\n        AcceptanceTest --&amp;gt; CRS\n    end\n\n    subgraph Verification Links\n        CRS -- QA: Acceptance Test Plan &amp; Cases --&gt; AcceptanceTest\n        SRS -- QA: System Test Plan &amp; Cases --&gt; SystemTest\n        HLD -- QA: Integration Test Plan &amp; Cases --&gt; IntegrationTest\n        LLD -- QA: Functional Test Plan &amp; Cases --&gt; FunctionalTest\n        Coding -- Dev: Unit Test / White Box --&gt; UnitTest\n    end</code></pre> Note: Functional Test is part of System Testing.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#iterative-model","title":"\ud83d\udd04 Iterative Model","text":"<ul> <li>Definition: Software is developed through repeated cycles (iterations). Each iteration delivers a working piece of software (build) based on prioritized requirements.</li> <li>Process: Pick one requirement (e.g., X), follow complete SDLC phases (requirement analysis, design, coding, testing, release), deliver first build, get feedback, then work on next requirement (Y).</li> <li>Iterative + Incremental: It's iterative because it repeats cycles, and incremental because modules are added over time.</li> <li>Advantages \u2705:<ul> <li>Debugging is easier as work is divided into modules.</li> <li>Easily adaptable to changing requirements.</li> <li>Risks are identified and resolved during each iteration.</li> </ul> </li> <li>Disadvantages \u274c:<ul> <li>Not suitable for smaller projects due to increased cost.</li> <li>Design can change repeatedly due to imperfect requirements.</li> <li>Project completion date may not be confirmed due to changing requirements.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#agile-model","title":"\ud83c\udfc3 Agile Model","text":"<ul> <li>Definition: Focuses on continuous delivery of software and handling frequent requirement changes. It's an iterative and incremental approach.</li> <li>Sprints: Project requirements are divided into modules or \"Sprints,\" typically 2-3 weeks long. Each Sprint involves planning, design, development, testing, release, and feedback.</li> <li>Key Terms \ud83d\udd11:<ul> <li>Sprint: A time-boxed iteration (e.g., two weeks) for delivering a working module.</li> <li>Scrum: A framework based on Agile principles.</li> <li>Scrum Master: Facilitates the Scrum process, usually for a particular project/scrum.</li> <li>User Story: Customer requirements split into features.</li> <li>Product Backlog: A list of prioritized user stories to be developed.</li> <li>Story Point: Defines the complexity of a user story from Dev and QA perspective.</li> </ul> </li> <li>Meetings \ud83e\udd1d:<ul> <li>Daily Standup/Scrum: Short daily meeting to discuss progress, what was done, what will be done, and any blockers.</li> <li>Sprint Review: End-of-sprint meeting to discuss progress.</li> <li>Sprint Retrospective: After sprint completion, discusses what went well, what didn't, and improvements for the next sprint.</li> <li>Defect Triage Meeting: Discusses progress on defects, open status, and prioritization.</li> </ul> </li> <li>Advantages \u2705: Better adaptability to change, continuous delivery.</li> <li>Disadvantages \u274c: Difficulty in estimating complex projects, risk of everlasting project if requirements keep changing.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#hybrid-model","title":"\ud83e\udd1d Hybrid Model","text":"<ul> <li>Definition: A combination of two or more primary SDLC models, modified as per business requirements. Used when features of multiple models are desired in a single model.</li> <li>When to Use:<ul> <li>When requirements are unclear (often combined with Prototype model).</li> <li>When an organization transitions to an Agile model.</li> </ul> </li> <li>Examples: Spiral + Prototype, V-model + Prototype.</li> <li>Advantages \u2705: Highly flexible, less customer rejection due to prototypes, easy to implement. Useful for small to medium-sized projects.</li> <li>Disadvantages \u274c: May not allow usual standards, difficult to handle for complex projects.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#prototype-model","title":"\ud83e\uddea Prototype Model","text":"<ul> <li>Definition: Based on customer requirements, an early version or dummy model (prototype) of the product is created for user feedback and refinement until an acceptable outcome is achieved.</li> <li>When to Use: When customer requirements are unclear or if the client is new to the market.</li> <li>Types of Prototypes (for knowledge):<ul> <li>Rapid Throwaway: Built quickly, gets feedback, then discarded.</li> <li>Evolutionary: Continuously refined and evolved into the final product.</li> <li>Incremental: Builds multiple prototypes incrementally, combining them for the final product.</li> <li>Extreme: Used for UI development, starts with static pages, then incrementally adds functionality.</li> </ul> </li> <li>Advantages \u2705: Reduces project risk, helps clarify ambiguous requirements, enables early user feedback.</li> <li>Disadvantages \u274c: Costly and time-consuming, excessive documentation due to continuous changes, potential for too much variation in requirements.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#derived-model-customized-model","title":"\ud83d\udca1 Derived Model (Customized Model)","text":"<ul> <li>Definition: Takes a basic model (e.g., Waterfall) and customizes it to specific customer requirements.</li> <li>Examples: Spiral Model and V-Model are derived from the Waterfall Model.</li> <li>Key Feature: Customization of a base model to add specific functionalities or address particular challenges (e.g., Risk analysis in Spiral model).</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#software-testing-life-cycle-stlc","title":"\ud83d\udd04 Software Testing Life Cycle (STLC)","text":"<p>STLC is a step-by-step standard process to test any software or application. It's a part of the SDLC.</p> <p>STLC Phases \u2699\ufe0f: 1.  Requirement Analysis \ud83d\udcdd: Understand requirements (functional, non-functional), identify testable items, and create a Requirement Traceability Matrix (RTM). 2.  Test Planning \ud83d\udcc5: Test lead defines project scope, identifies resources, schedules, deliverables, approach, and effort estimation; prepares Test Plan and Test Strategy documents. 3.  Test Case Design \ud83d\udd8a\ufe0f: Testers design (author) detailed test cases, get them reviewed, and update based on feedback. Create test data. 4.  Test Execution \u25b6\ufe0f: Testers execute test cases on the build, compare actual vs. expected results, and log defects for failed cases. Sanity testing is often the first step here. 5.  Defect Reporting &amp; Tracking \ud83d\udc1b: Report defects to developers, map defects to test cases in RTM, retest fixes, and track status to closure. This involves the Defect Life Cycle. 6.  Test Closure \ud83c\udfc1: Final stage where testing objectives are reviewed, defects confirmed fixed, and test summary reports are generated.</p> <pre><code>graph TD\n    A[Requirement Analysis] --&gt; B[Test Planning]\n    B --&gt; C[Test Case Design]\n    C --&gt; D[Test Execution]\n    D --&gt; E[Defect Reporting &amp; Tracking]\n    E --&gt; F[Test Closure]</code></pre>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#test-documentation","title":"\ud83d\udcdd Test Documentation","text":"<p>Effective testing relies on well-structured documentation.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#test-plan","title":"\ud83d\udccb Test Plan","text":"<ul> <li>Definition: A detailed document that outlines the scope, objective, approach, schedule, estimations, deadlines, and resources for testing a project.</li> <li>Prepared by: Test Lead or Senior Test Engineer.</li> <li>Key Sections \ud83d\udcda:<ul> <li>Overview/Introduction: Purpose and project description.</li> <li>Scope (Inclusions &amp; Exclusions): What to test, what not to test.</li> <li>Test Strategy: Approach to testing (e.g., functional, non-functional, automation vs. manual).</li> <li>Pass/Fail Criteria: Conditions for suspending or passing a build.</li> <li>Entry/Exit Criteria: Conditions to start and stop testing at various levels (Unit, Integration, System, Acceptance).</li> <li>Roles &amp; Responsibilities: Team members and their roles.</li> <li>Test Schedule: Dates for testing activities.</li> <li>Test Deliverables: Documents to be submitted (e.g., test cases, defect reports, test execution results).</li> <li>Test Environment: Hardware/software configurations.</li> <li>Risk &amp; Mitigation Plan: Challenges and their solutions.</li> <li>Approval: Sign-off from Project Manager and Customer.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#test-strategy","title":"\ud83d\uddfa\ufe0f Test Strategy","text":"<ul> <li>Definition: An outline describing the complete approach of testing. It focuses on how to test the application (techniques, design methods).</li> <li>Level: Prepared at the organization level, applicable to multiple projects.</li> <li>Key Aspects: Documentation formats, test processes, team reporting structure, client communication strategy.</li> <li>Difference from Test Plan:<ul> <li>Test Strategy: How to test (approach, techniques), organization-level, rarely changes.</li> <li>Test Plan: What, when, and who will test; project-level, can change.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#test-cases","title":"\ud83d\udcdd Test Cases","text":"<ul> <li>Definition: A set of actions executed to verify a particular feature or functionality of an application. It focuses on what to test and how to test.</li> <li>Importance \ud83d\udca1:<ul> <li>Better Coverage \u2705: Ensures maximum coverage of scenarios and functionalities.</li> <li>Improved Quality \u2728: Helps find more and better defects, improving application quality.</li> <li>Tracking \ud83d\udcca: Enables proper tracking of test scenarios, test cases, and defects via traceability matrix.</li> </ul> </li> <li>Good Test Cases \ud83d\udc4d:<ul> <li>Simple &amp; Transparent: Easy to understand with clear steps.</li> <li>Traceable: Linked to requirement ID in RTM.</li> <li>Brief &amp; Short: Only necessary and valid steps.</li> <li>Positive &amp; Negative: Implement both positive (valid data) and negative (invalid data) scenarios.</li> <li>Maintainable: Easy to maintain and update.</li> <li>User-Centric: Cover usability aspects from an end-user perspective.</li> <li>Security &amp; Performance: Consider security (user permissions, session management) and performance (multi-user operations) aspects.</li> </ul> </li> <li>Format \ud83d\udcc4 (Common sections in a test case document):<ul> <li>Project Name, Module Name, Reference Document.</li> <li>Author, Date of Creation/Review.</li> <li>Test Case ID (Unique, meaningful, e.g., <code>TC_FB_Login_001</code>).</li> <li>Scenario, Test Case Summary/Description.</li> <li>Precondition: Conditions to be met before execution.</li> <li>Priority: Importance of the test case (P0, P1, P2, P3).</li> <li>Test Steps: Detailed execution steps.</li> <li>Test Data: Input data used.</li> <li>Expected Result: Anticipated output.</li> <li>Post Condition: State after successful execution.</li> <li>Actual Result: Observed output.</li> <li>Status: Pass/Fail based on comparison of actual vs. expected.</li> <li>Comments: Any remarks or execution notes.</li> </ul> </li> <li>Review Process \ud83e\uddd0: After authoring, test cases undergo self-review, peer review, and sometimes supervisory review (by Test Lead/Manager). Reviews ensure completeness, correctness, proper flow, and maximum coverage.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#test-scenarios","title":"\ud83d\udcda Test Scenarios","text":"<ul> <li>Definition: Describes the end-to-end functionality to be tested in an application. It's a high-level document with one-liner information.</li> <li>Focus: Primarily on what to test.</li> <li>Derivation: Derived from Business Requirement Documents (BRS) or Functional Requirement Specifications (FRS).</li> <li>Relationship with Test Cases: A test scenario can have multiple test cases.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#use-cases","title":"\ud83d\uddfa\ufe0f Use Cases","text":"<ul> <li>Definition: Describes the behavior of a system to do a particular task and accomplish a goal from an end-user perspective. They help understand requirements more clearly, often represented with diagrams.</li> <li>Components: Typically include an Actor (user), System, and the Use Case itself.</li> <li>Relationship with Test Scenarios/Cases: Use cases are inputs to derive test scenarios, which in turn are used to write test cases.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#traceability-matrix-rtm","title":"\ud83d\udcca Traceability Matrix (RTM)","text":"<ul> <li>Definition: A document that maps requirements to test cases to ensure complete coverage and track defects. It's also known as Requirement Traceability Matrix (RTM) or Cross-Reference Matrix (CRM).</li> <li>Purpose \ud83c\udfaf:<ul> <li>Ensures each requirement has at least one test case, guaranteeing complete test coverage.</li> <li>Helps find the root cause of defects by tracing back from defect to test case, scenario, and requirement.</li> <li>Identifies any gaps or missing requirements.</li> </ul> </li> <li>Mapping: Requirement ID \u27a1\ufe0f Scenario \u27a1\ufe0f Test Case ID \u27a1\ufe0f Test Result \u27a1\ufe0f Defect ID \u27a1\ufe0f Defect Status.</li> <li>Types \ud83d\udcdc:<ul> <li>Forward Traceability Matrix: Maps requirements to test cases (done before execution).</li> <li>Backward/Reverse Traceability Matrix: Maps test cases back to requirements (done after execution).</li> <li>Bidirectional Traceability: Combines both forward and backward tracing.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-report","title":"\ud83d\udc1b Defect Report","text":"<ul> <li>Definition: A document or entry in a bug tracking tool that provides concise details about identified defects, including steps to reproduce, expected results, and actual application behavior.</li> <li>Reasons for Defects \ud83e\udd37\u200d\u2640\ufe0f:<ul> <li>Missing requirements.</li> <li>Wrong implementation of requirements.</li> <li>Misunderstanding of requirements by developers.</li> </ul> </li> <li>Key Fields in a Defect Report \ud83d\udcc4:<ul> <li>Defect ID: Unique identifier (auto-generated by tools).</li> <li>Summary/Description: Brief explanation of the defect.</li> <li>Detected By: Tester who found the defect.</li> <li>Detected Date: Date the defect was found.</li> <li>Assigned To: Developer responsible for fixing.</li> <li>Severity: Impact/seriousness of the defect (Blocker, Critical, Major, Minor).</li> <li>Priority: Importance/urgency of fixing (High, Medium, Low).</li> <li>Status: Current state of the defect (New, Open, Fixed, Retest, Closed, Reopened, Rejected, Duplicate, Deferred, Not a Bug).</li> <li>Build Version: Software version where the defect was found.</li> <li>Module: Specific module affected.</li> <li>Environment: Environment where defect was found (Test, Dev, UAT).</li> <li>Defect Type: Functional, Non-functional, Performance, etc..</li> <li>Reproducible: Yes/No, whether the defect can be consistently reproduced.</li> <li>Reproducible Steps: Step-by-step instructions to trigger the defect.</li> <li>Expected/Actual Result: What should happen vs. what happened.</li> <li>Comments: Any additional remarks.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#types-of-testing","title":"\ud83e\uddea Types of Testing","text":"<p>Software testing can be categorized in many ways, including functional vs. non-functional, and different levels.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#functional-testing","title":"\u2699\ufe0f Functional Testing","text":"<ul> <li>Definition: Checks whether the features of the application work according to the specified requirements. It verifies that the system does what it's supposed to do.</li> <li>Focus: Functionality and behavior of the application, not internal structure.</li> <li>Types (Examples):<ul> <li>User Interface (UI) Testing: Verifies UI elements (buttons, text boxes, images, links, etc.) are present, displayed properly, and function as expected.</li> <li>Object Properties Testing: Verifies properties of elements like enabled/disabled state.</li> <li>Error Guessing Testing: Involves performing invalid operations to validate if proper, meaningful error messages are displayed. (Experience-based testing).</li> <li>Input Domain Testing: Verifies data acceptance by the system. Techniques include Boundary Value Analysis and Equivalence Class Partitioning.</li> <li>Database Testing: Verifies data integrity, stored procedures, triggers, and data manipulation operations (insert, update, delete, select) at the database level.</li> <li>Calculation Testing: Verifies calculations in the application are correct.</li> <li>Links &amp; URL Testing: Verifies links redirect to target pages and broken links are handled.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#non-functional-testing","title":"\ud83d\udcc8 Non-Functional Testing","text":"<ul> <li>Definition: Checks non-functional aspects like performance, usability, security, reliability, etc., of a software application. It focuses on how the system performs.</li> <li>Types (Examples):<ul> <li>Usability Testing: Verifies if the application is easy to use, operate, and understand.</li> <li>Performance Testing: Calculates application response time under various loads (e.g., Load, Stress, Volume, Spike testing). Tools like LoadRunner, JMeter.</li> <li>Security Testing: Verifies if the application can be accessed only by authorized users and is protected against threats.</li> <li>Compatibility Testing: Checks application behavior across different environments (OS, browsers, devices).</li> <li>Configuration Testing: Verifies application behavior on different software and hardware configurations.</li> <li>Recovery Testing: Tests system's ability to recover from crashes or hardware failures.</li> <li>Installation Testing: Verifies the installation and uninstallation process of the software.</li> <li>Compliance Testing: Ensures application complies with market standards and company policies.</li> <li>Documentation Testing: Verifies project-related documents.</li> <li>Interoperability Testing: Verifies end-to-end workflow.</li> <li>Sanitation/Garbage Testing: Checks if application provides extra unwanted features.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#levels-of-software-testing","title":"\ud83e\ude9c Levels of Software Testing","text":"<p>There are four main levels of testing, performed in a specific hierarchy to ensure comprehensive quality.</p> <pre><code>graph TD\n    A[Unit Testing] --&gt; B[Integration Testing]\n    B --&gt; C[System Testing]\n    C --&gt; D[Acceptance Testing]</code></pre> <ol> <li> <p>Unit Testing (Component/Module Testing) \ud83e\udde9</p> <ul> <li>Definition: Tests individual units or components of source code (smallest testable part) in isolation.</li> <li>Who Performs: Primarily developers or white-box testers.</li> <li>Technique: White Box Testing.</li> <li>Goal: Find defects as early as possible.</li> <li>Techniques (Examples):<ul> <li>Structural Techniques: Verify internal structure of program (Statement, Condition, Branch, Path testing).</li> <li>Functional Testing: Some black-box testing at unit level.</li> <li>Error-Based Testing: (e.g., Error Guessing, Mutation Testing).</li> </ul> </li> </ul> </li> <li> <p>Integration Testing (Module Interface Testing) \ud83d\udd17</p> <ul> <li>Definition: Tests the interfaces and data flow between two or more integrated modules.</li> <li>Who Performs: Testers, sometimes with developer help.</li> <li>Approaches:<ul> <li>Big Bang Approach: All modules integrated and tested at once (less effective for large projects).</li> <li>Incremental Approach: Modules integrated one by one.<ul> <li>Top-Down: Main module to sub-module. Uses Stubs (substitute for sub-module).</li> <li>Bottom-Up: Sub-module to main module. Uses Drivers (substitute for main module).</li> <li>Mixed/Sandwich: Combination of top-down and bottom-up.</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>System Testing (End-to-End System Testing) \ud83d\udda5\ufe0f</p> <ul> <li>Definition: Tests the complete integrated system to evaluate compliance with specified requirements. It's the first level where the entire system is tested end-to-end.</li> <li>Who Performs: Primarily testers.</li> <li>Technique: Black Box Testing.</li> <li>Focus: Both functional and non-functional aspects of the application.</li> <li>Advantage: Helps find maximum bugs before acceptance testing.</li> </ul> </li> <li> <p>Acceptance Testing (User Acceptance Testing - UAT) \ud83e\udd1d</p> <ul> <li>Definition: The highest level of testing performed to ensure the software meets user expectations and real-world conditions. It validates the software against customer requirements.</li> <li>Who Performs: Real users (customers/end-users) at their location, sometimes with testers.</li> <li>Goal: Gain customer validation and reduce product failure risk post-launch.</li> <li>Levels:<ul> <li>Alpha Testing: Conducted by internal teams at the development site, often a \"pre-UAT\". Helps uncover serious bugs early.</li> <li>Beta Testing: Conducted by a limited number of real users at their own locations in a real environment. Provides direct feedback from customers.</li> </ul> </li> </ul> </li> </ol>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#other-testing-types","title":"\ud83e\udde9 Other Testing Types","text":"<p>Beyond the levels, specific types of testing address particular concerns.</p> <ul> <li> <p>Smoke Testing \ud83d\udca8 (Build Verification/Acceptance Testing)</p> <ul> <li>Definition: A preliminary check on an unstable build to verify if critical functionalities are stable and working fine. It's a subset of acceptance testing.</li> <li>Goal: To decide if the build is stable enough for further testing (build acceptance or rejection).</li> <li>Characteristics: Usually documented and scripted. Conducted quickly (15-30 minutes).</li> <li>Who Performs: Both developers and testers.</li> </ul> </li> <li> <p>Sanity Testing \ud83e\udde0 (Surface Level Testing)</p> <ul> <li>Definition: A quick, random, and unscripted test performed after bug fixes or new features to ensure they work as expected and don't break related functionalities. It's a subset of regression testing.</li> <li>Goal: To determine if new module additions or bug fixes are stable enough to pass to the next level of testing.</li> <li>Characteristics: Not documented or scripted, quick and speedy.</li> <li>Who Performs: Only testers.</li> </ul> </li> <li> <p>Regression Testing \u267b\ufe0f</p> <ul> <li>Definition: Performed after any code changes, updates, or bug fixes to verify that new code does not negatively impact existing, unchanged features.</li> <li>Goal: Ensure the stability of the software after updates.</li> <li>Types: Unit Regression, Partial/Selective Regression, Full Regression.</li> </ul> </li> <li> <p>Retesting \ud83d\udd01</p> <ul> <li>Definition: Testing a specific bug after it has been fixed to ensure the bug is resolved and works as expected.</li> <li>Goal: Verify defect fixes.</li> <li>Characteristics: Planned testing with proper verification steps. High priority.</li> </ul> </li> </ul> Parameter Smoke Testing Sanity Testing Purpose Verify stability of critical functionalities in an unstable build. Verify rationality/quality of specific changes and related functionalities. Scope Wide and high-level (critical functionalities of entire system). Shallow and focused (particular component or bug fix and related areas). Build State Performed on an unstable build. Performed on a stable build (after bug fix or new feature). Scripted? Usually documented and scripted (subset of acceptance tests). Not documented or scripted (random, quick check). Who Performs? Both developers and testers. Only testers. When Done? At the beginning of testing cycle for new builds. After bug fixes or new feature implementations. Parameter Retesting Regression Testing Purpose To ensure a specific bug is fixed and working as expected. To ensure changes haven't negatively impacted unchanged parts of the product. Scope Focused on the specific failed test case(s). Wide, covering related and sometimes all existing functionalities. Test Cases Re-executes failed test cases from previous execution. Re-runs a subset of existing test cases. Automation Cannot be automated (specific bug validation). Can often be automated (repetitive tasks). Priority High priority (bug must be verified). Can be done in parallel with retesting. New Build Req. Requires a new build with the fix. Can be done on the same build or new builds."},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-management","title":"\ud83d\udc1b Defect Management","text":"<p>Managing defects effectively is crucial for software quality.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-life-cycle-bug-life-cycle","title":"\ud83d\udd04 Defect Life Cycle (Bug Life Cycle)","text":"<p>This is the journey of a defect from its discovery to closure.</p> <pre><code>graph TD\n    A[New] --&gt; B{Open}\n    B -- Developer fixes --&gt; C[Fixed]\n    C -- Tester Retests --&gt; D{Retest}\n    D -- Pass --&gt; E[Closed]\n    D -- Fail --&gt; B\n    B -- Developer rejects (not a bug, duplicate, deferred, not reproducible, design issue, enhancement) --&gt; F[Rejected]</code></pre> <p>Defect Statuses \ud83d\udcca: *   New: Defect is reported for the first time. *   Open: Developer is currently working on the defect. *   Fixed: Code changes are completed, and the defect is resolved by the developer. *   Retest: Developer assigns the fixed defect back to testing team for re-verification. *   Closed: Defect is verified by the tester and confirmed as fixed. *   Reopened: Defect is found again during retesting (fix was unsuccessful). *   Rejected: Developer deems the defect invalid (e.g., Not a Bug, Duplicate, Deferred, Not Reproducible, Design Issue, Enhancement).     *   Duplicate: Matches a previously reported defect.     *   Deferred: Not important for current cycle, planned for next.     *   Not a Bug: Not an actual defect, works as intended.     *   Not Reproducible: Developer cannot reproduce the defect in their environment.     *   Enhancement: Not a defect, but a new feature request.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-priority-severity","title":"\u2696\ufe0f Defect Priority &amp; Severity","text":"<p>These two attributes classify defects for effective management and prioritization.</p> <ul> <li> <p>Severity (Seriousness) \ud83d\udcc9</p> <ul> <li>Definition: Defines how impactful or serious a bug is to the system and its impact on business workflow.</li> <li>Who Assigns: Tester.</li> <li>Types (from highest to lowest impact):<ul> <li>Blocker (Show Stopper): Completely blocks testing or prevents the main functionality from working. E.g., Unable to login, 500 internal server error.</li> <li>Critical: Major functionality is severely impacted or critical data loss occurs. E.g., Application crashes for frequently used functionality.</li> <li>Major: Functionality is not working as expected, but a workaround exists, or there is no critical impact. E.g., Unable to delete all emails at once.</li> <li>Minor: Cosmetic issues, UI misalignments, spelling mistakes not impacting core functionality. E.g., Spelling mistake on a rarely visited page.</li> </ul> </li> </ul> </li> <li> <p>Priority (Importance) \u2b06\ufe0f</p> <ul> <li>Definition: Indicates how soon the defect should be fixed (importance).</li> <li>Who Assigns: Tester initially, may be changed by developer/BA.</li> <li>Types (from highest to lowest urgency):<ul> <li>High (P0/P1): Must be fixed immediately. E.g., Blocker or Critical severity issues, or high business impact.</li> <li>Medium (P2): Should be fixed in the current release, but not immediately critical.</li> <li>Low (P3): Can be fixed in future releases or if time permits.</li> </ul> </li> </ul> </li> </ul> Severity / Priority High Priority Low Priority High Severity Unable to Login, 500 Internal Server Error (Blocker issue). \"About Us\" link goes to a blank page (functionality broken but not critical to immediate release). Low Severity Company logo incorrect (High business importance, low functional impact). Spelling mistake on a page not frequently navigated."},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-leakage","title":"\ud83c\udf0a Defect Leakage","text":"<ul> <li>Definition: When defects escape from one level of testing to another, particularly from QA testing to UAT or production.</li> <li>Calculation: <code>(Number of Defects found by end-user / (Total Defects Raised by QA - Invalid Defects)) * 100</code>. (e.g., 5.5% in source example).</li> <li>Reasons for Leakage \ud83d\ude1e:<ul> <li>Absence of proper review process.</li> <li>Poorly designed test cases (e.g., due to misunderstanding requirements).</li> <li>Incorrect deployment (in UAT or Production).</li> <li>Incorrect/insufficient test data.</li> </ul> </li> <li>Prevention \ud83d\udee1\ufe0f:<ul> <li>Proper review process (test cases, testing process).</li> <li>Design proper test cases (good coverage).</li> <li>Focus on error-prone modules.</li> <li>Proper regression testing.</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-clustering","title":"\ud83d\udca5 Defect Clustering","text":"<ul> <li>Definition: When a small number of modules contain most of the bugs detected, or defects are concentrated across a few functionalities. It's also known as the 80/20 Rule (Pareto Principle).</li> <li>80/20 Rule: 80% of defects are found in 20% of the modules.</li> <li>Reason: High complexity of certain modules, or mistakes by developers in logic/code.</li> <li>Tester's Action: Concentrate more on error-prone modules, write more test cases, but don't ignore other modules.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-age","title":"\ud83d\udd70\ufe0f Defect Age","text":"<ul> <li>Definition: The time difference from the defect found date to the defect closed date.</li> <li>Calculation: Can be in days/hours or in phases (e.g., found in Requirement Analysis, closed in Testing = 2 phases).</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-masking","title":"\ud83c\udfad Defect Masking","text":"<ul> <li>Definition: A defect that hides other defects in the application. It's a hidden defect that hasn't caused a failure because another defect prevented that part of the code from being executed.</li> <li>Impact: Uncovered only when the defect hiding it is resolved.</li> <li>Example: A defect on an \"Add Employee\" page prevents navigation to an \"Add Task\" page, thus masking any defects on the \"Add Task\" page.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#defect-triage","title":"\ud83d\udea8 Defect Triage","text":"<ul> <li>Definition: The process to prioritize defects based on their severity, priority, risk involvement, and frequency of occurrence. It means to \"decide the order\" or \"sort it out\".</li> <li>Purpose: To evaluate defects and decide which ones are possible to fix, especially when time is limited.</li> <li>Meeting: Conducted by Project Manager, Developers, Testers, and Business Users.</li> <li>Outcome: Prioritized list of defects, re-assigned priorities/severities if needed, and a decision on deferring non-critical defects.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#testing-techniques-methods","title":"\ud83d\udee0\ufe0f Testing Techniques &amp; Methods","text":"<p>Testers use various techniques and methods to approach testing.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#black-box-testing","title":"\ud83d\udce6 Black Box Testing","text":"<ul> <li>Definition: Tests the functionality of a system without any knowledge of its internal workings or code.</li> <li>Focus: User's perspective, inputs, and expected outputs.</li> <li>Examples: Functional testing types like UI, Database (from UI perspective).</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#white-box-testing","title":"\u26aa White Box Testing","text":"<ul> <li>Definition: Tests the internal structure, logic, and code of a software system.</li> <li>Focus: Developer's perspective, internal logic, performance, and efficiency.</li> <li>Who Performs: Developers or white-box testers.</li> <li>Examples: Unit testing, sometimes integration testing.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#grey-box-testing","title":"\u26ab Grey Box Testing","text":"<ul> <li>Definition: Combines approaches of both black box and white box testing.</li> <li>Focus: Partial knowledge of internal details, testing some internal workings but not all.</li> <li>Used In: Often in system integration testing.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#static-testing","title":"\ud83e\uddea Static Testing","text":"<ul> <li>Definition: Involves testing project-related documents (e.g., BRD, SRS, design documents, code) without executing the actual software. It ensures correctness and completeness of documentation.</li> <li>Techniques:<ul> <li>Reviews: Reading documents to ensure correctness and completeness. (Requirements review, design reviews, code reviews, test plan/test case reviews).</li> <li>Walkthroughs: Informal reviews where the author guides peers through the document/code to explain and gather feedback.</li> <li>Inspections: More formal, pre-planned reviews with a structured process involving a moderator, reader (author), and writer (notes issues).</li> </ul> </li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#dynamic-testing","title":"\u26a1 Dynamic Testing","text":"<ul> <li>Definition: Involves testing the actual software by providing different inputs and observing outputs, typically performed after coding is done.</li> <li>Techniques: Unit testing, Integration testing, System testing, Acceptance testing.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#test-design-techniques","title":"\ud83d\udcd0 Test Design Techniques","text":"<p>These techniques help in designing effective test cases, ensuring better coverage, and finding maximum defects.</p> <ol> <li> <p>Boundary Value Analysis (BVA) \ud83d\udccf</p> <ul> <li>Definition: Focuses on testing values at the boundaries of valid and invalid input ranges.</li> <li>Concept: Defects are often found at the edges of valid input ranges.</li> <li>Example: For a field accepting values 18-35, test 17, 18, 19, 34, 35, 36.</li> </ul> </li> <li> <p>Equivalence Class Partitioning (ECP) \ud83d\uddc2\ufe0f</p> <ul> <li>Definition: Divides a set of test conditions into groups or partitions that can be considered the same. From each partition, one value is picked for testing.</li> <li>Concept: If one value in a partition works, others in that partition are likely to work too.</li> <li>Example: For a field accepting 1-500, partitions could be: invalid (&lt;1), valid (1-500), invalid (&gt;500).</li> </ul> </li> <li> <p>Decision Table Testing \ud83d\udd00</p> <ul> <li>Definition: Used to test system behavior for different input combinations. It tabulates input conditions and corresponding system actions/outputs.</li> <li>When to Use: When a system has complex business rules.</li> <li>Example: Login screen with username, password, and submit. Table shows rules for correct/incorrect username/password combinations leading to homepage or error.</li> </ul> </li> <li> <p>State Transition Testing \u2194\ufe0f</p> <ul> <li>Definition: Analyzes application behavior based on changes to input conditions or system states. Tests designed to execute valid and invalid state transitions.</li> <li>When to Use: For applications with sequence rules or finite sets of input values.</li> <li>Example: ATM card entry: wrong password attempts leading to account block.</li> </ul> </li> <li> <p>Error Guessing Testing \u2753</p> <ul> <li>Definition: A type of experience-based testing where testers use their prior experience and intuition to guess problematic areas and potential errors.</li> <li>Method: Performing invalid operations and validating the displayed error messages.</li> <li>Example: Uploading a file exceeding maximum limit, or with an invalid format.</li> </ul> </li> </ol>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#common-myths-challenges-in-manual-testing","title":"\ud83d\udc7b Common Myths &amp; Challenges in Manual Testing","text":"<p>Despite its importance, manual testing faces misconceptions and inherent difficulties.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#common-myths","title":"\ud83d\udc7b Common Myths","text":"<ul> <li>Testing is easy: It requires deep understanding and analytical skills.</li> <li>Anyone can do testing: Requires passion and a mindset to \"break\" systems.</li> <li>Manual testing is obsolete: It's the backbone; automation comes after product stability.</li> <li>Manual testers have low pay: Experienced manual testers are valued and well-compensated in established organizations.</li> <li>Testers have weak coding skills: Testing often involves coding (SQL, scripting for automation, data validation).</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#challenges-with-manual-testing","title":"\ud83e\udd2f Challenges with Manual Testing","text":"<ul> <li>Repetitive Tasks: Especially in regression testing, leading to oversight and lack of engagement.</li> <li>Test Data Management: Ensuring accuracy, consistency, and relevance, which is time-consuming and error-prone.</li> <li>Test Environment Setup: Mimicking production environments is complex and can lead to false results.</li> <li>Test Case Documentation: Creating and maintaining comprehensive, understandable, and up-to-date test cases.</li> <li>Time Constraints: Balancing deadlines with thorough test coverage often impacts software quality.</li> <li>Communication &amp; Collaboration: Miscommunication with development and other teams can complicate defect resolution.</li> <li>Adaptation to Frequent Changes: Rapid changes in Agile environments require constant modification of test cases and plans.</li> <li>Test Data Privacy &amp; Security: Protecting sensitive data during testing.</li> <li>Browser &amp; Device Fragmentation: Testing across numerous devices, OS, and browsers escalates workload.</li> <li>Test Reporting &amp; Documentation: Generating and maintaining detailed reports is time-consuming.</li> </ul>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#manual-testing-best-practices","title":"\ud83c\udfc6 Manual Testing Best Practices","text":"<p>To ensure high-quality software, follow these best practices for manual testing: *   Thoroughly Understand Requirements \ud83d\udccb: Study documentation (SRS, FRD) to align testing with intended functionality. *   Define Clear Scope &amp; Objectives \ud83c\udfaf: Outline what to test, specific goals, and approach. *   Integrate Risk Analysis \u26a0\ufe0f: Prioritize testing efforts based on potential defect impact. *   Incremental Testing Approach \ud83d\udcc8: Break down testing into components for early defect detection. *   Write Effective Test Cases \ud83d\udcdd: Simple, clear, traceable, reusable, covering positive/negative scenarios. *   Utilize Exploratory &amp; Ad Hoc Testing \ud83d\udd0d: Identify unexpected defects and ensure thorough coverage. *   Foster Effective Communication \ud83d\udde3\ufe0f: Collaborate closely with development team and stakeholders. *   Perform UI Testing \ud83c\udfa8: Identify layout, design, responsiveness, and usability issues. *   Continuous Learning \ud83e\uddd1\u200d\ud83c\udf93: Stay informed about product updates and testing methodologies.</p>"},{"location":"tech-essentials-guide/testing-concepts/manual-testing-detailed/#tools-used-for-manual-testing","title":"\ud83d\udee0\ufe0f Tools Used for Manual Testing","text":"<p>Various tools support different aspects of manual testing: *   Test Management Tools \ud83d\udcc2:     *   TestLink: Web-based system for quality assurance, supports cross-browser testing.     *   Jira: Issue and project tracking, compatible with Agile, manages bugs, tasks, and team collaboration.     *   Zephyr: Jira plugin for test case management and tracking.     *   qTest: Test management platform for collaboration and monitoring test cycles.     *   BrowserStack Live / App Live: Cloud platforms for manual website/app testing on real devices/browsers.     *   LambdaTest: AI-native cloud platform for manual web and mobile app testing on various browsers, devices, and OS combinations.     *   TestRail: Test case management tool. *   Bug Tracking Tools \ud83d\udc1b:     *   Bugzilla: Web-based bug-tracking tool.     *   ClearQuest, DevTrack, Bugzilla: Purely bug tracking tools. *   Performance Testing Tools \ud83d\ude80:     *   LoadRunner: Simulates real-world user behavior and load.     *   Apache JMeter: Open-source load testing tool. *   Mobile UI Testing Tools \ud83d\udcf1:     *   Perfecto: Specifically for mobile UI testing, provides real device screen resolutions.</p>"}]}